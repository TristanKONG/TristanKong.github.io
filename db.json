{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/image/项目经理.jpg","path":"image/项目经理.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/0个人简介.md","hash":"4e330419d893098b159bc71613d87155621e55d4","modified":1728895297293},{"_id":"source/_posts/1项目经理.md","hash":"3e484ae361d0e5069a4674394f99de92d4d770b1","modified":1728876462349},{"_id":"source/_posts/4软件工程（下）.md","hash":"ad28cc590bbacda09e06c82b674fc54522d21804","modified":1728876473124},{"_id":"source/_posts/3软件工程（中）.md","hash":"ac1c3b6aa93fb0ea6cd318c9616cbf2d21128a69","modified":1728876469482},{"_id":"source/_posts/2软件工程（上）.md","hash":"d09aa65d5621f5eba89ffe48dc0554f0c7242d68","modified":1728876466385},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"630df8733137bdf4f897e2bfa723ee9fb6adf38a","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"fa2af55d8c61c53a364f4ea5fee417f35a173957","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"6897a617c9fa46519ee265c0e69cf0d203318a43","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"113012153240fa62a2dffc85b1dd6a476609670a","modified":1728635686802},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1728635686792},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"15535c222f5a689c255c77722d2334bb1ac97a7e","modified":1728635686806},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1728635686802},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"a4b3530798b0a7a23d31fb0b86b530fcc2fce87a","modified":1728635686805},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1728635686793},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"d22ec72d00567db3782661ab5ccdb2475469da4c","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"7f09aa0520688e2de50cb5b6631998682f9200f5","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1728635686795},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1728635686794},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1728635686795},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1728635686795},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"088c2507d8f221416f99cf72d73641ba476a0f00","modified":1728635686795},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1728635686795},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"424f6e94ced575b51bb7dcebdc0f25d4f4c99fe2","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"e41d1e0e3a9e15c30b7142491bed39dc50371e96","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1728635686796},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"99ad49cb7ee932c62ab0ef3a4de71f7e7e8c6bed","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1728635686801},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"0b5bd5ce6783a733607a62c5273486d8893571c6","modified":1728635686808},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1728635686807},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1728635686804},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"ae76862ec15f0bc6e52ddce986305991ebff5b18","modified":1728635686802},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1728635686802},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1728635686804},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1728635686802},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1728635686802},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"403c39c7bb1caa1f3b142207b59aa0567f898a31","modified":1728635686803},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1728635686804},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1728635686804},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"04838b4b2ca4788700c48449e5fb6790d18c0f2e","modified":1728635686803},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1728635686804},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1728635686804},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"98c85af1103af18b02c4f5f207fdfc48e207d794","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1728635686797},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"403e107162a13bd8db2fc97f2f85df5b235f9308","modified":1728635686797},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1728635686798},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e1854416d49a56048a81ee9c08db69fb07698916","modified":1728635686797},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"ee1ac7ba2b46b7e59d46b20a42f0b590efd50359","modified":1728635686797},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"57db292850074c1cfc779c6e9ebbc16a5eb6ab5a","modified":1728635686798},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1728635686798},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"d3f1ba491f5dc75f5fd657392293d52f8438ea1e","modified":1728635686797},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1728635686798},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"892a5b524a508f395f6d72cb6721f0a3db14d4d7","modified":1728635686798},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1728635686798},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1728635686799},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"fd5d3187f4e3d45f8af08f93b263fca7ed666c75","modified":1728635686800},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"e78bda05fcf57b0e5e3a20cf3505d37fd69aaf46","modified":1728635686799},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1728635686799},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1728635686799},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"edf8a6a066f201b1ffad32c585bd79c9982d4433","modified":1728635686808},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1728635686807},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1728635686806},{"_id":"source/image/项目经理.jpg","hash":"dad9178a1d677122e25df46080ae616dfc29bf80","modified":1728809256735},{"_id":"public/2024/10/12/1项目经理/index.html","hash":"d8a7a5e2d6735eb67562a06972cc696c483860b2","modified":1729083331212},{"_id":"public/2024/10/12/0个人简介/index.html","hash":"08c00c2d583f7000a634388770361a0d9bb7fc27","modified":1729083331212},{"_id":"public/archives/index.html","hash":"3c9f9621b0809c734c5664b0c8e25d2766b0a20d","modified":1729083331212},{"_id":"public/archives/2024/index.html","hash":"32a2d0676ddd0b48b7b2848f78e43199ec24c133","modified":1729083331212},{"_id":"public/archives/2024/10/index.html","hash":"d18c4584685e19177926094eb67f9288dc57e00a","modified":1729083331212},{"_id":"public/categories/ABOUTME/index.html","hash":"69965a9fb4cde083e12b16cfcce3e8160dea7e16","modified":1729083331212},{"_id":"public/categories/Notes/index.html","hash":"b6a0f9123bce8a6b6135c1f92228d539dac18d4c","modified":1729083331212},{"_id":"public/2024/10/12/2软件工程（上）/index.html","hash":"bbd3d690be85f14c70b2325de6bc0837c0461de8","modified":1729083331212},{"_id":"public/2024/10/12/3软件工程（中）/index.html","hash":"d6e234c48f72c8018fcde80b7ceb322f0fdc9ac7","modified":1729083331212},{"_id":"public/2024/10/12/4软件工程（下）/index.html","hash":"c77d9ea42a89e0adda03107440f0e4c9282ccdee","modified":1729083331212},{"_id":"public/index.html","hash":"d7d0d959252747d2c9afb12e471dc193177b1906","modified":1729083331212},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1729083331212},{"_id":"public/css/style.css","hash":"ddb3792605d744ab3d9f0a649c82b62e9b16daa6","modified":1729083331212},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1729083331212},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1729083331212},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1729083331212},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1729083331212},{"_id":"public/image/项目经理.jpg","hash":"dad9178a1d677122e25df46080ae616dfc29bf80","modified":1729083331212}],"Category":[{"name":"ABOUTME","_id":"cm2bvklb000024cuf2fl6dz85"},{"name":"Notes","_id":"cm2bvklb100034cufgn53be5h"}],"Data":[],"Page":[],"Post":[{"title":"About Me","date":"2024-10-12T06:00:00.000Z","_content":"\n### 毕业院校：海南大学\n#### 专业：软件工程（NIIT）大数据方向\n#### 毕设：多模态动作识别模型的可解释性研究\n###### 1.使用预训练的深度学习模型完成视频的动作识别任务；\n###### 2.使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\n###### 3.引入多尺度融合技术提高解释清晰度；\n\n###### 4.与现有方法设置对比实验，证明理论有效性。\n\n#### 邮箱：1361475837@qq.com\n\n### 个人情况\n#### 没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\n#### 烦了就健身（段位较低）、跑步\n#### 游戏好久没打了。之前喜欢玩 巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\n#### 不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\n\n#### 永远满足不了的好奇心。。。。。。\n\n","source":"_posts/0个人简介.md","raw":"---\n\ntitle: About Me \n\ndate: 2024-10-12 14:00:00 \n\n\ncategories: ABOUTME \n\n---\n\n### 毕业院校：海南大学\n#### 专业：软件工程（NIIT）大数据方向\n#### 毕设：多模态动作识别模型的可解释性研究\n###### 1.使用预训练的深度学习模型完成视频的动作识别任务；\n###### 2.使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\n###### 3.引入多尺度融合技术提高解释清晰度；\n\n###### 4.与现有方法设置对比实验，证明理论有效性。\n\n#### 邮箱：1361475837@qq.com\n\n### 个人情况\n#### 没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\n#### 烦了就健身（段位较低）、跑步\n#### 游戏好久没打了。之前喜欢玩 巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\n#### 不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\n\n#### 永远满足不了的好奇心。。。。。。\n\n","slug":"0个人简介","published":1,"updated":"2024-10-14T08:41:37.293Z","comments":1,"layout":"post","photos":[],"_id":"cm2bvklav00004cufc91p2h7u","content":"<h3 id=\"毕业院校：海南大学\"><a href=\"#毕业院校：海南大学\" class=\"headerlink\" title=\"毕业院校：海南大学\"></a>毕业院校：海南大学</h3><h4 id=\"专业：软件工程（NIIT）大数据方向\"><a href=\"#专业：软件工程（NIIT）大数据方向\" class=\"headerlink\" title=\"专业：软件工程（NIIT）大数据方向\"></a>专业：软件工程（NIIT）大数据方向</h4><h4 id=\"毕设：多模态动作识别模型的可解释性研究\"><a href=\"#毕设：多模态动作识别模型的可解释性研究\" class=\"headerlink\" title=\"毕设：多模态动作识别模型的可解释性研究\"></a>毕设：多模态动作识别模型的可解释性研究</h4><h6 id=\"1-使用预训练的深度学习模型完成视频的动作识别任务；\"><a href=\"#1-使用预训练的深度学习模型完成视频的动作识别任务；\" class=\"headerlink\" title=\"1.使用预训练的深度学习模型完成视频的动作识别任务；\"></a>1.使用预训练的深度学习模型完成视频的动作识别任务；</h6><h6 id=\"2-使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\"><a href=\"#2-使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\" class=\"headerlink\" title=\"2.使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\"></a>2.使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；</h6><h6 id=\"3-引入多尺度融合技术提高解释清晰度；\"><a href=\"#3-引入多尺度融合技术提高解释清晰度；\" class=\"headerlink\" title=\"3.引入多尺度融合技术提高解释清晰度；\"></a>3.引入多尺度融合技术提高解释清晰度；</h6><h6 id=\"4-与现有方法设置对比实验，证明理论有效性。\"><a href=\"#4-与现有方法设置对比实验，证明理论有效性。\" class=\"headerlink\" title=\"4.与现有方法设置对比实验，证明理论有效性。\"></a>4.与现有方法设置对比实验，证明理论有效性。</h6><h4 id=\"邮箱：-x31-x33-54-x31-52-x37-x35-x38-x33-55-x40-x71-113-x2e-x63-x6f-109\"><a href=\"#邮箱：-x31-x33-54-x31-52-x37-x35-x38-x33-55-x40-x71-113-x2e-x63-x6f-109\" class=\"headerlink\" title=\"邮箱：&#x31;&#x33;&#54;&#x31;&#52;&#x37;&#x35;&#x38;&#x33;&#55;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\"></a>邮箱：<a href=\"mailto:&#x31;&#x33;&#54;&#x31;&#52;&#x37;&#x35;&#x38;&#x33;&#55;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#x31;&#x33;&#54;&#x31;&#52;&#x37;&#x35;&#x38;&#x33;&#55;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></h4><h3 id=\"个人情况\"><a href=\"#个人情况\" class=\"headerlink\" title=\"个人情况\"></a>个人情况</h3><h4 id=\"没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\"><a href=\"#没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\" class=\"headerlink\" title=\"没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\"></a>没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）</h4><h4 id=\"烦了就健身（段位较低）、跑步\"><a href=\"#烦了就健身（段位较低）、跑步\" class=\"headerlink\" title=\"烦了就健身（段位较低）、跑步\"></a>烦了就健身（段位较低）、跑步</h4><h4 id=\"游戏好久没打了。之前喜欢玩-巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\"><a href=\"#游戏好久没打了。之前喜欢玩-巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\" class=\"headerlink\" title=\"游戏好久没打了。之前喜欢玩 巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\"></a>游戏好久没打了。之前喜欢玩 巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。</h4><h4 id=\"不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\"><a href=\"#不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\" class=\"headerlink\" title=\"不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\"></a>不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。</h4><h4 id=\"永远满足不了的好奇心。。。。。。\"><a href=\"#永远满足不了的好奇心。。。。。。\" class=\"headerlink\" title=\"永远满足不了的好奇心。。。。。。\"></a>永远满足不了的好奇心。。。。。。</h4>","excerpt":"","more":"<h3 id=\"毕业院校：海南大学\"><a href=\"#毕业院校：海南大学\" class=\"headerlink\" title=\"毕业院校：海南大学\"></a>毕业院校：海南大学</h3><h4 id=\"专业：软件工程（NIIT）大数据方向\"><a href=\"#专业：软件工程（NIIT）大数据方向\" class=\"headerlink\" title=\"专业：软件工程（NIIT）大数据方向\"></a>专业：软件工程（NIIT）大数据方向</h4><h4 id=\"毕设：多模态动作识别模型的可解释性研究\"><a href=\"#毕设：多模态动作识别模型的可解释性研究\" class=\"headerlink\" title=\"毕设：多模态动作识别模型的可解释性研究\"></a>毕设：多模态动作识别模型的可解释性研究</h4><h6 id=\"1-使用预训练的深度学习模型完成视频的动作识别任务；\"><a href=\"#1-使用预训练的深度学习模型完成视频的动作识别任务；\" class=\"headerlink\" title=\"1.使用预训练的深度学习模型完成视频的动作识别任务；\"></a>1.使用预训练的深度学习模型完成视频的动作识别任务；</h6><h6 id=\"2-使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\"><a href=\"#2-使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\" class=\"headerlink\" title=\"2.使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；\"></a>2.使用基于逐层相关传播或基于反向传播（梯度）的类激活映射方法获取解释；</h6><h6 id=\"3-引入多尺度融合技术提高解释清晰度；\"><a href=\"#3-引入多尺度融合技术提高解释清晰度；\" class=\"headerlink\" title=\"3.引入多尺度融合技术提高解释清晰度；\"></a>3.引入多尺度融合技术提高解释清晰度；</h6><h6 id=\"4-与现有方法设置对比实验，证明理论有效性。\"><a href=\"#4-与现有方法设置对比实验，证明理论有效性。\" class=\"headerlink\" title=\"4.与现有方法设置对比实验，证明理论有效性。\"></a>4.与现有方法设置对比实验，证明理论有效性。</h6><h4 id=\"邮箱：-x31-x33-54-x31-52-x37-x35-x38-x33-55-x40-x71-113-x2e-x63-x6f-109\"><a href=\"#邮箱：-x31-x33-54-x31-52-x37-x35-x38-x33-55-x40-x71-113-x2e-x63-x6f-109\" class=\"headerlink\" title=\"邮箱：&#x31;&#x33;&#54;&#x31;&#52;&#x37;&#x35;&#x38;&#x33;&#55;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\"></a>邮箱：<a href=\"mailto:&#x31;&#x33;&#54;&#x31;&#52;&#x37;&#x35;&#x38;&#x33;&#55;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;\">&#x31;&#x33;&#54;&#x31;&#52;&#x37;&#x35;&#x38;&#x33;&#55;&#x40;&#x71;&#113;&#x2e;&#x63;&#x6f;&#109;</a></h4><h3 id=\"个人情况\"><a href=\"#个人情况\" class=\"headerlink\" title=\"个人情况\"></a>个人情况</h3><h4 id=\"没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\"><a href=\"#没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\" class=\"headerlink\" title=\"没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）\"></a>没事喜欢看书（各种书都看：科技，历史，文学，生物学，心理学，社会学，经济学。。。）</h4><h4 id=\"烦了就健身（段位较低）、跑步\"><a href=\"#烦了就健身（段位较低）、跑步\" class=\"headerlink\" title=\"烦了就健身（段位较低）、跑步\"></a>烦了就健身（段位较低）、跑步</h4><h4 id=\"游戏好久没打了。之前喜欢玩-巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\"><a href=\"#游戏好久没打了。之前喜欢玩-巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\" class=\"headerlink\" title=\"游戏好久没打了。之前喜欢玩 巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。\"></a>游戏好久没打了。之前喜欢玩 巫师Ⅲ，大表哥Ⅱ，LOL（黄金Ⅰ），CFHD（宗师），星际争霸，魔兽争霸，地球帝国，帝国时代，我的世界，骑砍。。。</h4><h4 id=\"不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\"><a href=\"#不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\" class=\"headerlink\" title=\"不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。\"></a>不抽烟，不嚼槟榔。酒的话，能喝，但不爱喝。</h4><h4 id=\"永远满足不了的好奇心。。。。。。\"><a href=\"#永远满足不了的好奇心。。。。。。\" class=\"headerlink\" title=\"永远满足不了的好奇心。。。。。。\"></a>永远满足不了的好奇心。。。。。。</h4>"},{"title":"项目经理","date":"2024-10-12T05:00:00.000Z","_content":"\n\n\n### 项目管理\n\n#### 基本概念\n\n- 范围管理\n\n- 时间管理\n\n- 成本管理\n\n- 质量管理\n\n- 风险管理\n\n- 沟通管理\n\n#### 管理流程\n\n- 启动\n\n- 规划\n\n- 执行\n\n- 监控\n\n- 收尾\n\n#### 方法论\n\n- 敏捷开发\n\n\t- 概念\n\n\t\t- 一种注重快速迭代和响应变化的方法\n\n\t- 价值观\n\n\t\t- 个人和交互 胜过 过程和工具\n\n\t\t- 可以运行的软件 胜过 面面俱到的文档\n\n\t\t- 客户合作 胜过 合同谈判\n\n\t\t- 响应变化 胜过 遵循计划\n\n\t- 敏捷框架\n\n\t\t- Scrum\n\n\t\t\t- 迭代周期\n\n\t\t- Kanban\n\n\t\t\t- 持续交付\n\n\t\t\t- 可视化工作流\n\n\t\t\t\t- Trello\n\n\t\t- 极限编程XP\n\n\t\t\t- 四个价值观\n\n\t\t\t\t- 加强交流\n\n\t\t\t\t- 从简单做起\n\n\t\t\t\t- 寻求反馈\n\n\t\t\t\t- 勇于实事求是\n\n\t- 适用场景\n\n\t\t- 需求变换频繁的项目\n\n- 瀑布模型\n\n\t- 概念\n\n\t\t- 基于软件生存周期的\n\n\t\t\t- 线性开发模型\n\n\t\t- 每一阶段必须完成规定的文档并进行复审\n\n\t- 适用场景\n\n\t\t- 需求明确的\n\n\t\t\t- 中小型项目\n\n### 技术\n\n#### 软件开发生命周期（SDLC）\n\n#### 编程语言\n\n#### 数据库\n\n### 岗位情况\n\n#### 简介\n\n- 负责管理和协调项目从启动到收尾的整个生命周期\n\n#### 工作内容\n\n- 会议组织\n\n- 进度跟踪\n\n- 风险管理\n\n- 问题解决\n\n- 文档编制\n\n- 客户沟通\n\n#### 认证\n\n- PMP（Project Management Professional）\n\n- Agile或Scrum认证\n\n\t- 如CSM（Cetified ScrumMaster）\n\n### 工具\n\n#### 项目管理工具\n\n- Jira\n\n\t- 敏捷项目管理\n\n\t\t- 支持\n\n\t\t\t- Scrum\n\n\t\t\t- Kanban\n\n- Trello\n\n\t- 任务跟踪\n\n- Asana\n\n\t- 跨部门协作\n\n#### 协作工具\n\n- Google Docs\n\n- Microsoft Office\n\n- Zoom\n\n#### 沟通平台\n\n- Slack\n\n\t- 跨部门\n\n- Microsoft Teams\n\n#### 代码管理与版本追踪\n\n- Git\n\n\n\n","source":"_posts/1项目经理.md","raw":"---\n\ntitle: 项目经理 \n\ndate: 2024-10-12 13:00:00 \n\n\ncategories: Notes \n\n---\n\n\n\n### 项目管理\n\n#### 基本概念\n\n- 范围管理\n\n- 时间管理\n\n- 成本管理\n\n- 质量管理\n\n- 风险管理\n\n- 沟通管理\n\n#### 管理流程\n\n- 启动\n\n- 规划\n\n- 执行\n\n- 监控\n\n- 收尾\n\n#### 方法论\n\n- 敏捷开发\n\n\t- 概念\n\n\t\t- 一种注重快速迭代和响应变化的方法\n\n\t- 价值观\n\n\t\t- 个人和交互 胜过 过程和工具\n\n\t\t- 可以运行的软件 胜过 面面俱到的文档\n\n\t\t- 客户合作 胜过 合同谈判\n\n\t\t- 响应变化 胜过 遵循计划\n\n\t- 敏捷框架\n\n\t\t- Scrum\n\n\t\t\t- 迭代周期\n\n\t\t- Kanban\n\n\t\t\t- 持续交付\n\n\t\t\t- 可视化工作流\n\n\t\t\t\t- Trello\n\n\t\t- 极限编程XP\n\n\t\t\t- 四个价值观\n\n\t\t\t\t- 加强交流\n\n\t\t\t\t- 从简单做起\n\n\t\t\t\t- 寻求反馈\n\n\t\t\t\t- 勇于实事求是\n\n\t- 适用场景\n\n\t\t- 需求变换频繁的项目\n\n- 瀑布模型\n\n\t- 概念\n\n\t\t- 基于软件生存周期的\n\n\t\t\t- 线性开发模型\n\n\t\t- 每一阶段必须完成规定的文档并进行复审\n\n\t- 适用场景\n\n\t\t- 需求明确的\n\n\t\t\t- 中小型项目\n\n### 技术\n\n#### 软件开发生命周期（SDLC）\n\n#### 编程语言\n\n#### 数据库\n\n### 岗位情况\n\n#### 简介\n\n- 负责管理和协调项目从启动到收尾的整个生命周期\n\n#### 工作内容\n\n- 会议组织\n\n- 进度跟踪\n\n- 风险管理\n\n- 问题解决\n\n- 文档编制\n\n- 客户沟通\n\n#### 认证\n\n- PMP（Project Management Professional）\n\n- Agile或Scrum认证\n\n\t- 如CSM（Cetified ScrumMaster）\n\n### 工具\n\n#### 项目管理工具\n\n- Jira\n\n\t- 敏捷项目管理\n\n\t\t- 支持\n\n\t\t\t- Scrum\n\n\t\t\t- Kanban\n\n- Trello\n\n\t- 任务跟踪\n\n- Asana\n\n\t- 跨部门协作\n\n#### 协作工具\n\n- Google Docs\n\n- Microsoft Office\n\n- Zoom\n\n#### 沟通平台\n\n- Slack\n\n\t- 跨部门\n\n- Microsoft Teams\n\n#### 代码管理与版本追踪\n\n- Git\n\n\n\n","slug":"1项目经理","published":1,"updated":"2024-10-14T03:27:42.349Z","comments":1,"layout":"post","photos":[],"_id":"cm2bvklay00014cufh2aheysy","content":"<h3 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理\"></a>项目管理</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>范围管理</p>\n</li>\n<li><p>时间管理</p>\n</li>\n<li><p>成本管理</p>\n</li>\n<li><p>质量管理</p>\n</li>\n<li><p>风险管理</p>\n</li>\n<li><p>沟通管理</p>\n</li>\n</ul>\n<h4 id=\"管理流程\"><a href=\"#管理流程\" class=\"headerlink\" title=\"管理流程\"></a>管理流程</h4><ul>\n<li><p>启动</p>\n</li>\n<li><p>规划</p>\n</li>\n<li><p>执行</p>\n</li>\n<li><p>监控</p>\n</li>\n<li><p>收尾</p>\n</li>\n</ul>\n<h4 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h4><ul>\n<li><p>敏捷开发</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li>一种注重快速迭代和响应变化的方法</li>\n</ul>\n</li>\n<li><p>价值观</p>\n<ul>\n<li><p>个人和交互 胜过 过程和工具</p>\n</li>\n<li><p>可以运行的软件 胜过 面面俱到的文档</p>\n</li>\n<li><p>客户合作 胜过 合同谈判</p>\n</li>\n<li><p>响应变化 胜过 遵循计划</p>\n</li>\n</ul>\n</li>\n<li><p>敏捷框架</p>\n<ul>\n<li><p>Scrum</p>\n<ul>\n<li>迭代周期</li>\n</ul>\n</li>\n<li><p>Kanban</p>\n<ul>\n<li><p>持续交付</p>\n</li>\n<li><p>可视化工作流</p>\n<ul>\n<li>Trello</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>极限编程XP</p>\n<ul>\n<li><p>四个价值观</p>\n<ul>\n<li><p>加强交流</p>\n</li>\n<li><p>从简单做起</p>\n</li>\n<li><p>寻求反馈</p>\n</li>\n<li><p>勇于实事求是</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<ul>\n<li>需求变换频繁的项目</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>瀑布模型</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li><p>基于软件生存周期的</p>\n<ul>\n<li>线性开发模型</li>\n</ul>\n</li>\n<li><p>每一阶段必须完成规定的文档并进行复审</p>\n</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<ul>\n<li><p>需求明确的</p>\n<ul>\n<li>中小型项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><h4 id=\"软件开发生命周期（SDLC）\"><a href=\"#软件开发生命周期（SDLC）\" class=\"headerlink\" title=\"软件开发生命周期（SDLC）\"></a>软件开发生命周期（SDLC）</h4><h4 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h4><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h3 id=\"岗位情况\"><a href=\"#岗位情况\" class=\"headerlink\" title=\"岗位情况\"></a>岗位情况</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>负责管理和协调项目从启动到收尾的整个生命周期</li>\n</ul>\n<h4 id=\"工作内容\"><a href=\"#工作内容\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h4><ul>\n<li><p>会议组织</p>\n</li>\n<li><p>进度跟踪</p>\n</li>\n<li><p>风险管理</p>\n</li>\n<li><p>问题解决</p>\n</li>\n<li><p>文档编制</p>\n</li>\n<li><p>客户沟通</p>\n</li>\n</ul>\n<h4 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h4><ul>\n<li><p>PMP（Project Management Professional）</p>\n</li>\n<li><p>Agile或Scrum认证</p>\n<ul>\n<li>如CSM（Cetified ScrumMaster）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h4 id=\"项目管理工具\"><a href=\"#项目管理工具\" class=\"headerlink\" title=\"项目管理工具\"></a>项目管理工具</h4><ul>\n<li><p>Jira</p>\n<ul>\n<li><p>敏捷项目管理</p>\n<ul>\n<li><p>支持</p>\n<ul>\n<li><p>Scrum</p>\n</li>\n<li><p>Kanban</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Trello</p>\n<ul>\n<li>任务跟踪</li>\n</ul>\n</li>\n<li><p>Asana</p>\n<ul>\n<li>跨部门协作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"协作工具\"><a href=\"#协作工具\" class=\"headerlink\" title=\"协作工具\"></a>协作工具</h4><ul>\n<li><p>Google Docs</p>\n</li>\n<li><p>Microsoft Office</p>\n</li>\n<li><p>Zoom</p>\n</li>\n</ul>\n<h4 id=\"沟通平台\"><a href=\"#沟通平台\" class=\"headerlink\" title=\"沟通平台\"></a>沟通平台</h4><ul>\n<li><p>Slack</p>\n<ul>\n<li>跨部门</li>\n</ul>\n</li>\n<li><p>Microsoft Teams</p>\n</li>\n</ul>\n<h4 id=\"代码管理与版本追踪\"><a href=\"#代码管理与版本追踪\" class=\"headerlink\" title=\"代码管理与版本追踪\"></a>代码管理与版本追踪</h4><ul>\n<li>Git</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"项目管理\"><a href=\"#项目管理\" class=\"headerlink\" title=\"项目管理\"></a>项目管理</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>范围管理</p>\n</li>\n<li><p>时间管理</p>\n</li>\n<li><p>成本管理</p>\n</li>\n<li><p>质量管理</p>\n</li>\n<li><p>风险管理</p>\n</li>\n<li><p>沟通管理</p>\n</li>\n</ul>\n<h4 id=\"管理流程\"><a href=\"#管理流程\" class=\"headerlink\" title=\"管理流程\"></a>管理流程</h4><ul>\n<li><p>启动</p>\n</li>\n<li><p>规划</p>\n</li>\n<li><p>执行</p>\n</li>\n<li><p>监控</p>\n</li>\n<li><p>收尾</p>\n</li>\n</ul>\n<h4 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h4><ul>\n<li><p>敏捷开发</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li>一种注重快速迭代和响应变化的方法</li>\n</ul>\n</li>\n<li><p>价值观</p>\n<ul>\n<li><p>个人和交互 胜过 过程和工具</p>\n</li>\n<li><p>可以运行的软件 胜过 面面俱到的文档</p>\n</li>\n<li><p>客户合作 胜过 合同谈判</p>\n</li>\n<li><p>响应变化 胜过 遵循计划</p>\n</li>\n</ul>\n</li>\n<li><p>敏捷框架</p>\n<ul>\n<li><p>Scrum</p>\n<ul>\n<li>迭代周期</li>\n</ul>\n</li>\n<li><p>Kanban</p>\n<ul>\n<li><p>持续交付</p>\n</li>\n<li><p>可视化工作流</p>\n<ul>\n<li>Trello</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>极限编程XP</p>\n<ul>\n<li><p>四个价值观</p>\n<ul>\n<li><p>加强交流</p>\n</li>\n<li><p>从简单做起</p>\n</li>\n<li><p>寻求反馈</p>\n</li>\n<li><p>勇于实事求是</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<ul>\n<li>需求变换频繁的项目</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>瀑布模型</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li><p>基于软件生存周期的</p>\n<ul>\n<li>线性开发模型</li>\n</ul>\n</li>\n<li><p>每一阶段必须完成规定的文档并进行复审</p>\n</li>\n</ul>\n</li>\n<li><p>适用场景</p>\n<ul>\n<li><p>需求明确的</p>\n<ul>\n<li>中小型项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><h4 id=\"软件开发生命周期（SDLC）\"><a href=\"#软件开发生命周期（SDLC）\" class=\"headerlink\" title=\"软件开发生命周期（SDLC）\"></a>软件开发生命周期（SDLC）</h4><h4 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h4><h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><h3 id=\"岗位情况\"><a href=\"#岗位情况\" class=\"headerlink\" title=\"岗位情况\"></a>岗位情况</h3><h4 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h4><ul>\n<li>负责管理和协调项目从启动到收尾的整个生命周期</li>\n</ul>\n<h4 id=\"工作内容\"><a href=\"#工作内容\" class=\"headerlink\" title=\"工作内容\"></a>工作内容</h4><ul>\n<li><p>会议组织</p>\n</li>\n<li><p>进度跟踪</p>\n</li>\n<li><p>风险管理</p>\n</li>\n<li><p>问题解决</p>\n</li>\n<li><p>文档编制</p>\n</li>\n<li><p>客户沟通</p>\n</li>\n</ul>\n<h4 id=\"认证\"><a href=\"#认证\" class=\"headerlink\" title=\"认证\"></a>认证</h4><ul>\n<li><p>PMP（Project Management Professional）</p>\n</li>\n<li><p>Agile或Scrum认证</p>\n<ul>\n<li>如CSM（Cetified ScrumMaster）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><h4 id=\"项目管理工具\"><a href=\"#项目管理工具\" class=\"headerlink\" title=\"项目管理工具\"></a>项目管理工具</h4><ul>\n<li><p>Jira</p>\n<ul>\n<li><p>敏捷项目管理</p>\n<ul>\n<li><p>支持</p>\n<ul>\n<li><p>Scrum</p>\n</li>\n<li><p>Kanban</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Trello</p>\n<ul>\n<li>任务跟踪</li>\n</ul>\n</li>\n<li><p>Asana</p>\n<ul>\n<li>跨部门协作</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"协作工具\"><a href=\"#协作工具\" class=\"headerlink\" title=\"协作工具\"></a>协作工具</h4><ul>\n<li><p>Google Docs</p>\n</li>\n<li><p>Microsoft Office</p>\n</li>\n<li><p>Zoom</p>\n</li>\n</ul>\n<h4 id=\"沟通平台\"><a href=\"#沟通平台\" class=\"headerlink\" title=\"沟通平台\"></a>沟通平台</h4><ul>\n<li><p>Slack</p>\n<ul>\n<li>跨部门</li>\n</ul>\n</li>\n<li><p>Microsoft Teams</p>\n</li>\n</ul>\n<h4 id=\"代码管理与版本追踪\"><a href=\"#代码管理与版本追踪\" class=\"headerlink\" title=\"代码管理与版本追踪\"></a>代码管理与版本追踪</h4><ul>\n<li>Git</li>\n</ul>\n"},{"title":"软件工程（中）","date":"2024-10-12T03:00:00.000Z","_content":"\n\n\n### 四、面向对象与ＵＭＬ\n\n#### 面向对象\n\n- 对象和类\n\n\t- 对象\n\n\t\t- 面向对象技术的核心\n\n\t\t- 封装体\n\n\t\t\t- 数据以及在其上操作\n\n\t\t- 集合\n\n\t\t\t- 是具有唯一对象名和固定对外接口的一组属性和操作\n\n\t- 类\n\n\t\t- 一组相似的对象的共性抽象\n\n\t\t- 有效模板\n\n\t\t\t- 创建对象\n\n\t\t- 工具\n\n\t\t\t- 实现抽象数据类型\n\n- 面向对象的基本特征\n\n\t- 抽象abstraction\n\n\t\t- 在某个侧面来表示某个物体或概念\n\n\t\t- 忽略主题中于当前目标无关的因素\n\n\t- 封装encapsulation\n\n\t\t- 把操作和数据包围起来\n\n\t\t- 对数据的访问只通过已定义的接口来完成\n\n\t- 继承inheritance\n\n\t\t- 类的层次模型\n\n\t\t- 一种表述共性的方法\n\n\t- 多态polymorphism\n\n\t\t- 不同类的对象对同一消息执行不同的处理\n\n- 优点\n\n\t- 提高软件系统的\n\n\t\t- 可复用性\n\n\t\t- 可扩展性\n\n\t\t- 可维护性\n\n#### UML\n\n- 概念\n\n\t- 统一建模语言Unified modeling language\n\n\t- 基于面向对象的可视化建模语言\n\n\t- 表示\n\n\t\t- 用图表示它的语法\n\n\t\t- 用元模型表达它的语义\n\n\t\t- 采用模型来描述系统的结构（或静态特征）及行为（或动态特征）\n\n- 组成\n\n\t- 两类模型元素\n\n\t\t- 表示概念\n\n\t\t- 表示连接关系\n\n\t\t\t- 官时饭依剧组\n\n\t\t\t- 关联\n\n\t\t\t\t-  \n\n\t\t\t- 实现\n\n\t\t\t\t-  \n\n\t\t\t- 泛化（继承）\n\n\t\t\t\t-  \n\n\t\t\t- 依赖\n\n\t\t\t\t-  \n\n\t\t\t- 聚集（聚合）\n\n\t\t\t\t-  \n\n\t\t\t- 组合\n\n\t\t\t\t- “部分”不能独立于“整体”而存在\n\n\t\t\t\t-  \n\n\t- 四个抽象层次\n\n\t\t- 元元模型\n\n\t\t\t- 描述元模型\n\n\t\t- 元模型\n\n\t\t\t- 描述模型\n\n\t\t- 模型\n\n\t\t\t- 描述信息领域\n\n\t\t- 用户模型\n\n\t\t\t- 模型的实例\n\n\t- 图和视图\n\n\t\t- 图diagram\n\n\t\t\t- 静态图\n\n\t\t\t\t- 用例图\n\n\t\t\t\t\t- 用例之间的关系\n\n\t\t\t\t\t\t- 扩展关系\n\n\t\t\t\t\t\t- 包含关系\n\n\t\t\t\t- 类图\n\n\t\t\t\t\t- 可见性\n\n\t\t\t\t\t\t- public +\n\n\t\t\t\t\t\t- private -\n\n\t\t\t\t\t\t- protected #\n\n\t\t\t\t\t- 操作的语法\n\n\t\t\t\t\t\t- 可见性 操作名(参数表) : 返回类型{约束特性}\n\n\t\t\t\t- 对象图\n\n\t\t\t\t- 构件图\n\n\t\t\t\t- 部署图\n\n\t\t\t- 动态图\n\n\t\t\t\t- 状态图\n\n\t\t\t\t\t- 描述\n\n\t\t\t\t\t\t- 一个特定对象的所有可能状态\n\n\t\t\t\t\t\t- 引起其状态转移的事件\n\n\t\t\t\t- 时序图\n\n\t\t\t\t- 协作图\n\n\t\t\t\t- 活动图\n\n\t\t- 视图view\n\n\t\t\t- 用例视图\n\n\t\t\t- 逻辑视图\n\n\t\t\t- 进程视图\n\n\t\t\t- 构件视图\n\n\t\t\t- 部署视图\n\n- 特点\n\n\t- 同一标准\n\n\t- 面向对象\n\n\t- 表达能力强大、可视化\n\n- 应用\n\n\t- UML模型可作为测试阶段的依据\n\n- 建模机制\n\n\t- 静态建模\n\n\t\t- 由5图表示\n\n\t\t\t- 用泪兑狗布\n\n\t\t\t- 用例图\n\n\t\t\t- 类图\n\n\t\t\t- 对象图\n\n\t\t\t- 构件图\n\n\t\t\t- 部署图\n\n\t- 动态建模\n\n\t\t- 由4图表示\n\n\t\t\t- 壮士卸货\n\n\t\t\t- 状态图\n\n\t\t\t- 时序图\n\n\t\t\t- 协作图\n\n\t\t\t- 活动图\n\n\t\t- 消息\n\n\t\t\t- 简单消息\n\n\t\t\t- 同步消息\n\n\t\t\t- 异步消息\n\n#### 物理架构建模\n\n#### UML工具\n\n- Rational Rose\n\n\t- 对软件系统进行面向对象分析和设计的可视化工具\n\n\t- Rose模型\n\n\t\t- 4个视图\n\n\t\t\t- 用例视图\n\n\t\t\t- 逻辑视图\n\n\t\t\t- 构件视图\n\n\t\t\t- 部署视图\n\n- StarUML\n\n\t- 运行在Windows上的UML/MDA平台\n\n### 五、需求工程与需求分析\n\n#### 软件需求工程\n\n- 定义\n\n\t- 一个软件系统必须遵循的条件或具备的能力\n\n\t\t- 系统的外部行为\n\n\t\t\t- 用户解决问题或达到目标所需具有的条件或能力\n\n\t\t- 系统的内部特性\n\n\t\t\t- 系统为了满足合同、规范或其他规定文档所需具有的条件或能力\n\n\t- 3个层次\n\n\t\t- 业务需求\n\n\t\t\t- 项目愿景和范围\n\n\t\t- 用户需求\n\n\t\t\t- 用例模型文档\n\n\t\t\t- 质量属性\n\n\t\t- 功能需求\n\n\t\t\t- SRS\n\n- 6个特性\n\n\t- 功能性\n\n\t\t- 普通功能\n\n\t\t- 全局性功能\n\n\t- 可用性\n\n\t- 可靠性\n\n\t- 性能\n\n\t- 可支持性\n\n\t- 设计约束\n\n#### 需求分析\n\n- 目的\n\n\t- 为待开发的软件系统进行需求定义与分析\n\n\t- 并建立一个需求模型\n\n- 4个步骤\n\n\t- 需求获取\n\n\t\t- 常用方法\n\n\t\t\t- 常规方法\n\n\t\t\t\t- 建立联合分析小组\n\n\t\t\t\t\t- 用户\n\n\t\t\t\t\t- 系统分析员\n\n\t\t\t\t\t- 领域专家\n\n\t\t\t\t- 用户访谈\n\n\t\t\t\t- 问题分析与确认\n\n\t\t\t- 快速原型法\n\n\t\t\t\t- 获取两个层面上的需求\n\n\t\t\t\t\t- 联机屏幕\n\n\t\t\t\t\t- 模拟系统的外部特征\n\n\t- 需求建模\n\n\t\t- 需求模型\n\n\t\t\t- 结构化需求模型\n\n\t\t\t- 面向对象需求模型\n\n\t\t\t\t- 3个组成部分\n\n\t\t\t\t\t- 用例模型\n\n\t\t\t\t\t\t- 用例图\n\n\t\t\t\t\t\t- 用例规约\n\n\t\t\t\t\t- 补充规约\n\n\t\t\t\t\t- 术语表\n\n\t\t- 面向对象需求建模\n\n\t\t\t- 4步\n\n\t\t\t\t- 画用例图\n\n\t\t\t\t\t- 确定参与者\n\n\t\t\t\t\t- 确定用例\n\n\t\t\t\t\t- 绘制和检查用例图\n\n\t\t\t\t- 写用例规约\n\n\t\t\t\t\t- 用例规约内容\n\n\t\t\t\t\t\t- 简要说明\n\n\t\t\t\t\t\t- 事件流\n\n\t\t\t\t\t\t\t- 基本流\n\n\t\t\t\t\t\t\t- 备选流\n\n\t\t\t\t\t\t- 特殊需求\n\n\t\t\t\t\t\t- 前置条件和后置条件\n\n\t\t\t\t\t- 用例模式的检查\n\n\t\t\t\t\t\t- 功能需求的完备性\n\n\t\t\t\t\t\t- 模型是否易于理解\n\n\t\t\t\t\t\t- 是否存在不一致性\n\n\t\t\t\t\t\t- 避免二义性语义\n\n\t\t\t\t- 描述补充规约\n\n\t\t\t\t- 编写术语表\n\n\t- 需求描述\n\n\t\t- 编写SRS\n\n\t\t\t- 主体\n\n\t\t\t\t- 描述软件系统的分析模型\n\n\t\t\t\t\t- 信息描述\n\n\t\t\t\t\t\t- 软件所含信息的详细描述\n\n\t\t\t\t\t- 功能描述\n\n\t\t\t\t\t\t- 软件功能需求的说明\n\n\t\t\t\t\t- 行为描述\n\n\t\t\t\t\t\t- 系统状态变化以及事件和动作的叙述\n\n\t- 需求验证\n\n\t\t- 验证SRS\n\n### 需求管理\n\n- 需求变更\n\n\t- 流程\n\n\t\t- 变更申请\n\n\t\t- 变更审批\n\n\t\t- 变更修改\n\n\t\t- 变更关闭\n\n### 六、面向对象分析\n\n#### 概述\n\n- 面向对象软件分析(object-oriented analysis,OOA)\n\n\t- 主要任务\n\n\t\t- 理解用户需求\n\n\t\t\t- 理解和分析用户需求\n\n\t\t\t- 明确所开发的软件系统的职责\n\n\t\t\t- 形成文件并规范地加以表述\n\n\t\t- 分析，提取类和对象，并结合分析进行建模\n\n\t- OOA模型\n\n\t\t- 以用例模型为主体的需求模型（核心）\n\n\t\t\t- 类/对象模型\n\n\t\t\t- 对象-关系模型\n\n\t\t\t- 对象-行为模型\n\n\t- 优点\n\n\t\t- 对需求的变化具有较强的适应性\n\n\t\t- 支持软件复用\n\n\t- 分析模型的一般特点\n\n\t\t- 全面覆盖软件的功能需求\n\n\t\t- 分析模型与软件的实现 无关\n\n\t\t- 分析模型的表述方法与所采用的分析技术有关\n\n- 面向对象分析模型\n\n\t- 五层次模型\n\n\t\t- 类/对象层\n\n\t\t- 属性层\n\n\t\t- 服务层\n\n\t\t\t- 动态属性\n\n\t\t\t\t- 对象\n\n\t\t\t\t- 类\n\n\t\t\t- 消息通信\n\n\t\t\t\t- 对象之间\n\n\t\t- 结构层\n\n\t\t\t- 对象和类的层次结构关系\n\n\t\t\t\t- 包含\n\n\t\t\t\t- 继承\n\n\t\t\t\t- 关联\n\n\t\t- 主题层\n\n\t\t\t- 每个主题是一个子系统\n\n\t\t\t\t- 包含有关对象\n\n\t- OOA方法\n\n\t\t- 共同特征\n\n\t\t\t- 类和类层次的表示\n\n\t\t\t- 建立对象-关系模型\n\n\t\t\t- 建立对象-行为模型\n\n\t\t- 建模步骤\n\n\t\t\t- 需求理解\n\n\t\t\t- 定义类和对象\n\n\t\t\t- 表示对象的属性和操作\n\n\t\t\t- 表示类的结构和层次\n\n\t\t\t- 建立对象-关系模型\n\n\t\t\t- 建立对象-行为模型\n\n\t- 面向对象软件开发的全（迭代）过程\n\n\t\t- 1. OOA（分析）\n\n\t\t- 2. OOD（设计）\n\n\t\t- 3. OOP（编程）\n\n\t\t- 4. OOT（测试）\n\n#### 面向对象分析建模\n\n- 识别与确定分析类\n\n\t- 分析类的类型\n\n\t\t- 边界类\n\n\t\t\t- 提供接口\n\n\t\t\t\t- 对参与者\n\n\t\t\t\t- 对外部系统交互协议\n\n\t\t\t- 种类\n\n\t\t\t\t- 用户界面类\n\n\t\t\t\t- 系统接口类\n\n\t\t\t\t- 设备接口类\n\n\t\t- 控制类\n\n\t\t\t- 封装\n\n\t\t\t\t- 一个或几个用例所特有的流程控制行为\n\n\t\t- 实体类\n\n\t\t\t- 存储和管理系统中的信息\n\n\t- 查找分析类\n\n\t\t- 为每对 参与者/用例 确定一个边界类\n\n\t\t- 为每个用例设置一个控制类\n\n\t\t- 确定相关的各个实体（包括属性与方法）\n\n- 建立对象-行为模型（动态模型）\n\n\t- 时序图\n\n\t- 协作图\n\n\t- 为分析类分配职责\n\n\t- 状态图\n\n- 建立对象-关系模型（静态模型）\n\n\t- 分析类的属性\n\n\t- 分析类的关联\n\n\t- 分析类图\n\n\t- 分析类的合并\n\n### 七、面向对象设计\n\n#### 软件设计\n\n- 概念\n\n\t- 两种主流的设计方法\n\n\t\t- 结构化软件设计\n\n\t\t\t- 以结构化程序设计为基础\n\n\t\t- 面向对象软件设计\n\n\t\t\t- 由面向对象方法导出\n\n\t- 模块与构件\n\n\t\t- 模块(module)\n\n\t\t\t- 一个拥有明确定义的输入、输出和特性的程序实体\n\n\t\t- 软件构件(software component)\n\n\t\t\t- 可重复使用的软件组件\n\n\t\t\t- 现有可复用的构件\n\n\t\t\t\t- 大多是在对象的基础上创建的\n\n\t- 抽象(abstraction)与细化(refinement)\n\n\t- 信息隐藏(information hiding)\n\n\t\t- 把系统分解为模块时应遵守的指导思想\n\n\t\t- 发展\n\n\t\t\t- 数据封装(data encapsulation)\n\n\t\t\t- 抽象数据类型(abstract datatype)\n\n\t\t\t- 类和对象\n\n\t- 软件复用\n\n- 任务\n\n\t- 将分析现阶段建立的分析模型转变为软件设计模型，确保最终能平滑地过渡到程序代码\n\n\t- 内容\n\n\t\t- 数据设计\n\n\t\t\t- 将信息模型转变为数据结构\n\n\t\t- 体系结构设计\n\n\t\t\t- 定义软件主要组成部件之间的关系\n\n\t\t- 接口设计\n\n\t\t\t- 软件内部\n\n\t\t\t- 软件和接口系统之间\n\n\t\t\t- 软件与人之间\n\n\t\t\t- 数据流和控制流\n\n\t\t- 过程设计\n\n\t\t\t- 将软件体系结构的组成部件转变为对软件组件的过程性描述\n\n- 模块化设计(modular design)\n\n\t- 目的\n\n\t\t- 按照规定的原则把大型软件划分为一个个较小的、相对独立但相互关联的模块\n\n\t- 指导思想\n\n\t\t- 分解(decomposition)\n\n\t\t- 模块独立性(module independence)\n\n\t\t\t- 度量\n\n\t\t\t\t- 内聚(cohesion)\n\n\t\t\t\t\t- 也称为块内联系或模块强度\n\n\t\t\t\t\t- 指模块内部各个成分之间的联系\n\n\t\t\t\t\t- 是从功能的角度对模块内部聚合能力的量度\n\n\t\t\t\t\t- 强度分类\n\n\t\t\t\t\t\t- 低内聚\n\n\t\t\t\t\t\t\t- 偶然性内聚\n\n\t\t\t\t\t\t\t- 逻辑性内聚\n\n\t\t\t\t\t\t\t- 时间性内聚\n\n\t\t\t\t\t\t- 中内聚\n\n\t\t\t\t\t\t\t- 过程性内聚\n\n\t\t\t\t\t\t\t- 通信性内聚\n\n\t\t\t\t\t\t- 高内聚\n\n\t\t\t\t\t\t\t- 顺序性内聚\n\n\t\t\t\t\t\t\t- 功能性内聚\n\n\t\t\t\t- 耦合(coupling)\n\n\t\t\t\t\t- 又称块间联系\n\n\t\t\t\t\t- 指一个模块与其他模块间的联系\n\n\t\t\t\t\t- 是对软件内部块间联系的度量\n\n\t\t\t\t\t- 强度分类\n\n\t\t\t\t\t\t- 弱耦合\n\n\t\t\t\t\t\t\t- 非直接耦合\n\n\t\t\t\t\t\t\t- 数据耦合\n\n\t\t\t\t\t\t\t- 特征耦合\n\n\t\t\t\t\t\t- 中耦合\n\n\t\t\t\t\t\t\t- 控制耦合\n\n\t\t\t\t\t\t- 较强耦合\n\n\t\t\t\t\t\t\t- 外部耦合\n\n\t\t\t\t\t\t\t- 公共耦合\n\n\t\t\t\t\t\t- 强耦合\n\n\t\t\t\t\t\t\t- 内容耦合\n\n#### 面向对象设计建模\n\n- OO设计模型\n\n\t- 责任设计\n\n\t- 消息设计\n\n\t- 类和对象设计\n\n\t- 系统架构设计\n\n- OO设计的任务\n\n\t- 系统架构设计\n\n\t\t- 系统架构师\n\n\t\t- 软件系统架构\n\n\t\t\t- 指系统主要组成元素的组织或结构，以及其他全局性决策\n\n\t\t\t- 组成元素之间通过接口进行交互\n\n\t\t- 内容\n\n\t\t\t- 系统高层结构设计\n\n\t\t\t- 确定设计元素\n\n\t\t\t- 确定任务管理策略\n\n\t\t\t- 实现分布式机制\n\n\t\t\t- 设计数据存储方案\n\n\t\t\t- 人机界面设计\n\n\t- 系统元素设计\n\n\t\t- 软件设计师\n\n\t\t- 系统元素\n\n\t\t\t- 类\n\n\t\t\t- 子系统\n\n\t\t\t- 接口\n\n\t\t\t- 包\n\n\t\t\t- 等等...\n\n\t\t- 系统元素设计\n\n\t\t\t- 对每一个设计元素进行详细的设计\n\n\t\t- 内容\n\n\t\t\t- 类/对象设计\n\n\t\t\t- 子系统设计\n\n\t\t\t- 包设计\n\n- 模式的应用\n\n\t- 模式的定义\n\n\t\t- 解决某一类问题的方法论，对通用问题的通用解决方案\n\n\t- 软件模式的分类\n\n\t\t- 架构模式\n\n\t\t\t- 软件系统的基本结构组织方案\n\n\t\t- 设计模式\n\n\t\t\t- 面向对象的具体设计问题的解决方案\n\n\t\t- 习惯用法\n\n\t\t\t- 针对具体程序设计语言的使用模式\n\n#### 系统架构设计\n\n- 系统高层结构设计\n\n\t- 4个层次\n\n\t\t- 应用子系统层\n\n\t\t- 业务专用层\n\n\t\t- 中间件层\n\n\t\t- 系统软件层\n\n- 确定设计元素\n\n\t- 映射分析类到设计元素\n\n\t- 确定子系统\n\n\t\t- 指导性参考原则\n\n\t\t\t- 对象协作原则\n\n\t\t\t- 可选性原则\n\n\t\t\t- 用户界面原则\n\n\t\t\t- 参与者原则\n\n\t\t\t- 耦合和内聚原则\n\n\t\t\t- 分布原则\n\n\t- 定义子系统接口\n\n\t\t- 步骤\n\n\t\t\t- 1. 为子系统确定一个备选接口集\n\n\t\t\t- 2. 寻找接口之间的相似点\n\n\t\t\t- 3. 定义接口依赖关系\n\n\t\t\t- 4. 将接口映射到子系统\n\n\t\t\t- 5. 定义接口所指定的行为\n\n\t\t- 表述\n\n\t\t\t- 在相应类的名称前加上前缀\"I-\"\n\n\t\t\t- 或将类加上\"<<interface>>\"\n\n- 任务管理策略\n\n\t- 并行需求\n\n\t\t- 3种解决方案\n\n\t\t\t- 多处理器\n\n\t\t\t- 操作系统\n\n\t\t\t- 应用程序\n\n\t\t- 两种实现并行需求的技术\n\n\t\t\t- 引进任务管理部件\n\n\t\t\t- 基于进程和线程的控制\n\n\t\t\t\t- 进程和线程建模\n\n\t\t\t\t\t- 标识\n\n\t\t\t\t\t\t- 进程\n\n\t\t\t\t\t\t\t- <<process>>\n\n\t\t\t\t\t\t- 线程\n\n\t\t\t\t\t\t\t- <<thread>>\n\n\t\t\t\t\t- 进程\n\n\t\t\t\t\t\t- 进程间的通信是依赖关系\n\n\t\t\t\t\t\t- 对进程建模可采用\n\n\t\t\t\t\t\t\t- 类图\n\n\t\t\t\t\t\t\t- 构件图\n\n\t\t\t\t\t\t- 进程间联系\n\n\t\t\t\t\t\t\t- 独立的进程\n\n\t\t\t\t\t\t\t\t- 依赖关系\n\n\t\t\t\t\t\t\t- 有线程\n\n\t\t\t\t\t\t\t\t- 组合关系\n\n\t\t\t\t- 确定进程的生存周期\n\n\t\t\t\t\t- 单进程架构\n\n\t\t\t\t\t\t- 进程在应用程序开始和结束时创建和销毁\n\n\t\t\t\t\t- 多进程架构\n\n\t\t\t\t\t\t- 新进程（或线程）在应用程序开始时\n\n\t\t\t\t\t\t\t- 从初始进程中产生或派生\n\n\t\t\t\t\t\t\t- 必须显式销毁\n\n- 分布式实现机制\n\n\t- 确定网络拓扑配置\n\n\t\t- 网络的物理布局（包括位置）\n\n\t\t- 网络的结点及结点的配置与性能\n\n\t\t- 网络中的各网段带宽\n\n\t\t- 网络中的冗余路径（容错能力）\n\n\t\t- 结点的分类\n\n\t- 将设计元素分配到网络结点\n\n\t- 设计分布处理机制\n\n\t\t- 需要底层类库的支持\n\n\t\t\t- Microsoft.NET平台\n\n\t\t\t- Java平台\n\n\t\t\t\t- 远程方法调用(remote method invoaction, RMI)\n\n\t\t\t\t\t- 1. 引入可直接利用的类库\n\n\t\t\t\t\t\t- Naming\n\n\t\t\t\t\t\t- Serializable\n\n\t\t\t\t\t\t- Remote\n\n\t\t\t\t\t- 2. 建立一些带有\"<<role>>\"标识的类，代表实际设计元素\n\n\t\t\t\t\t\t- <<role>> SampleDistributedClass\n\n\t\t\t\t\t\t\t- 分布类\n\n\t\t\t\t\t\t- <<role>> SampleDistributedClassClient\n\n\t\t\t\t\t\t\t- 分布类的客户\n\n\t\t\t\t\t\t- <<role>> SamplePassedData\n\n\t\t\t\t\t\t\t- 被作为参数传递的对象所对应的设计元素\n\n\t\t\t\t\t\t- <<interface>> ISampleDistributedClass\n\n\t\t\t\t\t\t\t- 被分布到异地的分布类在本地的“代言人”\n\n\t\t\t\t\t- 3. 描述分布机制的静态结构\n\n- 数据存储设计\n\n- 人机交互设计\n\n\t- 1. 根据用户特点设计不同界面\n\n\t- 2. 增加用户界面专用的类与对象\n\n\t- 3. 利用快速原型演示，来改进界面设计\n\n#### 系统元素设计\n\n- 子系统设计\n\n\t- 1. 将子系统行为分配给子系统元素\n\n\t- 2.描述子系统元素\n\n\t- 3. 说明子系统的依赖关系\n\n- 分包设计\n\n\t- 分包原则\n\n\t\t- 将边界类打包\n\n\t\t\t- 接口可能被替换\n\n\t\t\t\t- 将接口与设计模型的其他部分隔离开\n\n\t\t\t- 接口不易被替换\n\n\t\t\t\t- 对系统服务分包，将边界类和功能相关的实体类及控制类放置在一起\n\n\t\t- 将功能相关的类打包\n\n- 类/对象设计\n\n\t- 创建初始设计类\n\n\t\t- 设计边界类\n\n\t\t- 设计实体类\n\n\t\t- 设计控制类\n\n\t\t\t- 复杂性\n\n\t\t\t- 变更的可能性\n\n\t\t\t- 分布和性能\n\n\t\t\t- 事物管理\n\n\t- 定义操作\n\n\t\t- 命名和说明操作\n\n\t\t- 定义操作可见性\n\n\t\t- 定义操作的作用域\n\n\t- 定义方法\n\n\t- 定义状态\n\n\t\t- 确定一个类是否具有重要的动态行为\n\n\t\t\t- 检查类的属性\n\n\t\t\t- 检查类的关联\n\n\t- 定义属性\n\n\t\t- 属性名\n\n\t\t- 属性类型\n\n\t\t- 属性的默认值或初始值\n\n\t\t- 属性的可见性\n\n\t\t\t- 公有\n\n\t\t\t\t- public\n\n\t\t\t- 保护\n\n\t\t\t\t- protected\n\n\t\t\t- 私有\n\n\t\t\t\t- private\n\n\t- 定义依赖关系\n\n\t\t- 属于不同类的两个对象a、b的四种连接可见度\n\n\t\t\t- 全局(global)\n\n\t\t\t- 参数(parameter)\n\n\t\t\t- 局部(local)\n\n\t\t\t- 域(field)\n\n\t- 定义关联关系\n\n\t\t- 进一步明确或改进细节内容\n\n\t\t\t- 聚集还是组合\n\n\t\t\t- 属性还是组合\n\n\t\t\t- 关联的方向\n\n\t\t\t- 关联类\n\n\t\t\t- 确定重数\n\n\t- 定义泛化关系\n\n\t- 处理非功能性需求\n\n### 八、编码与测试\n\n#### 编码\n\n- 概述\n\n\t- 目的\n\n\t\t- 把详细设计的结果“翻译”成选定的程序设计语言书写的源程序\n\n\t- 编码风格\n\n\t\t- 使用标准的控制结构\n\n\t\t- 实现源程序的文档化\n\n\t\t\t- 有意义的变量名称\n\n\t\t\t- 适当的注释\n\n\t\t\t- 标准的书写格式\n\n\t\t- 满足用户友好的输入输出风格\n\n- 编码语言\n\n\t- 基础语言\n\n\t\t- FORTRAN\n\n\t\t- COBOL\n\n\t\t- BASIC\n\n\t- 结构化语言\n\n\t\t- C\n\n\t\t- Pascal\n\n\t\t- Ada\n\n\t- 面向对象语言\n\n\t\t- C++\n\n\t\t- Java\n\n\t\t- C#\n\n#### 测试\n\n- 多模块程序的测试策略\n\n\t- 层次性\n\n\t\t- 单元测试(unit testing)\n\n\t\t\t- 编译\n\n\t\t\t- 静态分析器检查\n\n\t\t\t- 代码评审\n\n\t\t\t\t- 办公桌检查\n\n\t\t\t\t- 小组会\n\n\t\t\t\t\t- 走查\n\n\t\t\t\t\t- 代码会审\n\n\t\t\t- 动态测试\n\n\t\t\t\t- 黑盒\n\n\t\t\t\t- 白盒\n\n\t\t- 集成测试(integration testing)\n\n\t\t\t- 策略\n\n\t\t\t\t- 自顶向下\n\n\t\t\t\t- 由底向上\n\n\t\t\t\t- 混合方式\n\n\t\t- 高级测试\n\n\t\t\t- 确认测试(validation testing)\n\n\t\t\t\t- 有效性测试（黑盒测试）和配置复审\n\n\t\t\t\t- 验收测试\n\n\t\t\t\t- α与β测试\n\n\t\t\t- 系统测试(system testing)\n\n\t- 终止测试的标准\n\n\t\t- 规定测试策略和应达目标\n\n\t\t- 规定至少要查出的错误数量\n\n- 面向对象系统的测试\n\n\t- OO软件系统需要比传统软件系统更多的测试\n\n\t- OO软件的测试策略\n\n\t\t- 单元测试\n\n\t\t\t- 单元\n\n\t\t\t\t- 封装的类和对象\n\n\t\t- 集成测试\n\n\t\t\t- 只能进行基于黑盒方法的集成测试\n\n\t\t\t- 测试策略\n\n\t\t\t\t- 基于线程的测试\n\n\t\t\t\t- 基于使用的测试\n\n\t\t- 高级测试\n\n\t\t\t- 确认测试\n\n\t\t\t- 系统测试\n\n","source":"_posts/3软件工程（中）.md","raw":"---\n\ntitle: 软件工程（中） \n\ndate: 2024-10-12 11:00:00 \n\n\ncategories: Notes \n\n---\n\n\n\n### 四、面向对象与ＵＭＬ\n\n#### 面向对象\n\n- 对象和类\n\n\t- 对象\n\n\t\t- 面向对象技术的核心\n\n\t\t- 封装体\n\n\t\t\t- 数据以及在其上操作\n\n\t\t- 集合\n\n\t\t\t- 是具有唯一对象名和固定对外接口的一组属性和操作\n\n\t- 类\n\n\t\t- 一组相似的对象的共性抽象\n\n\t\t- 有效模板\n\n\t\t\t- 创建对象\n\n\t\t- 工具\n\n\t\t\t- 实现抽象数据类型\n\n- 面向对象的基本特征\n\n\t- 抽象abstraction\n\n\t\t- 在某个侧面来表示某个物体或概念\n\n\t\t- 忽略主题中于当前目标无关的因素\n\n\t- 封装encapsulation\n\n\t\t- 把操作和数据包围起来\n\n\t\t- 对数据的访问只通过已定义的接口来完成\n\n\t- 继承inheritance\n\n\t\t- 类的层次模型\n\n\t\t- 一种表述共性的方法\n\n\t- 多态polymorphism\n\n\t\t- 不同类的对象对同一消息执行不同的处理\n\n- 优点\n\n\t- 提高软件系统的\n\n\t\t- 可复用性\n\n\t\t- 可扩展性\n\n\t\t- 可维护性\n\n#### UML\n\n- 概念\n\n\t- 统一建模语言Unified modeling language\n\n\t- 基于面向对象的可视化建模语言\n\n\t- 表示\n\n\t\t- 用图表示它的语法\n\n\t\t- 用元模型表达它的语义\n\n\t\t- 采用模型来描述系统的结构（或静态特征）及行为（或动态特征）\n\n- 组成\n\n\t- 两类模型元素\n\n\t\t- 表示概念\n\n\t\t- 表示连接关系\n\n\t\t\t- 官时饭依剧组\n\n\t\t\t- 关联\n\n\t\t\t\t-  \n\n\t\t\t- 实现\n\n\t\t\t\t-  \n\n\t\t\t- 泛化（继承）\n\n\t\t\t\t-  \n\n\t\t\t- 依赖\n\n\t\t\t\t-  \n\n\t\t\t- 聚集（聚合）\n\n\t\t\t\t-  \n\n\t\t\t- 组合\n\n\t\t\t\t- “部分”不能独立于“整体”而存在\n\n\t\t\t\t-  \n\n\t- 四个抽象层次\n\n\t\t- 元元模型\n\n\t\t\t- 描述元模型\n\n\t\t- 元模型\n\n\t\t\t- 描述模型\n\n\t\t- 模型\n\n\t\t\t- 描述信息领域\n\n\t\t- 用户模型\n\n\t\t\t- 模型的实例\n\n\t- 图和视图\n\n\t\t- 图diagram\n\n\t\t\t- 静态图\n\n\t\t\t\t- 用例图\n\n\t\t\t\t\t- 用例之间的关系\n\n\t\t\t\t\t\t- 扩展关系\n\n\t\t\t\t\t\t- 包含关系\n\n\t\t\t\t- 类图\n\n\t\t\t\t\t- 可见性\n\n\t\t\t\t\t\t- public +\n\n\t\t\t\t\t\t- private -\n\n\t\t\t\t\t\t- protected #\n\n\t\t\t\t\t- 操作的语法\n\n\t\t\t\t\t\t- 可见性 操作名(参数表) : 返回类型{约束特性}\n\n\t\t\t\t- 对象图\n\n\t\t\t\t- 构件图\n\n\t\t\t\t- 部署图\n\n\t\t\t- 动态图\n\n\t\t\t\t- 状态图\n\n\t\t\t\t\t- 描述\n\n\t\t\t\t\t\t- 一个特定对象的所有可能状态\n\n\t\t\t\t\t\t- 引起其状态转移的事件\n\n\t\t\t\t- 时序图\n\n\t\t\t\t- 协作图\n\n\t\t\t\t- 活动图\n\n\t\t- 视图view\n\n\t\t\t- 用例视图\n\n\t\t\t- 逻辑视图\n\n\t\t\t- 进程视图\n\n\t\t\t- 构件视图\n\n\t\t\t- 部署视图\n\n- 特点\n\n\t- 同一标准\n\n\t- 面向对象\n\n\t- 表达能力强大、可视化\n\n- 应用\n\n\t- UML模型可作为测试阶段的依据\n\n- 建模机制\n\n\t- 静态建模\n\n\t\t- 由5图表示\n\n\t\t\t- 用泪兑狗布\n\n\t\t\t- 用例图\n\n\t\t\t- 类图\n\n\t\t\t- 对象图\n\n\t\t\t- 构件图\n\n\t\t\t- 部署图\n\n\t- 动态建模\n\n\t\t- 由4图表示\n\n\t\t\t- 壮士卸货\n\n\t\t\t- 状态图\n\n\t\t\t- 时序图\n\n\t\t\t- 协作图\n\n\t\t\t- 活动图\n\n\t\t- 消息\n\n\t\t\t- 简单消息\n\n\t\t\t- 同步消息\n\n\t\t\t- 异步消息\n\n#### 物理架构建模\n\n#### UML工具\n\n- Rational Rose\n\n\t- 对软件系统进行面向对象分析和设计的可视化工具\n\n\t- Rose模型\n\n\t\t- 4个视图\n\n\t\t\t- 用例视图\n\n\t\t\t- 逻辑视图\n\n\t\t\t- 构件视图\n\n\t\t\t- 部署视图\n\n- StarUML\n\n\t- 运行在Windows上的UML/MDA平台\n\n### 五、需求工程与需求分析\n\n#### 软件需求工程\n\n- 定义\n\n\t- 一个软件系统必须遵循的条件或具备的能力\n\n\t\t- 系统的外部行为\n\n\t\t\t- 用户解决问题或达到目标所需具有的条件或能力\n\n\t\t- 系统的内部特性\n\n\t\t\t- 系统为了满足合同、规范或其他规定文档所需具有的条件或能力\n\n\t- 3个层次\n\n\t\t- 业务需求\n\n\t\t\t- 项目愿景和范围\n\n\t\t- 用户需求\n\n\t\t\t- 用例模型文档\n\n\t\t\t- 质量属性\n\n\t\t- 功能需求\n\n\t\t\t- SRS\n\n- 6个特性\n\n\t- 功能性\n\n\t\t- 普通功能\n\n\t\t- 全局性功能\n\n\t- 可用性\n\n\t- 可靠性\n\n\t- 性能\n\n\t- 可支持性\n\n\t- 设计约束\n\n#### 需求分析\n\n- 目的\n\n\t- 为待开发的软件系统进行需求定义与分析\n\n\t- 并建立一个需求模型\n\n- 4个步骤\n\n\t- 需求获取\n\n\t\t- 常用方法\n\n\t\t\t- 常规方法\n\n\t\t\t\t- 建立联合分析小组\n\n\t\t\t\t\t- 用户\n\n\t\t\t\t\t- 系统分析员\n\n\t\t\t\t\t- 领域专家\n\n\t\t\t\t- 用户访谈\n\n\t\t\t\t- 问题分析与确认\n\n\t\t\t- 快速原型法\n\n\t\t\t\t- 获取两个层面上的需求\n\n\t\t\t\t\t- 联机屏幕\n\n\t\t\t\t\t- 模拟系统的外部特征\n\n\t- 需求建模\n\n\t\t- 需求模型\n\n\t\t\t- 结构化需求模型\n\n\t\t\t- 面向对象需求模型\n\n\t\t\t\t- 3个组成部分\n\n\t\t\t\t\t- 用例模型\n\n\t\t\t\t\t\t- 用例图\n\n\t\t\t\t\t\t- 用例规约\n\n\t\t\t\t\t- 补充规约\n\n\t\t\t\t\t- 术语表\n\n\t\t- 面向对象需求建模\n\n\t\t\t- 4步\n\n\t\t\t\t- 画用例图\n\n\t\t\t\t\t- 确定参与者\n\n\t\t\t\t\t- 确定用例\n\n\t\t\t\t\t- 绘制和检查用例图\n\n\t\t\t\t- 写用例规约\n\n\t\t\t\t\t- 用例规约内容\n\n\t\t\t\t\t\t- 简要说明\n\n\t\t\t\t\t\t- 事件流\n\n\t\t\t\t\t\t\t- 基本流\n\n\t\t\t\t\t\t\t- 备选流\n\n\t\t\t\t\t\t- 特殊需求\n\n\t\t\t\t\t\t- 前置条件和后置条件\n\n\t\t\t\t\t- 用例模式的检查\n\n\t\t\t\t\t\t- 功能需求的完备性\n\n\t\t\t\t\t\t- 模型是否易于理解\n\n\t\t\t\t\t\t- 是否存在不一致性\n\n\t\t\t\t\t\t- 避免二义性语义\n\n\t\t\t\t- 描述补充规约\n\n\t\t\t\t- 编写术语表\n\n\t- 需求描述\n\n\t\t- 编写SRS\n\n\t\t\t- 主体\n\n\t\t\t\t- 描述软件系统的分析模型\n\n\t\t\t\t\t- 信息描述\n\n\t\t\t\t\t\t- 软件所含信息的详细描述\n\n\t\t\t\t\t- 功能描述\n\n\t\t\t\t\t\t- 软件功能需求的说明\n\n\t\t\t\t\t- 行为描述\n\n\t\t\t\t\t\t- 系统状态变化以及事件和动作的叙述\n\n\t- 需求验证\n\n\t\t- 验证SRS\n\n### 需求管理\n\n- 需求变更\n\n\t- 流程\n\n\t\t- 变更申请\n\n\t\t- 变更审批\n\n\t\t- 变更修改\n\n\t\t- 变更关闭\n\n### 六、面向对象分析\n\n#### 概述\n\n- 面向对象软件分析(object-oriented analysis,OOA)\n\n\t- 主要任务\n\n\t\t- 理解用户需求\n\n\t\t\t- 理解和分析用户需求\n\n\t\t\t- 明确所开发的软件系统的职责\n\n\t\t\t- 形成文件并规范地加以表述\n\n\t\t- 分析，提取类和对象，并结合分析进行建模\n\n\t- OOA模型\n\n\t\t- 以用例模型为主体的需求模型（核心）\n\n\t\t\t- 类/对象模型\n\n\t\t\t- 对象-关系模型\n\n\t\t\t- 对象-行为模型\n\n\t- 优点\n\n\t\t- 对需求的变化具有较强的适应性\n\n\t\t- 支持软件复用\n\n\t- 分析模型的一般特点\n\n\t\t- 全面覆盖软件的功能需求\n\n\t\t- 分析模型与软件的实现 无关\n\n\t\t- 分析模型的表述方法与所采用的分析技术有关\n\n- 面向对象分析模型\n\n\t- 五层次模型\n\n\t\t- 类/对象层\n\n\t\t- 属性层\n\n\t\t- 服务层\n\n\t\t\t- 动态属性\n\n\t\t\t\t- 对象\n\n\t\t\t\t- 类\n\n\t\t\t- 消息通信\n\n\t\t\t\t- 对象之间\n\n\t\t- 结构层\n\n\t\t\t- 对象和类的层次结构关系\n\n\t\t\t\t- 包含\n\n\t\t\t\t- 继承\n\n\t\t\t\t- 关联\n\n\t\t- 主题层\n\n\t\t\t- 每个主题是一个子系统\n\n\t\t\t\t- 包含有关对象\n\n\t- OOA方法\n\n\t\t- 共同特征\n\n\t\t\t- 类和类层次的表示\n\n\t\t\t- 建立对象-关系模型\n\n\t\t\t- 建立对象-行为模型\n\n\t\t- 建模步骤\n\n\t\t\t- 需求理解\n\n\t\t\t- 定义类和对象\n\n\t\t\t- 表示对象的属性和操作\n\n\t\t\t- 表示类的结构和层次\n\n\t\t\t- 建立对象-关系模型\n\n\t\t\t- 建立对象-行为模型\n\n\t- 面向对象软件开发的全（迭代）过程\n\n\t\t- 1. OOA（分析）\n\n\t\t- 2. OOD（设计）\n\n\t\t- 3. OOP（编程）\n\n\t\t- 4. OOT（测试）\n\n#### 面向对象分析建模\n\n- 识别与确定分析类\n\n\t- 分析类的类型\n\n\t\t- 边界类\n\n\t\t\t- 提供接口\n\n\t\t\t\t- 对参与者\n\n\t\t\t\t- 对外部系统交互协议\n\n\t\t\t- 种类\n\n\t\t\t\t- 用户界面类\n\n\t\t\t\t- 系统接口类\n\n\t\t\t\t- 设备接口类\n\n\t\t- 控制类\n\n\t\t\t- 封装\n\n\t\t\t\t- 一个或几个用例所特有的流程控制行为\n\n\t\t- 实体类\n\n\t\t\t- 存储和管理系统中的信息\n\n\t- 查找分析类\n\n\t\t- 为每对 参与者/用例 确定一个边界类\n\n\t\t- 为每个用例设置一个控制类\n\n\t\t- 确定相关的各个实体（包括属性与方法）\n\n- 建立对象-行为模型（动态模型）\n\n\t- 时序图\n\n\t- 协作图\n\n\t- 为分析类分配职责\n\n\t- 状态图\n\n- 建立对象-关系模型（静态模型）\n\n\t- 分析类的属性\n\n\t- 分析类的关联\n\n\t- 分析类图\n\n\t- 分析类的合并\n\n### 七、面向对象设计\n\n#### 软件设计\n\n- 概念\n\n\t- 两种主流的设计方法\n\n\t\t- 结构化软件设计\n\n\t\t\t- 以结构化程序设计为基础\n\n\t\t- 面向对象软件设计\n\n\t\t\t- 由面向对象方法导出\n\n\t- 模块与构件\n\n\t\t- 模块(module)\n\n\t\t\t- 一个拥有明确定义的输入、输出和特性的程序实体\n\n\t\t- 软件构件(software component)\n\n\t\t\t- 可重复使用的软件组件\n\n\t\t\t- 现有可复用的构件\n\n\t\t\t\t- 大多是在对象的基础上创建的\n\n\t- 抽象(abstraction)与细化(refinement)\n\n\t- 信息隐藏(information hiding)\n\n\t\t- 把系统分解为模块时应遵守的指导思想\n\n\t\t- 发展\n\n\t\t\t- 数据封装(data encapsulation)\n\n\t\t\t- 抽象数据类型(abstract datatype)\n\n\t\t\t- 类和对象\n\n\t- 软件复用\n\n- 任务\n\n\t- 将分析现阶段建立的分析模型转变为软件设计模型，确保最终能平滑地过渡到程序代码\n\n\t- 内容\n\n\t\t- 数据设计\n\n\t\t\t- 将信息模型转变为数据结构\n\n\t\t- 体系结构设计\n\n\t\t\t- 定义软件主要组成部件之间的关系\n\n\t\t- 接口设计\n\n\t\t\t- 软件内部\n\n\t\t\t- 软件和接口系统之间\n\n\t\t\t- 软件与人之间\n\n\t\t\t- 数据流和控制流\n\n\t\t- 过程设计\n\n\t\t\t- 将软件体系结构的组成部件转变为对软件组件的过程性描述\n\n- 模块化设计(modular design)\n\n\t- 目的\n\n\t\t- 按照规定的原则把大型软件划分为一个个较小的、相对独立但相互关联的模块\n\n\t- 指导思想\n\n\t\t- 分解(decomposition)\n\n\t\t- 模块独立性(module independence)\n\n\t\t\t- 度量\n\n\t\t\t\t- 内聚(cohesion)\n\n\t\t\t\t\t- 也称为块内联系或模块强度\n\n\t\t\t\t\t- 指模块内部各个成分之间的联系\n\n\t\t\t\t\t- 是从功能的角度对模块内部聚合能力的量度\n\n\t\t\t\t\t- 强度分类\n\n\t\t\t\t\t\t- 低内聚\n\n\t\t\t\t\t\t\t- 偶然性内聚\n\n\t\t\t\t\t\t\t- 逻辑性内聚\n\n\t\t\t\t\t\t\t- 时间性内聚\n\n\t\t\t\t\t\t- 中内聚\n\n\t\t\t\t\t\t\t- 过程性内聚\n\n\t\t\t\t\t\t\t- 通信性内聚\n\n\t\t\t\t\t\t- 高内聚\n\n\t\t\t\t\t\t\t- 顺序性内聚\n\n\t\t\t\t\t\t\t- 功能性内聚\n\n\t\t\t\t- 耦合(coupling)\n\n\t\t\t\t\t- 又称块间联系\n\n\t\t\t\t\t- 指一个模块与其他模块间的联系\n\n\t\t\t\t\t- 是对软件内部块间联系的度量\n\n\t\t\t\t\t- 强度分类\n\n\t\t\t\t\t\t- 弱耦合\n\n\t\t\t\t\t\t\t- 非直接耦合\n\n\t\t\t\t\t\t\t- 数据耦合\n\n\t\t\t\t\t\t\t- 特征耦合\n\n\t\t\t\t\t\t- 中耦合\n\n\t\t\t\t\t\t\t- 控制耦合\n\n\t\t\t\t\t\t- 较强耦合\n\n\t\t\t\t\t\t\t- 外部耦合\n\n\t\t\t\t\t\t\t- 公共耦合\n\n\t\t\t\t\t\t- 强耦合\n\n\t\t\t\t\t\t\t- 内容耦合\n\n#### 面向对象设计建模\n\n- OO设计模型\n\n\t- 责任设计\n\n\t- 消息设计\n\n\t- 类和对象设计\n\n\t- 系统架构设计\n\n- OO设计的任务\n\n\t- 系统架构设计\n\n\t\t- 系统架构师\n\n\t\t- 软件系统架构\n\n\t\t\t- 指系统主要组成元素的组织或结构，以及其他全局性决策\n\n\t\t\t- 组成元素之间通过接口进行交互\n\n\t\t- 内容\n\n\t\t\t- 系统高层结构设计\n\n\t\t\t- 确定设计元素\n\n\t\t\t- 确定任务管理策略\n\n\t\t\t- 实现分布式机制\n\n\t\t\t- 设计数据存储方案\n\n\t\t\t- 人机界面设计\n\n\t- 系统元素设计\n\n\t\t- 软件设计师\n\n\t\t- 系统元素\n\n\t\t\t- 类\n\n\t\t\t- 子系统\n\n\t\t\t- 接口\n\n\t\t\t- 包\n\n\t\t\t- 等等...\n\n\t\t- 系统元素设计\n\n\t\t\t- 对每一个设计元素进行详细的设计\n\n\t\t- 内容\n\n\t\t\t- 类/对象设计\n\n\t\t\t- 子系统设计\n\n\t\t\t- 包设计\n\n- 模式的应用\n\n\t- 模式的定义\n\n\t\t- 解决某一类问题的方法论，对通用问题的通用解决方案\n\n\t- 软件模式的分类\n\n\t\t- 架构模式\n\n\t\t\t- 软件系统的基本结构组织方案\n\n\t\t- 设计模式\n\n\t\t\t- 面向对象的具体设计问题的解决方案\n\n\t\t- 习惯用法\n\n\t\t\t- 针对具体程序设计语言的使用模式\n\n#### 系统架构设计\n\n- 系统高层结构设计\n\n\t- 4个层次\n\n\t\t- 应用子系统层\n\n\t\t- 业务专用层\n\n\t\t- 中间件层\n\n\t\t- 系统软件层\n\n- 确定设计元素\n\n\t- 映射分析类到设计元素\n\n\t- 确定子系统\n\n\t\t- 指导性参考原则\n\n\t\t\t- 对象协作原则\n\n\t\t\t- 可选性原则\n\n\t\t\t- 用户界面原则\n\n\t\t\t- 参与者原则\n\n\t\t\t- 耦合和内聚原则\n\n\t\t\t- 分布原则\n\n\t- 定义子系统接口\n\n\t\t- 步骤\n\n\t\t\t- 1. 为子系统确定一个备选接口集\n\n\t\t\t- 2. 寻找接口之间的相似点\n\n\t\t\t- 3. 定义接口依赖关系\n\n\t\t\t- 4. 将接口映射到子系统\n\n\t\t\t- 5. 定义接口所指定的行为\n\n\t\t- 表述\n\n\t\t\t- 在相应类的名称前加上前缀\"I-\"\n\n\t\t\t- 或将类加上\"<<interface>>\"\n\n- 任务管理策略\n\n\t- 并行需求\n\n\t\t- 3种解决方案\n\n\t\t\t- 多处理器\n\n\t\t\t- 操作系统\n\n\t\t\t- 应用程序\n\n\t\t- 两种实现并行需求的技术\n\n\t\t\t- 引进任务管理部件\n\n\t\t\t- 基于进程和线程的控制\n\n\t\t\t\t- 进程和线程建模\n\n\t\t\t\t\t- 标识\n\n\t\t\t\t\t\t- 进程\n\n\t\t\t\t\t\t\t- <<process>>\n\n\t\t\t\t\t\t- 线程\n\n\t\t\t\t\t\t\t- <<thread>>\n\n\t\t\t\t\t- 进程\n\n\t\t\t\t\t\t- 进程间的通信是依赖关系\n\n\t\t\t\t\t\t- 对进程建模可采用\n\n\t\t\t\t\t\t\t- 类图\n\n\t\t\t\t\t\t\t- 构件图\n\n\t\t\t\t\t\t- 进程间联系\n\n\t\t\t\t\t\t\t- 独立的进程\n\n\t\t\t\t\t\t\t\t- 依赖关系\n\n\t\t\t\t\t\t\t- 有线程\n\n\t\t\t\t\t\t\t\t- 组合关系\n\n\t\t\t\t- 确定进程的生存周期\n\n\t\t\t\t\t- 单进程架构\n\n\t\t\t\t\t\t- 进程在应用程序开始和结束时创建和销毁\n\n\t\t\t\t\t- 多进程架构\n\n\t\t\t\t\t\t- 新进程（或线程）在应用程序开始时\n\n\t\t\t\t\t\t\t- 从初始进程中产生或派生\n\n\t\t\t\t\t\t\t- 必须显式销毁\n\n- 分布式实现机制\n\n\t- 确定网络拓扑配置\n\n\t\t- 网络的物理布局（包括位置）\n\n\t\t- 网络的结点及结点的配置与性能\n\n\t\t- 网络中的各网段带宽\n\n\t\t- 网络中的冗余路径（容错能力）\n\n\t\t- 结点的分类\n\n\t- 将设计元素分配到网络结点\n\n\t- 设计分布处理机制\n\n\t\t- 需要底层类库的支持\n\n\t\t\t- Microsoft.NET平台\n\n\t\t\t- Java平台\n\n\t\t\t\t- 远程方法调用(remote method invoaction, RMI)\n\n\t\t\t\t\t- 1. 引入可直接利用的类库\n\n\t\t\t\t\t\t- Naming\n\n\t\t\t\t\t\t- Serializable\n\n\t\t\t\t\t\t- Remote\n\n\t\t\t\t\t- 2. 建立一些带有\"<<role>>\"标识的类，代表实际设计元素\n\n\t\t\t\t\t\t- <<role>> SampleDistributedClass\n\n\t\t\t\t\t\t\t- 分布类\n\n\t\t\t\t\t\t- <<role>> SampleDistributedClassClient\n\n\t\t\t\t\t\t\t- 分布类的客户\n\n\t\t\t\t\t\t- <<role>> SamplePassedData\n\n\t\t\t\t\t\t\t- 被作为参数传递的对象所对应的设计元素\n\n\t\t\t\t\t\t- <<interface>> ISampleDistributedClass\n\n\t\t\t\t\t\t\t- 被分布到异地的分布类在本地的“代言人”\n\n\t\t\t\t\t- 3. 描述分布机制的静态结构\n\n- 数据存储设计\n\n- 人机交互设计\n\n\t- 1. 根据用户特点设计不同界面\n\n\t- 2. 增加用户界面专用的类与对象\n\n\t- 3. 利用快速原型演示，来改进界面设计\n\n#### 系统元素设计\n\n- 子系统设计\n\n\t- 1. 将子系统行为分配给子系统元素\n\n\t- 2.描述子系统元素\n\n\t- 3. 说明子系统的依赖关系\n\n- 分包设计\n\n\t- 分包原则\n\n\t\t- 将边界类打包\n\n\t\t\t- 接口可能被替换\n\n\t\t\t\t- 将接口与设计模型的其他部分隔离开\n\n\t\t\t- 接口不易被替换\n\n\t\t\t\t- 对系统服务分包，将边界类和功能相关的实体类及控制类放置在一起\n\n\t\t- 将功能相关的类打包\n\n- 类/对象设计\n\n\t- 创建初始设计类\n\n\t\t- 设计边界类\n\n\t\t- 设计实体类\n\n\t\t- 设计控制类\n\n\t\t\t- 复杂性\n\n\t\t\t- 变更的可能性\n\n\t\t\t- 分布和性能\n\n\t\t\t- 事物管理\n\n\t- 定义操作\n\n\t\t- 命名和说明操作\n\n\t\t- 定义操作可见性\n\n\t\t- 定义操作的作用域\n\n\t- 定义方法\n\n\t- 定义状态\n\n\t\t- 确定一个类是否具有重要的动态行为\n\n\t\t\t- 检查类的属性\n\n\t\t\t- 检查类的关联\n\n\t- 定义属性\n\n\t\t- 属性名\n\n\t\t- 属性类型\n\n\t\t- 属性的默认值或初始值\n\n\t\t- 属性的可见性\n\n\t\t\t- 公有\n\n\t\t\t\t- public\n\n\t\t\t- 保护\n\n\t\t\t\t- protected\n\n\t\t\t- 私有\n\n\t\t\t\t- private\n\n\t- 定义依赖关系\n\n\t\t- 属于不同类的两个对象a、b的四种连接可见度\n\n\t\t\t- 全局(global)\n\n\t\t\t- 参数(parameter)\n\n\t\t\t- 局部(local)\n\n\t\t\t- 域(field)\n\n\t- 定义关联关系\n\n\t\t- 进一步明确或改进细节内容\n\n\t\t\t- 聚集还是组合\n\n\t\t\t- 属性还是组合\n\n\t\t\t- 关联的方向\n\n\t\t\t- 关联类\n\n\t\t\t- 确定重数\n\n\t- 定义泛化关系\n\n\t- 处理非功能性需求\n\n### 八、编码与测试\n\n#### 编码\n\n- 概述\n\n\t- 目的\n\n\t\t- 把详细设计的结果“翻译”成选定的程序设计语言书写的源程序\n\n\t- 编码风格\n\n\t\t- 使用标准的控制结构\n\n\t\t- 实现源程序的文档化\n\n\t\t\t- 有意义的变量名称\n\n\t\t\t- 适当的注释\n\n\t\t\t- 标准的书写格式\n\n\t\t- 满足用户友好的输入输出风格\n\n- 编码语言\n\n\t- 基础语言\n\n\t\t- FORTRAN\n\n\t\t- COBOL\n\n\t\t- BASIC\n\n\t- 结构化语言\n\n\t\t- C\n\n\t\t- Pascal\n\n\t\t- Ada\n\n\t- 面向对象语言\n\n\t\t- C++\n\n\t\t- Java\n\n\t\t- C#\n\n#### 测试\n\n- 多模块程序的测试策略\n\n\t- 层次性\n\n\t\t- 单元测试(unit testing)\n\n\t\t\t- 编译\n\n\t\t\t- 静态分析器检查\n\n\t\t\t- 代码评审\n\n\t\t\t\t- 办公桌检查\n\n\t\t\t\t- 小组会\n\n\t\t\t\t\t- 走查\n\n\t\t\t\t\t- 代码会审\n\n\t\t\t- 动态测试\n\n\t\t\t\t- 黑盒\n\n\t\t\t\t- 白盒\n\n\t\t- 集成测试(integration testing)\n\n\t\t\t- 策略\n\n\t\t\t\t- 自顶向下\n\n\t\t\t\t- 由底向上\n\n\t\t\t\t- 混合方式\n\n\t\t- 高级测试\n\n\t\t\t- 确认测试(validation testing)\n\n\t\t\t\t- 有效性测试（黑盒测试）和配置复审\n\n\t\t\t\t- 验收测试\n\n\t\t\t\t- α与β测试\n\n\t\t\t- 系统测试(system testing)\n\n\t- 终止测试的标准\n\n\t\t- 规定测试策略和应达目标\n\n\t\t- 规定至少要查出的错误数量\n\n- 面向对象系统的测试\n\n\t- OO软件系统需要比传统软件系统更多的测试\n\n\t- OO软件的测试策略\n\n\t\t- 单元测试\n\n\t\t\t- 单元\n\n\t\t\t\t- 封装的类和对象\n\n\t\t- 集成测试\n\n\t\t\t- 只能进行基于黑盒方法的集成测试\n\n\t\t\t- 测试策略\n\n\t\t\t\t- 基于线程的测试\n\n\t\t\t\t- 基于使用的测试\n\n\t\t- 高级测试\n\n\t\t\t- 确认测试\n\n\t\t\t- 系统测试\n\n","slug":"3软件工程（中）","published":1,"updated":"2024-10-14T03:27:49.482Z","comments":1,"layout":"post","photos":[],"_id":"cm2bvklb100064cuf25ke3zwr","content":"<h3 id=\"四、面向对象与UML\"><a href=\"#四、面向对象与UML\" class=\"headerlink\" title=\"四、面向对象与ＵＭＬ\"></a>四、面向对象与ＵＭＬ</h3><h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><ul>\n<li><p>对象和类</p>\n<ul>\n<li><p>对象</p>\n<ul>\n<li><p>面向对象技术的核心</p>\n</li>\n<li><p>封装体</p>\n<ul>\n<li>数据以及在其上操作</li>\n</ul>\n</li>\n<li><p>集合</p>\n<ul>\n<li>是具有唯一对象名和固定对外接口的一组属性和操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>类</p>\n<ul>\n<li><p>一组相似的对象的共性抽象</p>\n</li>\n<li><p>有效模板</p>\n<ul>\n<li>创建对象</li>\n</ul>\n</li>\n<li><p>工具</p>\n<ul>\n<li>实现抽象数据类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象的基本特征</p>\n<ul>\n<li><p>抽象abstraction</p>\n<ul>\n<li><p>在某个侧面来表示某个物体或概念</p>\n</li>\n<li><p>忽略主题中于当前目标无关的因素</p>\n</li>\n</ul>\n</li>\n<li><p>封装encapsulation</p>\n<ul>\n<li><p>把操作和数据包围起来</p>\n</li>\n<li><p>对数据的访问只通过已定义的接口来完成</p>\n</li>\n</ul>\n</li>\n<li><p>继承inheritance</p>\n<ul>\n<li><p>类的层次模型</p>\n</li>\n<li><p>一种表述共性的方法</p>\n</li>\n</ul>\n</li>\n<li><p>多态polymorphism</p>\n<ul>\n<li>不同类的对象对同一消息执行不同的处理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>优点</p>\n<ul>\n<li><p>提高软件系统的</p>\n<ul>\n<li><p>可复用性</p>\n</li>\n<li><p>可扩展性</p>\n</li>\n<li><p>可维护性</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h4><ul>\n<li><p>概念</p>\n<ul>\n<li><p>统一建模语言Unified modeling language</p>\n</li>\n<li><p>基于面向对象的可视化建模语言</p>\n</li>\n<li><p>表示</p>\n<ul>\n<li><p>用图表示它的语法</p>\n</li>\n<li><p>用元模型表达它的语义</p>\n</li>\n<li><p>采用模型来描述系统的结构（或静态特征）及行为（或动态特征）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>组成</p>\n<ul>\n<li><p>两类模型元素</p>\n<ul>\n<li><p>表示概念</p>\n</li>\n<li><p>表示连接关系</p>\n<ul>\n<li><p>官时饭依剧组</p>\n</li>\n<li><p>关联</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>实现</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>泛化（继承）</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>依赖</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>聚集（聚合）</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>组合</p>\n<ul>\n<li><p>“部分”不能独立于“整体”而存在</p>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>四个抽象层次</p>\n<ul>\n<li><p>元元模型</p>\n<ul>\n<li>描述元模型</li>\n</ul>\n</li>\n<li><p>元模型</p>\n<ul>\n<li>描述模型</li>\n</ul>\n</li>\n<li><p>模型</p>\n<ul>\n<li>描述信息领域</li>\n</ul>\n</li>\n<li><p>用户模型</p>\n<ul>\n<li>模型的实例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图和视图</p>\n<ul>\n<li><p>图diagram</p>\n<ul>\n<li><p>静态图</p>\n<ul>\n<li><p>用例图</p>\n<ul>\n<li><p>用例之间的关系</p>\n<ul>\n<li><p>扩展关系</p>\n</li>\n<li><p>包含关系</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>类图</p>\n<ul>\n<li><p>可见性</p>\n<ul>\n<li><p>public +</p>\n</li>\n<li><p>private -</p>\n</li>\n<li><p>protected #</p>\n</li>\n</ul>\n</li>\n<li><p>操作的语法</p>\n<ul>\n<li>可见性 操作名(参数表) : 返回类型{约束特性}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>对象图</p>\n</li>\n<li><p>构件图</p>\n</li>\n<li><p>部署图</p>\n</li>\n</ul>\n</li>\n<li><p>动态图</p>\n<ul>\n<li><p>状态图</p>\n<ul>\n<li><p>描述</p>\n<ul>\n<li><p>一个特定对象的所有可能状态</p>\n</li>\n<li><p>引起其状态转移的事件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>时序图</p>\n</li>\n<li><p>协作图</p>\n</li>\n<li><p>活动图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>视图view</p>\n<ul>\n<li><p>用例视图</p>\n</li>\n<li><p>逻辑视图</p>\n</li>\n<li><p>进程视图</p>\n</li>\n<li><p>构件视图</p>\n</li>\n<li><p>部署视图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>同一标准</p>\n</li>\n<li><p>面向对象</p>\n</li>\n<li><p>表达能力强大、可视化</p>\n</li>\n</ul>\n</li>\n<li><p>应用</p>\n<ul>\n<li>UML模型可作为测试阶段的依据</li>\n</ul>\n</li>\n<li><p>建模机制</p>\n<ul>\n<li><p>静态建模</p>\n<ul>\n<li><p>由5图表示</p>\n<ul>\n<li><p>用泪兑狗布</p>\n</li>\n<li><p>用例图</p>\n</li>\n<li><p>类图</p>\n</li>\n<li><p>对象图</p>\n</li>\n<li><p>构件图</p>\n</li>\n<li><p>部署图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>动态建模</p>\n<ul>\n<li><p>由4图表示</p>\n<ul>\n<li><p>壮士卸货</p>\n</li>\n<li><p>状态图</p>\n</li>\n<li><p>时序图</p>\n</li>\n<li><p>协作图</p>\n</li>\n<li><p>活动图</p>\n</li>\n</ul>\n</li>\n<li><p>消息</p>\n<ul>\n<li><p>简单消息</p>\n</li>\n<li><p>同步消息</p>\n</li>\n<li><p>异步消息</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"物理架构建模\"><a href=\"#物理架构建模\" class=\"headerlink\" title=\"物理架构建模\"></a>物理架构建模</h4><h4 id=\"UML工具\"><a href=\"#UML工具\" class=\"headerlink\" title=\"UML工具\"></a>UML工具</h4><ul>\n<li><p>Rational Rose</p>\n<ul>\n<li><p>对软件系统进行面向对象分析和设计的可视化工具</p>\n</li>\n<li><p>Rose模型</p>\n<ul>\n<li><p>4个视图</p>\n<ul>\n<li><p>用例视图</p>\n</li>\n<li><p>逻辑视图</p>\n</li>\n<li><p>构件视图</p>\n</li>\n<li><p>部署视图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>StarUML</p>\n<ul>\n<li>运行在Windows上的UML&#x2F;MDA平台</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、需求工程与需求分析\"><a href=\"#五、需求工程与需求分析\" class=\"headerlink\" title=\"五、需求工程与需求分析\"></a>五、需求工程与需求分析</h3><h4 id=\"软件需求工程\"><a href=\"#软件需求工程\" class=\"headerlink\" title=\"软件需求工程\"></a>软件需求工程</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>一个软件系统必须遵循的条件或具备的能力</p>\n<ul>\n<li><p>系统的外部行为</p>\n<ul>\n<li>用户解决问题或达到目标所需具有的条件或能力</li>\n</ul>\n</li>\n<li><p>系统的内部特性</p>\n<ul>\n<li>系统为了满足合同、规范或其他规定文档所需具有的条件或能力</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>3个层次</p>\n<ul>\n<li><p>业务需求</p>\n<ul>\n<li>项目愿景和范围</li>\n</ul>\n</li>\n<li><p>用户需求</p>\n<ul>\n<li><p>用例模型文档</p>\n</li>\n<li><p>质量属性</p>\n</li>\n</ul>\n</li>\n<li><p>功能需求</p>\n<ul>\n<li>SRS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>6个特性</p>\n<ul>\n<li><p>功能性</p>\n<ul>\n<li><p>普通功能</p>\n</li>\n<li><p>全局性功能</p>\n</li>\n</ul>\n</li>\n<li><p>可用性</p>\n</li>\n<li><p>可靠性</p>\n</li>\n<li><p>性能</p>\n</li>\n<li><p>可支持性</p>\n</li>\n<li><p>设计约束</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h4><ul>\n<li><p>目的</p>\n<ul>\n<li><p>为待开发的软件系统进行需求定义与分析</p>\n</li>\n<li><p>并建立一个需求模型</p>\n</li>\n</ul>\n</li>\n<li><p>4个步骤</p>\n<ul>\n<li><p>需求获取</p>\n<ul>\n<li><p>常用方法</p>\n<ul>\n<li><p>常规方法</p>\n<ul>\n<li><p>建立联合分析小组</p>\n<ul>\n<li><p>用户</p>\n</li>\n<li><p>系统分析员</p>\n</li>\n<li><p>领域专家</p>\n</li>\n</ul>\n</li>\n<li><p>用户访谈</p>\n</li>\n<li><p>问题分析与确认</p>\n</li>\n</ul>\n</li>\n<li><p>快速原型法</p>\n<ul>\n<li><p>获取两个层面上的需求</p>\n<ul>\n<li><p>联机屏幕</p>\n</li>\n<li><p>模拟系统的外部特征</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>需求建模</p>\n<ul>\n<li><p>需求模型</p>\n<ul>\n<li><p>结构化需求模型</p>\n</li>\n<li><p>面向对象需求模型</p>\n<ul>\n<li><p>3个组成部分</p>\n<ul>\n<li><p>用例模型</p>\n<ul>\n<li><p>用例图</p>\n</li>\n<li><p>用例规约</p>\n</li>\n</ul>\n</li>\n<li><p>补充规约</p>\n</li>\n<li><p>术语表</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象需求建模</p>\n<ul>\n<li><p>4步</p>\n<ul>\n<li><p>画用例图</p>\n<ul>\n<li><p>确定参与者</p>\n</li>\n<li><p>确定用例</p>\n</li>\n<li><p>绘制和检查用例图</p>\n</li>\n</ul>\n</li>\n<li><p>写用例规约</p>\n<ul>\n<li><p>用例规约内容</p>\n<ul>\n<li><p>简要说明</p>\n</li>\n<li><p>事件流</p>\n<ul>\n<li><p>基本流</p>\n</li>\n<li><p>备选流</p>\n</li>\n</ul>\n</li>\n<li><p>特殊需求</p>\n</li>\n<li><p>前置条件和后置条件</p>\n</li>\n</ul>\n</li>\n<li><p>用例模式的检查</p>\n<ul>\n<li><p>功能需求的完备性</p>\n</li>\n<li><p>模型是否易于理解</p>\n</li>\n<li><p>是否存在不一致性</p>\n</li>\n<li><p>避免二义性语义</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>描述补充规约</p>\n</li>\n<li><p>编写术语表</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>需求描述</p>\n<ul>\n<li><p>编写SRS</p>\n<ul>\n<li><p>主体</p>\n<ul>\n<li><p>描述软件系统的分析模型</p>\n<ul>\n<li><p>信息描述</p>\n<ul>\n<li>软件所含信息的详细描述</li>\n</ul>\n</li>\n<li><p>功能描述</p>\n<ul>\n<li>软件功能需求的说明</li>\n</ul>\n</li>\n<li><p>行为描述</p>\n<ul>\n<li>系统状态变化以及事件和动作的叙述</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>需求验证</p>\n<ul>\n<li>验证SRS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"需求管理\"><a href=\"#需求管理\" class=\"headerlink\" title=\"需求管理\"></a>需求管理</h3><ul>\n<li><p>需求变更</p>\n<ul>\n<li><p>流程</p>\n<ul>\n<li><p>变更申请</p>\n</li>\n<li><p>变更审批</p>\n</li>\n<li><p>变更修改</p>\n</li>\n<li><p>变更关闭</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、面向对象分析\"><a href=\"#六、面向对象分析\" class=\"headerlink\" title=\"六、面向对象分析\"></a>六、面向对象分析</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li><p>面向对象软件分析(object-oriented analysis,OOA)</p>\n<ul>\n<li><p>主要任务</p>\n<ul>\n<li><p>理解用户需求</p>\n<ul>\n<li><p>理解和分析用户需求</p>\n</li>\n<li><p>明确所开发的软件系统的职责</p>\n</li>\n<li><p>形成文件并规范地加以表述</p>\n</li>\n</ul>\n</li>\n<li><p>分析，提取类和对象，并结合分析进行建模</p>\n</li>\n</ul>\n</li>\n<li><p>OOA模型</p>\n<ul>\n<li><p>以用例模型为主体的需求模型（核心）</p>\n<ul>\n<li><p>类&#x2F;对象模型</p>\n</li>\n<li><p>对象-关系模型</p>\n</li>\n<li><p>对象-行为模型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>优点</p>\n<ul>\n<li><p>对需求的变化具有较强的适应性</p>\n</li>\n<li><p>支持软件复用</p>\n</li>\n</ul>\n</li>\n<li><p>分析模型的一般特点</p>\n<ul>\n<li><p>全面覆盖软件的功能需求</p>\n</li>\n<li><p>分析模型与软件的实现 无关</p>\n</li>\n<li><p>分析模型的表述方法与所采用的分析技术有关</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象分析模型</p>\n<ul>\n<li><p>五层次模型</p>\n<ul>\n<li><p>类&#x2F;对象层</p>\n</li>\n<li><p>属性层</p>\n</li>\n<li><p>服务层</p>\n<ul>\n<li><p>动态属性</p>\n<ul>\n<li><p>对象</p>\n</li>\n<li><p>类</p>\n</li>\n</ul>\n</li>\n<li><p>消息通信</p>\n<ul>\n<li>对象之间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构层</p>\n<ul>\n<li><p>对象和类的层次结构关系</p>\n<ul>\n<li><p>包含</p>\n</li>\n<li><p>继承</p>\n</li>\n<li><p>关联</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>主题层</p>\n<ul>\n<li><p>每个主题是一个子系统</p>\n<ul>\n<li>包含有关对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OOA方法</p>\n<ul>\n<li><p>共同特征</p>\n<ul>\n<li><p>类和类层次的表示</p>\n</li>\n<li><p>建立对象-关系模型</p>\n</li>\n<li><p>建立对象-行为模型</p>\n</li>\n</ul>\n</li>\n<li><p>建模步骤</p>\n<ul>\n<li><p>需求理解</p>\n</li>\n<li><p>定义类和对象</p>\n</li>\n<li><p>表示对象的属性和操作</p>\n</li>\n<li><p>表示类的结构和层次</p>\n</li>\n<li><p>建立对象-关系模型</p>\n</li>\n<li><p>建立对象-行为模型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象软件开发的全（迭代）过程</p>\n<ul>\n<li><ol>\n<li>OOA（分析）</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>OOD（设计）</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>OOP（编程）</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>OOT（测试）</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象分析建模\"><a href=\"#面向对象分析建模\" class=\"headerlink\" title=\"面向对象分析建模\"></a>面向对象分析建模</h4><ul>\n<li><p>识别与确定分析类</p>\n<ul>\n<li><p>分析类的类型</p>\n<ul>\n<li><p>边界类</p>\n<ul>\n<li><p>提供接口</p>\n<ul>\n<li><p>对参与者</p>\n</li>\n<li><p>对外部系统交互协议</p>\n</li>\n</ul>\n</li>\n<li><p>种类</p>\n<ul>\n<li><p>用户界面类</p>\n</li>\n<li><p>系统接口类</p>\n</li>\n<li><p>设备接口类</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>控制类</p>\n<ul>\n<li><p>封装</p>\n<ul>\n<li>一个或几个用例所特有的流程控制行为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>实体类</p>\n<ul>\n<li>存储和管理系统中的信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查找分析类</p>\n<ul>\n<li><p>为每对 参与者&#x2F;用例 确定一个边界类</p>\n</li>\n<li><p>为每个用例设置一个控制类</p>\n</li>\n<li><p>确定相关的各个实体（包括属性与方法）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立对象-行为模型（动态模型）</p>\n<ul>\n<li><p>时序图</p>\n</li>\n<li><p>协作图</p>\n</li>\n<li><p>为分析类分配职责</p>\n</li>\n<li><p>状态图</p>\n</li>\n</ul>\n</li>\n<li><p>建立对象-关系模型（静态模型）</p>\n<ul>\n<li><p>分析类的属性</p>\n</li>\n<li><p>分析类的关联</p>\n</li>\n<li><p>分析类图</p>\n</li>\n<li><p>分析类的合并</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七、面向对象设计\"><a href=\"#七、面向对象设计\" class=\"headerlink\" title=\"七、面向对象设计\"></a>七、面向对象设计</h3><h4 id=\"软件设计\"><a href=\"#软件设计\" class=\"headerlink\" title=\"软件设计\"></a>软件设计</h4><ul>\n<li><p>概念</p>\n<ul>\n<li><p>两种主流的设计方法</p>\n<ul>\n<li><p>结构化软件设计</p>\n<ul>\n<li>以结构化程序设计为基础</li>\n</ul>\n</li>\n<li><p>面向对象软件设计</p>\n<ul>\n<li>由面向对象方法导出</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模块与构件</p>\n<ul>\n<li><p>模块(module)</p>\n<ul>\n<li>一个拥有明确定义的输入、输出和特性的程序实体</li>\n</ul>\n</li>\n<li><p>软件构件(software component)</p>\n<ul>\n<li><p>可重复使用的软件组件</p>\n</li>\n<li><p>现有可复用的构件</p>\n<ul>\n<li>大多是在对象的基础上创建的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抽象(abstraction)与细化(refinement)</p>\n</li>\n<li><p>信息隐藏(information hiding)</p>\n<ul>\n<li><p>把系统分解为模块时应遵守的指导思想</p>\n</li>\n<li><p>发展</p>\n<ul>\n<li><p>数据封装(data encapsulation)</p>\n</li>\n<li><p>抽象数据类型(abstract datatype)</p>\n</li>\n<li><p>类和对象</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件复用</p>\n</li>\n</ul>\n</li>\n<li><p>任务</p>\n<ul>\n<li><p>将分析现阶段建立的分析模型转变为软件设计模型，确保最终能平滑地过渡到程序代码</p>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>数据设计</p>\n<ul>\n<li>将信息模型转变为数据结构</li>\n</ul>\n</li>\n<li><p>体系结构设计</p>\n<ul>\n<li>定义软件主要组成部件之间的关系</li>\n</ul>\n</li>\n<li><p>接口设计</p>\n<ul>\n<li><p>软件内部</p>\n</li>\n<li><p>软件和接口系统之间</p>\n</li>\n<li><p>软件与人之间</p>\n</li>\n<li><p>数据流和控制流</p>\n</li>\n</ul>\n</li>\n<li><p>过程设计</p>\n<ul>\n<li>将软件体系结构的组成部件转变为对软件组件的过程性描述</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模块化设计(modular design)</p>\n<ul>\n<li><p>目的</p>\n<ul>\n<li>按照规定的原则把大型软件划分为一个个较小的、相对独立但相互关联的模块</li>\n</ul>\n</li>\n<li><p>指导思想</p>\n<ul>\n<li><p>分解(decomposition)</p>\n</li>\n<li><p>模块独立性(module independence)</p>\n<ul>\n<li><p>度量</p>\n<ul>\n<li><p>内聚(cohesion)</p>\n<ul>\n<li><p>也称为块内联系或模块强度</p>\n</li>\n<li><p>指模块内部各个成分之间的联系</p>\n</li>\n<li><p>是从功能的角度对模块内部聚合能力的量度</p>\n</li>\n<li><p>强度分类</p>\n<ul>\n<li><p>低内聚</p>\n<ul>\n<li><p>偶然性内聚</p>\n</li>\n<li><p>逻辑性内聚</p>\n</li>\n<li><p>时间性内聚</p>\n</li>\n</ul>\n</li>\n<li><p>中内聚</p>\n<ul>\n<li><p>过程性内聚</p>\n</li>\n<li><p>通信性内聚</p>\n</li>\n</ul>\n</li>\n<li><p>高内聚</p>\n<ul>\n<li><p>顺序性内聚</p>\n</li>\n<li><p>功能性内聚</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>耦合(coupling)</p>\n<ul>\n<li><p>又称块间联系</p>\n</li>\n<li><p>指一个模块与其他模块间的联系</p>\n</li>\n<li><p>是对软件内部块间联系的度量</p>\n</li>\n<li><p>强度分类</p>\n<ul>\n<li><p>弱耦合</p>\n<ul>\n<li><p>非直接耦合</p>\n</li>\n<li><p>数据耦合</p>\n</li>\n<li><p>特征耦合</p>\n</li>\n</ul>\n</li>\n<li><p>中耦合</p>\n<ul>\n<li>控制耦合</li>\n</ul>\n</li>\n<li><p>较强耦合</p>\n<ul>\n<li><p>外部耦合</p>\n</li>\n<li><p>公共耦合</p>\n</li>\n</ul>\n</li>\n<li><p>强耦合</p>\n<ul>\n<li>内容耦合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象设计建模\"><a href=\"#面向对象设计建模\" class=\"headerlink\" title=\"面向对象设计建模\"></a>面向对象设计建模</h4><ul>\n<li><p>OO设计模型</p>\n<ul>\n<li><p>责任设计</p>\n</li>\n<li><p>消息设计</p>\n</li>\n<li><p>类和对象设计</p>\n</li>\n<li><p>系统架构设计</p>\n</li>\n</ul>\n</li>\n<li><p>OO设计的任务</p>\n<ul>\n<li><p>系统架构设计</p>\n<ul>\n<li><p>系统架构师</p>\n</li>\n<li><p>软件系统架构</p>\n<ul>\n<li><p>指系统主要组成元素的组织或结构，以及其他全局性决策</p>\n</li>\n<li><p>组成元素之间通过接口进行交互</p>\n</li>\n</ul>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>系统高层结构设计</p>\n</li>\n<li><p>确定设计元素</p>\n</li>\n<li><p>确定任务管理策略</p>\n</li>\n<li><p>实现分布式机制</p>\n</li>\n<li><p>设计数据存储方案</p>\n</li>\n<li><p>人机界面设计</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>系统元素设计</p>\n<ul>\n<li><p>软件设计师</p>\n</li>\n<li><p>系统元素</p>\n<ul>\n<li><p>类</p>\n</li>\n<li><p>子系统</p>\n</li>\n<li><p>接口</p>\n</li>\n<li><p>包</p>\n</li>\n<li><p>等等…</p>\n</li>\n</ul>\n</li>\n<li><p>系统元素设计</p>\n<ul>\n<li>对每一个设计元素进行详细的设计</li>\n</ul>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>类&#x2F;对象设计</p>\n</li>\n<li><p>子系统设计</p>\n</li>\n<li><p>包设计</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模式的应用</p>\n<ul>\n<li><p>模式的定义</p>\n<ul>\n<li>解决某一类问题的方法论，对通用问题的通用解决方案</li>\n</ul>\n</li>\n<li><p>软件模式的分类</p>\n<ul>\n<li><p>架构模式</p>\n<ul>\n<li>软件系统的基本结构组织方案</li>\n</ul>\n</li>\n<li><p>设计模式</p>\n<ul>\n<li>面向对象的具体设计问题的解决方案</li>\n</ul>\n</li>\n<li><p>习惯用法</p>\n<ul>\n<li>针对具体程序设计语言的使用模式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"系统架构设计\"><a href=\"#系统架构设计\" class=\"headerlink\" title=\"系统架构设计\"></a>系统架构设计</h4><ul>\n<li><p>系统高层结构设计</p>\n<ul>\n<li><p>4个层次</p>\n<ul>\n<li><p>应用子系统层</p>\n</li>\n<li><p>业务专用层</p>\n</li>\n<li><p>中间件层</p>\n</li>\n<li><p>系统软件层</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>确定设计元素</p>\n<ul>\n<li><p>映射分析类到设计元素</p>\n</li>\n<li><p>确定子系统</p>\n<ul>\n<li><p>指导性参考原则</p>\n<ul>\n<li><p>对象协作原则</p>\n</li>\n<li><p>可选性原则</p>\n</li>\n<li><p>用户界面原则</p>\n</li>\n<li><p>参与者原则</p>\n</li>\n<li><p>耦合和内聚原则</p>\n</li>\n<li><p>分布原则</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义子系统接口</p>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><ol>\n<li>为子系统确定一个备选接口集</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>寻找接口之间的相似点</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>定义接口依赖关系</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>将接口映射到子系统</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>定义接口所指定的行为</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>表述</p>\n<ul>\n<li><p>在相应类的名称前加上前缀”I-“</p>\n</li>\n<li><p>或将类加上”&lt;<interface>&gt;”</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>任务管理策略</p>\n<ul>\n<li><p>并行需求</p>\n<ul>\n<li><p>3种解决方案</p>\n<ul>\n<li><p>多处理器</p>\n</li>\n<li><p>操作系统</p>\n</li>\n<li><p>应用程序</p>\n</li>\n</ul>\n</li>\n<li><p>两种实现并行需求的技术</p>\n<ul>\n<li><p>引进任务管理部件</p>\n</li>\n<li><p>基于进程和线程的控制</p>\n<ul>\n<li><p>进程和线程建模</p>\n<ul>\n<li><p>标识</p>\n<ul>\n<li><p>进程</p>\n<ul>\n<li>&lt;<process>&gt;</li>\n</ul>\n</li>\n<li><p>线程</p>\n<ul>\n<li>&lt;<thread>&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程</p>\n<ul>\n<li><p>进程间的通信是依赖关系</p>\n</li>\n<li><p>对进程建模可采用</p>\n<ul>\n<li><p>类图</p>\n</li>\n<li><p>构件图</p>\n</li>\n</ul>\n</li>\n<li><p>进程间联系</p>\n<ul>\n<li><p>独立的进程</p>\n<ul>\n<li>依赖关系</li>\n</ul>\n</li>\n<li><p>有线程</p>\n<ul>\n<li>组合关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>确定进程的生存周期</p>\n<ul>\n<li><p>单进程架构</p>\n<ul>\n<li>进程在应用程序开始和结束时创建和销毁</li>\n</ul>\n</li>\n<li><p>多进程架构</p>\n<ul>\n<li><p>新进程（或线程）在应用程序开始时</p>\n<ul>\n<li><p>从初始进程中产生或派生</p>\n</li>\n<li><p>必须显式销毁</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分布式实现机制</p>\n<ul>\n<li><p>确定网络拓扑配置</p>\n<ul>\n<li><p>网络的物理布局（包括位置）</p>\n</li>\n<li><p>网络的结点及结点的配置与性能</p>\n</li>\n<li><p>网络中的各网段带宽</p>\n</li>\n<li><p>网络中的冗余路径（容错能力）</p>\n</li>\n<li><p>结点的分类</p>\n</li>\n</ul>\n</li>\n<li><p>将设计元素分配到网络结点</p>\n</li>\n<li><p>设计分布处理机制</p>\n<ul>\n<li><p>需要底层类库的支持</p>\n<ul>\n<li><p>Microsoft.NET平台</p>\n</li>\n<li><p>Java平台</p>\n<ul>\n<li><p>远程方法调用(remote method invoaction, RMI)</p>\n<ul>\n<li><ol>\n<li>引入可直接利用的类库</li>\n</ol>\n<ul>\n<li><p>Naming</p>\n</li>\n<li><p>Serializable</p>\n</li>\n<li><p>Remote</p>\n</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>建立一些带有”&lt;<role>&gt;”标识的类，代表实际设计元素</li>\n</ol>\n<ul>\n<li><p>&lt;<role>&gt; SampleDistributedClass</p>\n<ul>\n<li>分布类</li>\n</ul>\n</li>\n<li><p>&lt;<role>&gt; SampleDistributedClassClient</p>\n<ul>\n<li>分布类的客户</li>\n</ul>\n</li>\n<li><p>&lt;<role>&gt; SamplePassedData</p>\n<ul>\n<li>被作为参数传递的对象所对应的设计元素</li>\n</ul>\n</li>\n<li><p>&lt;<interface>&gt; ISampleDistributedClass</p>\n<ul>\n<li>被分布到异地的分布类在本地的“代言人”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>描述分布机制的静态结构</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据存储设计</p>\n</li>\n<li><p>人机交互设计</p>\n<ul>\n<li><ol>\n<li>根据用户特点设计不同界面</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>增加用户界面专用的类与对象</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>利用快速原型演示，来改进界面设计</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"系统元素设计\"><a href=\"#系统元素设计\" class=\"headerlink\" title=\"系统元素设计\"></a>系统元素设计</h4><ul>\n<li><p>子系统设计</p>\n<ul>\n<li><ol>\n<li>将子系统行为分配给子系统元素</li>\n</ol>\n</li>\n<li><p>2.描述子系统元素</p>\n</li>\n<li><ol start=\"3\">\n<li>说明子系统的依赖关系</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>分包设计</p>\n<ul>\n<li><p>分包原则</p>\n<ul>\n<li><p>将边界类打包</p>\n<ul>\n<li><p>接口可能被替换</p>\n<ul>\n<li>将接口与设计模型的其他部分隔离开</li>\n</ul>\n</li>\n<li><p>接口不易被替换</p>\n<ul>\n<li>对系统服务分包，将边界类和功能相关的实体类及控制类放置在一起</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>将功能相关的类打包</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>类&#x2F;对象设计</p>\n<ul>\n<li><p>创建初始设计类</p>\n<ul>\n<li><p>设计边界类</p>\n</li>\n<li><p>设计实体类</p>\n</li>\n<li><p>设计控制类</p>\n<ul>\n<li><p>复杂性</p>\n</li>\n<li><p>变更的可能性</p>\n</li>\n<li><p>分布和性能</p>\n</li>\n<li><p>事物管理</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义操作</p>\n<ul>\n<li><p>命名和说明操作</p>\n</li>\n<li><p>定义操作可见性</p>\n</li>\n<li><p>定义操作的作用域</p>\n</li>\n</ul>\n</li>\n<li><p>定义方法</p>\n</li>\n<li><p>定义状态</p>\n<ul>\n<li><p>确定一个类是否具有重要的动态行为</p>\n<ul>\n<li><p>检查类的属性</p>\n</li>\n<li><p>检查类的关联</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义属性</p>\n<ul>\n<li><p>属性名</p>\n</li>\n<li><p>属性类型</p>\n</li>\n<li><p>属性的默认值或初始值</p>\n</li>\n<li><p>属性的可见性</p>\n<ul>\n<li><p>公有</p>\n<ul>\n<li>public</li>\n</ul>\n</li>\n<li><p>保护</p>\n<ul>\n<li>protected</li>\n</ul>\n</li>\n<li><p>私有</p>\n<ul>\n<li>private</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义依赖关系</p>\n<ul>\n<li><p>属于不同类的两个对象a、b的四种连接可见度</p>\n<ul>\n<li><p>全局(global)</p>\n</li>\n<li><p>参数(parameter)</p>\n</li>\n<li><p>局部(local)</p>\n</li>\n<li><p>域(field)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义关联关系</p>\n<ul>\n<li><p>进一步明确或改进细节内容</p>\n<ul>\n<li><p>聚集还是组合</p>\n</li>\n<li><p>属性还是组合</p>\n</li>\n<li><p>关联的方向</p>\n</li>\n<li><p>关联类</p>\n</li>\n<li><p>确定重数</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义泛化关系</p>\n</li>\n<li><p>处理非功能性需求</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"八、编码与测试\"><a href=\"#八、编码与测试\" class=\"headerlink\" title=\"八、编码与测试\"></a>八、编码与测试</h3><h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li><p>概述</p>\n<ul>\n<li><p>目的</p>\n<ul>\n<li>把详细设计的结果“翻译”成选定的程序设计语言书写的源程序</li>\n</ul>\n</li>\n<li><p>编码风格</p>\n<ul>\n<li><p>使用标准的控制结构</p>\n</li>\n<li><p>实现源程序的文档化</p>\n<ul>\n<li><p>有意义的变量名称</p>\n</li>\n<li><p>适当的注释</p>\n</li>\n<li><p>标准的书写格式</p>\n</li>\n</ul>\n</li>\n<li><p>满足用户友好的输入输出风格</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>编码语言</p>\n<ul>\n<li><p>基础语言</p>\n<ul>\n<li><p>FORTRAN</p>\n</li>\n<li><p>COBOL</p>\n</li>\n<li><p>BASIC</p>\n</li>\n</ul>\n</li>\n<li><p>结构化语言</p>\n<ul>\n<li><p>C</p>\n</li>\n<li><p>Pascal</p>\n</li>\n<li><p>Ada</p>\n</li>\n</ul>\n</li>\n<li><p>面向对象语言</p>\n<ul>\n<li><p>C++</p>\n</li>\n<li><p>Java</p>\n</li>\n<li><p>C#</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ul>\n<li><p>多模块程序的测试策略</p>\n<ul>\n<li><p>层次性</p>\n<ul>\n<li><p>单元测试(unit testing)</p>\n<ul>\n<li><p>编译</p>\n</li>\n<li><p>静态分析器检查</p>\n</li>\n<li><p>代码评审</p>\n<ul>\n<li><p>办公桌检查</p>\n</li>\n<li><p>小组会</p>\n<ul>\n<li><p>走查</p>\n</li>\n<li><p>代码会审</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>动态测试</p>\n<ul>\n<li><p>黑盒</p>\n</li>\n<li><p>白盒</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集成测试(integration testing)</p>\n<ul>\n<li><p>策略</p>\n<ul>\n<li><p>自顶向下</p>\n</li>\n<li><p>由底向上</p>\n</li>\n<li><p>混合方式</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高级测试</p>\n<ul>\n<li><p>确认测试(validation testing)</p>\n<ul>\n<li><p>有效性测试（黑盒测试）和配置复审</p>\n</li>\n<li><p>验收测试</p>\n</li>\n<li><p>α与β测试</p>\n</li>\n</ul>\n</li>\n<li><p>系统测试(system testing)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>终止测试的标准</p>\n<ul>\n<li><p>规定测试策略和应达目标</p>\n</li>\n<li><p>规定至少要查出的错误数量</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象系统的测试</p>\n<ul>\n<li><p>OO软件系统需要比传统软件系统更多的测试</p>\n</li>\n<li><p>OO软件的测试策略</p>\n<ul>\n<li><p>单元测试</p>\n<ul>\n<li><p>单元</p>\n<ul>\n<li>封装的类和对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集成测试</p>\n<ul>\n<li><p>只能进行基于黑盒方法的集成测试</p>\n</li>\n<li><p>测试策略</p>\n<ul>\n<li><p>基于线程的测试</p>\n</li>\n<li><p>基于使用的测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高级测试</p>\n<ul>\n<li><p>确认测试</p>\n</li>\n<li><p>系统测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"四、面向对象与UML\"><a href=\"#四、面向对象与UML\" class=\"headerlink\" title=\"四、面向对象与ＵＭＬ\"></a>四、面向对象与ＵＭＬ</h3><h4 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h4><ul>\n<li><p>对象和类</p>\n<ul>\n<li><p>对象</p>\n<ul>\n<li><p>面向对象技术的核心</p>\n</li>\n<li><p>封装体</p>\n<ul>\n<li>数据以及在其上操作</li>\n</ul>\n</li>\n<li><p>集合</p>\n<ul>\n<li>是具有唯一对象名和固定对外接口的一组属性和操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>类</p>\n<ul>\n<li><p>一组相似的对象的共性抽象</p>\n</li>\n<li><p>有效模板</p>\n<ul>\n<li>创建对象</li>\n</ul>\n</li>\n<li><p>工具</p>\n<ul>\n<li>实现抽象数据类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象的基本特征</p>\n<ul>\n<li><p>抽象abstraction</p>\n<ul>\n<li><p>在某个侧面来表示某个物体或概念</p>\n</li>\n<li><p>忽略主题中于当前目标无关的因素</p>\n</li>\n</ul>\n</li>\n<li><p>封装encapsulation</p>\n<ul>\n<li><p>把操作和数据包围起来</p>\n</li>\n<li><p>对数据的访问只通过已定义的接口来完成</p>\n</li>\n</ul>\n</li>\n<li><p>继承inheritance</p>\n<ul>\n<li><p>类的层次模型</p>\n</li>\n<li><p>一种表述共性的方法</p>\n</li>\n</ul>\n</li>\n<li><p>多态polymorphism</p>\n<ul>\n<li>不同类的对象对同一消息执行不同的处理</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>优点</p>\n<ul>\n<li><p>提高软件系统的</p>\n<ul>\n<li><p>可复用性</p>\n</li>\n<li><p>可扩展性</p>\n</li>\n<li><p>可维护性</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"UML\"><a href=\"#UML\" class=\"headerlink\" title=\"UML\"></a>UML</h4><ul>\n<li><p>概念</p>\n<ul>\n<li><p>统一建模语言Unified modeling language</p>\n</li>\n<li><p>基于面向对象的可视化建模语言</p>\n</li>\n<li><p>表示</p>\n<ul>\n<li><p>用图表示它的语法</p>\n</li>\n<li><p>用元模型表达它的语义</p>\n</li>\n<li><p>采用模型来描述系统的结构（或静态特征）及行为（或动态特征）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>组成</p>\n<ul>\n<li><p>两类模型元素</p>\n<ul>\n<li><p>表示概念</p>\n</li>\n<li><p>表示连接关系</p>\n<ul>\n<li><p>官时饭依剧组</p>\n</li>\n<li><p>关联</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>实现</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>泛化（继承）</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>依赖</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>聚集（聚合）</p>\n<ul>\n<li></li>\n</ul>\n</li>\n<li><p>组合</p>\n<ul>\n<li><p>“部分”不能独立于“整体”而存在</p>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>四个抽象层次</p>\n<ul>\n<li><p>元元模型</p>\n<ul>\n<li>描述元模型</li>\n</ul>\n</li>\n<li><p>元模型</p>\n<ul>\n<li>描述模型</li>\n</ul>\n</li>\n<li><p>模型</p>\n<ul>\n<li>描述信息领域</li>\n</ul>\n</li>\n<li><p>用户模型</p>\n<ul>\n<li>模型的实例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图和视图</p>\n<ul>\n<li><p>图diagram</p>\n<ul>\n<li><p>静态图</p>\n<ul>\n<li><p>用例图</p>\n<ul>\n<li><p>用例之间的关系</p>\n<ul>\n<li><p>扩展关系</p>\n</li>\n<li><p>包含关系</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>类图</p>\n<ul>\n<li><p>可见性</p>\n<ul>\n<li><p>public +</p>\n</li>\n<li><p>private -</p>\n</li>\n<li><p>protected #</p>\n</li>\n</ul>\n</li>\n<li><p>操作的语法</p>\n<ul>\n<li>可见性 操作名(参数表) : 返回类型{约束特性}</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>对象图</p>\n</li>\n<li><p>构件图</p>\n</li>\n<li><p>部署图</p>\n</li>\n</ul>\n</li>\n<li><p>动态图</p>\n<ul>\n<li><p>状态图</p>\n<ul>\n<li><p>描述</p>\n<ul>\n<li><p>一个特定对象的所有可能状态</p>\n</li>\n<li><p>引起其状态转移的事件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>时序图</p>\n</li>\n<li><p>协作图</p>\n</li>\n<li><p>活动图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>视图view</p>\n<ul>\n<li><p>用例视图</p>\n</li>\n<li><p>逻辑视图</p>\n</li>\n<li><p>进程视图</p>\n</li>\n<li><p>构件视图</p>\n</li>\n<li><p>部署视图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>同一标准</p>\n</li>\n<li><p>面向对象</p>\n</li>\n<li><p>表达能力强大、可视化</p>\n</li>\n</ul>\n</li>\n<li><p>应用</p>\n<ul>\n<li>UML模型可作为测试阶段的依据</li>\n</ul>\n</li>\n<li><p>建模机制</p>\n<ul>\n<li><p>静态建模</p>\n<ul>\n<li><p>由5图表示</p>\n<ul>\n<li><p>用泪兑狗布</p>\n</li>\n<li><p>用例图</p>\n</li>\n<li><p>类图</p>\n</li>\n<li><p>对象图</p>\n</li>\n<li><p>构件图</p>\n</li>\n<li><p>部署图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>动态建模</p>\n<ul>\n<li><p>由4图表示</p>\n<ul>\n<li><p>壮士卸货</p>\n</li>\n<li><p>状态图</p>\n</li>\n<li><p>时序图</p>\n</li>\n<li><p>协作图</p>\n</li>\n<li><p>活动图</p>\n</li>\n</ul>\n</li>\n<li><p>消息</p>\n<ul>\n<li><p>简单消息</p>\n</li>\n<li><p>同步消息</p>\n</li>\n<li><p>异步消息</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"物理架构建模\"><a href=\"#物理架构建模\" class=\"headerlink\" title=\"物理架构建模\"></a>物理架构建模</h4><h4 id=\"UML工具\"><a href=\"#UML工具\" class=\"headerlink\" title=\"UML工具\"></a>UML工具</h4><ul>\n<li><p>Rational Rose</p>\n<ul>\n<li><p>对软件系统进行面向对象分析和设计的可视化工具</p>\n</li>\n<li><p>Rose模型</p>\n<ul>\n<li><p>4个视图</p>\n<ul>\n<li><p>用例视图</p>\n</li>\n<li><p>逻辑视图</p>\n</li>\n<li><p>构件视图</p>\n</li>\n<li><p>部署视图</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>StarUML</p>\n<ul>\n<li>运行在Windows上的UML&#x2F;MDA平台</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"五、需求工程与需求分析\"><a href=\"#五、需求工程与需求分析\" class=\"headerlink\" title=\"五、需求工程与需求分析\"></a>五、需求工程与需求分析</h3><h4 id=\"软件需求工程\"><a href=\"#软件需求工程\" class=\"headerlink\" title=\"软件需求工程\"></a>软件需求工程</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>一个软件系统必须遵循的条件或具备的能力</p>\n<ul>\n<li><p>系统的外部行为</p>\n<ul>\n<li>用户解决问题或达到目标所需具有的条件或能力</li>\n</ul>\n</li>\n<li><p>系统的内部特性</p>\n<ul>\n<li>系统为了满足合同、规范或其他规定文档所需具有的条件或能力</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>3个层次</p>\n<ul>\n<li><p>业务需求</p>\n<ul>\n<li>项目愿景和范围</li>\n</ul>\n</li>\n<li><p>用户需求</p>\n<ul>\n<li><p>用例模型文档</p>\n</li>\n<li><p>质量属性</p>\n</li>\n</ul>\n</li>\n<li><p>功能需求</p>\n<ul>\n<li>SRS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>6个特性</p>\n<ul>\n<li><p>功能性</p>\n<ul>\n<li><p>普通功能</p>\n</li>\n<li><p>全局性功能</p>\n</li>\n</ul>\n</li>\n<li><p>可用性</p>\n</li>\n<li><p>可靠性</p>\n</li>\n<li><p>性能</p>\n</li>\n<li><p>可支持性</p>\n</li>\n<li><p>设计约束</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h4><ul>\n<li><p>目的</p>\n<ul>\n<li><p>为待开发的软件系统进行需求定义与分析</p>\n</li>\n<li><p>并建立一个需求模型</p>\n</li>\n</ul>\n</li>\n<li><p>4个步骤</p>\n<ul>\n<li><p>需求获取</p>\n<ul>\n<li><p>常用方法</p>\n<ul>\n<li><p>常规方法</p>\n<ul>\n<li><p>建立联合分析小组</p>\n<ul>\n<li><p>用户</p>\n</li>\n<li><p>系统分析员</p>\n</li>\n<li><p>领域专家</p>\n</li>\n</ul>\n</li>\n<li><p>用户访谈</p>\n</li>\n<li><p>问题分析与确认</p>\n</li>\n</ul>\n</li>\n<li><p>快速原型法</p>\n<ul>\n<li><p>获取两个层面上的需求</p>\n<ul>\n<li><p>联机屏幕</p>\n</li>\n<li><p>模拟系统的外部特征</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>需求建模</p>\n<ul>\n<li><p>需求模型</p>\n<ul>\n<li><p>结构化需求模型</p>\n</li>\n<li><p>面向对象需求模型</p>\n<ul>\n<li><p>3个组成部分</p>\n<ul>\n<li><p>用例模型</p>\n<ul>\n<li><p>用例图</p>\n</li>\n<li><p>用例规约</p>\n</li>\n</ul>\n</li>\n<li><p>补充规约</p>\n</li>\n<li><p>术语表</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象需求建模</p>\n<ul>\n<li><p>4步</p>\n<ul>\n<li><p>画用例图</p>\n<ul>\n<li><p>确定参与者</p>\n</li>\n<li><p>确定用例</p>\n</li>\n<li><p>绘制和检查用例图</p>\n</li>\n</ul>\n</li>\n<li><p>写用例规约</p>\n<ul>\n<li><p>用例规约内容</p>\n<ul>\n<li><p>简要说明</p>\n</li>\n<li><p>事件流</p>\n<ul>\n<li><p>基本流</p>\n</li>\n<li><p>备选流</p>\n</li>\n</ul>\n</li>\n<li><p>特殊需求</p>\n</li>\n<li><p>前置条件和后置条件</p>\n</li>\n</ul>\n</li>\n<li><p>用例模式的检查</p>\n<ul>\n<li><p>功能需求的完备性</p>\n</li>\n<li><p>模型是否易于理解</p>\n</li>\n<li><p>是否存在不一致性</p>\n</li>\n<li><p>避免二义性语义</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>描述补充规约</p>\n</li>\n<li><p>编写术语表</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>需求描述</p>\n<ul>\n<li><p>编写SRS</p>\n<ul>\n<li><p>主体</p>\n<ul>\n<li><p>描述软件系统的分析模型</p>\n<ul>\n<li><p>信息描述</p>\n<ul>\n<li>软件所含信息的详细描述</li>\n</ul>\n</li>\n<li><p>功能描述</p>\n<ul>\n<li>软件功能需求的说明</li>\n</ul>\n</li>\n<li><p>行为描述</p>\n<ul>\n<li>系统状态变化以及事件和动作的叙述</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>需求验证</p>\n<ul>\n<li>验证SRS</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"需求管理\"><a href=\"#需求管理\" class=\"headerlink\" title=\"需求管理\"></a>需求管理</h3><ul>\n<li><p>需求变更</p>\n<ul>\n<li><p>流程</p>\n<ul>\n<li><p>变更申请</p>\n</li>\n<li><p>变更审批</p>\n</li>\n<li><p>变更修改</p>\n</li>\n<li><p>变更关闭</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"六、面向对象分析\"><a href=\"#六、面向对象分析\" class=\"headerlink\" title=\"六、面向对象分析\"></a>六、面向对象分析</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li><p>面向对象软件分析(object-oriented analysis,OOA)</p>\n<ul>\n<li><p>主要任务</p>\n<ul>\n<li><p>理解用户需求</p>\n<ul>\n<li><p>理解和分析用户需求</p>\n</li>\n<li><p>明确所开发的软件系统的职责</p>\n</li>\n<li><p>形成文件并规范地加以表述</p>\n</li>\n</ul>\n</li>\n<li><p>分析，提取类和对象，并结合分析进行建模</p>\n</li>\n</ul>\n</li>\n<li><p>OOA模型</p>\n<ul>\n<li><p>以用例模型为主体的需求模型（核心）</p>\n<ul>\n<li><p>类&#x2F;对象模型</p>\n</li>\n<li><p>对象-关系模型</p>\n</li>\n<li><p>对象-行为模型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>优点</p>\n<ul>\n<li><p>对需求的变化具有较强的适应性</p>\n</li>\n<li><p>支持软件复用</p>\n</li>\n</ul>\n</li>\n<li><p>分析模型的一般特点</p>\n<ul>\n<li><p>全面覆盖软件的功能需求</p>\n</li>\n<li><p>分析模型与软件的实现 无关</p>\n</li>\n<li><p>分析模型的表述方法与所采用的分析技术有关</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象分析模型</p>\n<ul>\n<li><p>五层次模型</p>\n<ul>\n<li><p>类&#x2F;对象层</p>\n</li>\n<li><p>属性层</p>\n</li>\n<li><p>服务层</p>\n<ul>\n<li><p>动态属性</p>\n<ul>\n<li><p>对象</p>\n</li>\n<li><p>类</p>\n</li>\n</ul>\n</li>\n<li><p>消息通信</p>\n<ul>\n<li>对象之间</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构层</p>\n<ul>\n<li><p>对象和类的层次结构关系</p>\n<ul>\n<li><p>包含</p>\n</li>\n<li><p>继承</p>\n</li>\n<li><p>关联</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>主题层</p>\n<ul>\n<li><p>每个主题是一个子系统</p>\n<ul>\n<li>包含有关对象</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>OOA方法</p>\n<ul>\n<li><p>共同特征</p>\n<ul>\n<li><p>类和类层次的表示</p>\n</li>\n<li><p>建立对象-关系模型</p>\n</li>\n<li><p>建立对象-行为模型</p>\n</li>\n</ul>\n</li>\n<li><p>建模步骤</p>\n<ul>\n<li><p>需求理解</p>\n</li>\n<li><p>定义类和对象</p>\n</li>\n<li><p>表示对象的属性和操作</p>\n</li>\n<li><p>表示类的结构和层次</p>\n</li>\n<li><p>建立对象-关系模型</p>\n</li>\n<li><p>建立对象-行为模型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象软件开发的全（迭代）过程</p>\n<ul>\n<li><ol>\n<li>OOA（分析）</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>OOD（设计）</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>OOP（编程）</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>OOT（测试）</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象分析建模\"><a href=\"#面向对象分析建模\" class=\"headerlink\" title=\"面向对象分析建模\"></a>面向对象分析建模</h4><ul>\n<li><p>识别与确定分析类</p>\n<ul>\n<li><p>分析类的类型</p>\n<ul>\n<li><p>边界类</p>\n<ul>\n<li><p>提供接口</p>\n<ul>\n<li><p>对参与者</p>\n</li>\n<li><p>对外部系统交互协议</p>\n</li>\n</ul>\n</li>\n<li><p>种类</p>\n<ul>\n<li><p>用户界面类</p>\n</li>\n<li><p>系统接口类</p>\n</li>\n<li><p>设备接口类</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>控制类</p>\n<ul>\n<li><p>封装</p>\n<ul>\n<li>一个或几个用例所特有的流程控制行为</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>实体类</p>\n<ul>\n<li>存储和管理系统中的信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>查找分析类</p>\n<ul>\n<li><p>为每对 参与者&#x2F;用例 确定一个边界类</p>\n</li>\n<li><p>为每个用例设置一个控制类</p>\n</li>\n<li><p>确定相关的各个实体（包括属性与方法）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立对象-行为模型（动态模型）</p>\n<ul>\n<li><p>时序图</p>\n</li>\n<li><p>协作图</p>\n</li>\n<li><p>为分析类分配职责</p>\n</li>\n<li><p>状态图</p>\n</li>\n</ul>\n</li>\n<li><p>建立对象-关系模型（静态模型）</p>\n<ul>\n<li><p>分析类的属性</p>\n</li>\n<li><p>分析类的关联</p>\n</li>\n<li><p>分析类图</p>\n</li>\n<li><p>分析类的合并</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"七、面向对象设计\"><a href=\"#七、面向对象设计\" class=\"headerlink\" title=\"七、面向对象设计\"></a>七、面向对象设计</h3><h4 id=\"软件设计\"><a href=\"#软件设计\" class=\"headerlink\" title=\"软件设计\"></a>软件设计</h4><ul>\n<li><p>概念</p>\n<ul>\n<li><p>两种主流的设计方法</p>\n<ul>\n<li><p>结构化软件设计</p>\n<ul>\n<li>以结构化程序设计为基础</li>\n</ul>\n</li>\n<li><p>面向对象软件设计</p>\n<ul>\n<li>由面向对象方法导出</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模块与构件</p>\n<ul>\n<li><p>模块(module)</p>\n<ul>\n<li>一个拥有明确定义的输入、输出和特性的程序实体</li>\n</ul>\n</li>\n<li><p>软件构件(software component)</p>\n<ul>\n<li><p>可重复使用的软件组件</p>\n</li>\n<li><p>现有可复用的构件</p>\n<ul>\n<li>大多是在对象的基础上创建的</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>抽象(abstraction)与细化(refinement)</p>\n</li>\n<li><p>信息隐藏(information hiding)</p>\n<ul>\n<li><p>把系统分解为模块时应遵守的指导思想</p>\n</li>\n<li><p>发展</p>\n<ul>\n<li><p>数据封装(data encapsulation)</p>\n</li>\n<li><p>抽象数据类型(abstract datatype)</p>\n</li>\n<li><p>类和对象</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件复用</p>\n</li>\n</ul>\n</li>\n<li><p>任务</p>\n<ul>\n<li><p>将分析现阶段建立的分析模型转变为软件设计模型，确保最终能平滑地过渡到程序代码</p>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>数据设计</p>\n<ul>\n<li>将信息模型转变为数据结构</li>\n</ul>\n</li>\n<li><p>体系结构设计</p>\n<ul>\n<li>定义软件主要组成部件之间的关系</li>\n</ul>\n</li>\n<li><p>接口设计</p>\n<ul>\n<li><p>软件内部</p>\n</li>\n<li><p>软件和接口系统之间</p>\n</li>\n<li><p>软件与人之间</p>\n</li>\n<li><p>数据流和控制流</p>\n</li>\n</ul>\n</li>\n<li><p>过程设计</p>\n<ul>\n<li>将软件体系结构的组成部件转变为对软件组件的过程性描述</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模块化设计(modular design)</p>\n<ul>\n<li><p>目的</p>\n<ul>\n<li>按照规定的原则把大型软件划分为一个个较小的、相对独立但相互关联的模块</li>\n</ul>\n</li>\n<li><p>指导思想</p>\n<ul>\n<li><p>分解(decomposition)</p>\n</li>\n<li><p>模块独立性(module independence)</p>\n<ul>\n<li><p>度量</p>\n<ul>\n<li><p>内聚(cohesion)</p>\n<ul>\n<li><p>也称为块内联系或模块强度</p>\n</li>\n<li><p>指模块内部各个成分之间的联系</p>\n</li>\n<li><p>是从功能的角度对模块内部聚合能力的量度</p>\n</li>\n<li><p>强度分类</p>\n<ul>\n<li><p>低内聚</p>\n<ul>\n<li><p>偶然性内聚</p>\n</li>\n<li><p>逻辑性内聚</p>\n</li>\n<li><p>时间性内聚</p>\n</li>\n</ul>\n</li>\n<li><p>中内聚</p>\n<ul>\n<li><p>过程性内聚</p>\n</li>\n<li><p>通信性内聚</p>\n</li>\n</ul>\n</li>\n<li><p>高内聚</p>\n<ul>\n<li><p>顺序性内聚</p>\n</li>\n<li><p>功能性内聚</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>耦合(coupling)</p>\n<ul>\n<li><p>又称块间联系</p>\n</li>\n<li><p>指一个模块与其他模块间的联系</p>\n</li>\n<li><p>是对软件内部块间联系的度量</p>\n</li>\n<li><p>强度分类</p>\n<ul>\n<li><p>弱耦合</p>\n<ul>\n<li><p>非直接耦合</p>\n</li>\n<li><p>数据耦合</p>\n</li>\n<li><p>特征耦合</p>\n</li>\n</ul>\n</li>\n<li><p>中耦合</p>\n<ul>\n<li>控制耦合</li>\n</ul>\n</li>\n<li><p>较强耦合</p>\n<ul>\n<li><p>外部耦合</p>\n</li>\n<li><p>公共耦合</p>\n</li>\n</ul>\n</li>\n<li><p>强耦合</p>\n<ul>\n<li>内容耦合</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象设计建模\"><a href=\"#面向对象设计建模\" class=\"headerlink\" title=\"面向对象设计建模\"></a>面向对象设计建模</h4><ul>\n<li><p>OO设计模型</p>\n<ul>\n<li><p>责任设计</p>\n</li>\n<li><p>消息设计</p>\n</li>\n<li><p>类和对象设计</p>\n</li>\n<li><p>系统架构设计</p>\n</li>\n</ul>\n</li>\n<li><p>OO设计的任务</p>\n<ul>\n<li><p>系统架构设计</p>\n<ul>\n<li><p>系统架构师</p>\n</li>\n<li><p>软件系统架构</p>\n<ul>\n<li><p>指系统主要组成元素的组织或结构，以及其他全局性决策</p>\n</li>\n<li><p>组成元素之间通过接口进行交互</p>\n</li>\n</ul>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>系统高层结构设计</p>\n</li>\n<li><p>确定设计元素</p>\n</li>\n<li><p>确定任务管理策略</p>\n</li>\n<li><p>实现分布式机制</p>\n</li>\n<li><p>设计数据存储方案</p>\n</li>\n<li><p>人机界面设计</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>系统元素设计</p>\n<ul>\n<li><p>软件设计师</p>\n</li>\n<li><p>系统元素</p>\n<ul>\n<li><p>类</p>\n</li>\n<li><p>子系统</p>\n</li>\n<li><p>接口</p>\n</li>\n<li><p>包</p>\n</li>\n<li><p>等等…</p>\n</li>\n</ul>\n</li>\n<li><p>系统元素设计</p>\n<ul>\n<li>对每一个设计元素进行详细的设计</li>\n</ul>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>类&#x2F;对象设计</p>\n</li>\n<li><p>子系统设计</p>\n</li>\n<li><p>包设计</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>模式的应用</p>\n<ul>\n<li><p>模式的定义</p>\n<ul>\n<li>解决某一类问题的方法论，对通用问题的通用解决方案</li>\n</ul>\n</li>\n<li><p>软件模式的分类</p>\n<ul>\n<li><p>架构模式</p>\n<ul>\n<li>软件系统的基本结构组织方案</li>\n</ul>\n</li>\n<li><p>设计模式</p>\n<ul>\n<li>面向对象的具体设计问题的解决方案</li>\n</ul>\n</li>\n<li><p>习惯用法</p>\n<ul>\n<li>针对具体程序设计语言的使用模式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"系统架构设计\"><a href=\"#系统架构设计\" class=\"headerlink\" title=\"系统架构设计\"></a>系统架构设计</h4><ul>\n<li><p>系统高层结构设计</p>\n<ul>\n<li><p>4个层次</p>\n<ul>\n<li><p>应用子系统层</p>\n</li>\n<li><p>业务专用层</p>\n</li>\n<li><p>中间件层</p>\n</li>\n<li><p>系统软件层</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>确定设计元素</p>\n<ul>\n<li><p>映射分析类到设计元素</p>\n</li>\n<li><p>确定子系统</p>\n<ul>\n<li><p>指导性参考原则</p>\n<ul>\n<li><p>对象协作原则</p>\n</li>\n<li><p>可选性原则</p>\n</li>\n<li><p>用户界面原则</p>\n</li>\n<li><p>参与者原则</p>\n</li>\n<li><p>耦合和内聚原则</p>\n</li>\n<li><p>分布原则</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义子系统接口</p>\n<ul>\n<li><p>步骤</p>\n<ul>\n<li><ol>\n<li>为子系统确定一个备选接口集</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>寻找接口之间的相似点</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>定义接口依赖关系</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>将接口映射到子系统</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>定义接口所指定的行为</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>表述</p>\n<ul>\n<li><p>在相应类的名称前加上前缀”I-“</p>\n</li>\n<li><p>或将类加上”&lt;<interface>&gt;”</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>任务管理策略</p>\n<ul>\n<li><p>并行需求</p>\n<ul>\n<li><p>3种解决方案</p>\n<ul>\n<li><p>多处理器</p>\n</li>\n<li><p>操作系统</p>\n</li>\n<li><p>应用程序</p>\n</li>\n</ul>\n</li>\n<li><p>两种实现并行需求的技术</p>\n<ul>\n<li><p>引进任务管理部件</p>\n</li>\n<li><p>基于进程和线程的控制</p>\n<ul>\n<li><p>进程和线程建模</p>\n<ul>\n<li><p>标识</p>\n<ul>\n<li><p>进程</p>\n<ul>\n<li>&lt;<process>&gt;</li>\n</ul>\n</li>\n<li><p>线程</p>\n<ul>\n<li>&lt;<thread>&gt;</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>进程</p>\n<ul>\n<li><p>进程间的通信是依赖关系</p>\n</li>\n<li><p>对进程建模可采用</p>\n<ul>\n<li><p>类图</p>\n</li>\n<li><p>构件图</p>\n</li>\n</ul>\n</li>\n<li><p>进程间联系</p>\n<ul>\n<li><p>独立的进程</p>\n<ul>\n<li>依赖关系</li>\n</ul>\n</li>\n<li><p>有线程</p>\n<ul>\n<li>组合关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>确定进程的生存周期</p>\n<ul>\n<li><p>单进程架构</p>\n<ul>\n<li>进程在应用程序开始和结束时创建和销毁</li>\n</ul>\n</li>\n<li><p>多进程架构</p>\n<ul>\n<li><p>新进程（或线程）在应用程序开始时</p>\n<ul>\n<li><p>从初始进程中产生或派生</p>\n</li>\n<li><p>必须显式销毁</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>分布式实现机制</p>\n<ul>\n<li><p>确定网络拓扑配置</p>\n<ul>\n<li><p>网络的物理布局（包括位置）</p>\n</li>\n<li><p>网络的结点及结点的配置与性能</p>\n</li>\n<li><p>网络中的各网段带宽</p>\n</li>\n<li><p>网络中的冗余路径（容错能力）</p>\n</li>\n<li><p>结点的分类</p>\n</li>\n</ul>\n</li>\n<li><p>将设计元素分配到网络结点</p>\n</li>\n<li><p>设计分布处理机制</p>\n<ul>\n<li><p>需要底层类库的支持</p>\n<ul>\n<li><p>Microsoft.NET平台</p>\n</li>\n<li><p>Java平台</p>\n<ul>\n<li><p>远程方法调用(remote method invoaction, RMI)</p>\n<ul>\n<li><ol>\n<li>引入可直接利用的类库</li>\n</ol>\n<ul>\n<li><p>Naming</p>\n</li>\n<li><p>Serializable</p>\n</li>\n<li><p>Remote</p>\n</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>建立一些带有”&lt;<role>&gt;”标识的类，代表实际设计元素</li>\n</ol>\n<ul>\n<li><p>&lt;<role>&gt; SampleDistributedClass</p>\n<ul>\n<li>分布类</li>\n</ul>\n</li>\n<li><p>&lt;<role>&gt; SampleDistributedClassClient</p>\n<ul>\n<li>分布类的客户</li>\n</ul>\n</li>\n<li><p>&lt;<role>&gt; SamplePassedData</p>\n<ul>\n<li>被作为参数传递的对象所对应的设计元素</li>\n</ul>\n</li>\n<li><p>&lt;<interface>&gt; ISampleDistributedClass</p>\n<ul>\n<li>被分布到异地的分布类在本地的“代言人”</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>描述分布机制的静态结构</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数据存储设计</p>\n</li>\n<li><p>人机交互设计</p>\n<ul>\n<li><ol>\n<li>根据用户特点设计不同界面</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>增加用户界面专用的类与对象</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>利用快速原型演示，来改进界面设计</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"系统元素设计\"><a href=\"#系统元素设计\" class=\"headerlink\" title=\"系统元素设计\"></a>系统元素设计</h4><ul>\n<li><p>子系统设计</p>\n<ul>\n<li><ol>\n<li>将子系统行为分配给子系统元素</li>\n</ol>\n</li>\n<li><p>2.描述子系统元素</p>\n</li>\n<li><ol start=\"3\">\n<li>说明子系统的依赖关系</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>分包设计</p>\n<ul>\n<li><p>分包原则</p>\n<ul>\n<li><p>将边界类打包</p>\n<ul>\n<li><p>接口可能被替换</p>\n<ul>\n<li>将接口与设计模型的其他部分隔离开</li>\n</ul>\n</li>\n<li><p>接口不易被替换</p>\n<ul>\n<li>对系统服务分包，将边界类和功能相关的实体类及控制类放置在一起</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>将功能相关的类打包</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>类&#x2F;对象设计</p>\n<ul>\n<li><p>创建初始设计类</p>\n<ul>\n<li><p>设计边界类</p>\n</li>\n<li><p>设计实体类</p>\n</li>\n<li><p>设计控制类</p>\n<ul>\n<li><p>复杂性</p>\n</li>\n<li><p>变更的可能性</p>\n</li>\n<li><p>分布和性能</p>\n</li>\n<li><p>事物管理</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义操作</p>\n<ul>\n<li><p>命名和说明操作</p>\n</li>\n<li><p>定义操作可见性</p>\n</li>\n<li><p>定义操作的作用域</p>\n</li>\n</ul>\n</li>\n<li><p>定义方法</p>\n</li>\n<li><p>定义状态</p>\n<ul>\n<li><p>确定一个类是否具有重要的动态行为</p>\n<ul>\n<li><p>检查类的属性</p>\n</li>\n<li><p>检查类的关联</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义属性</p>\n<ul>\n<li><p>属性名</p>\n</li>\n<li><p>属性类型</p>\n</li>\n<li><p>属性的默认值或初始值</p>\n</li>\n<li><p>属性的可见性</p>\n<ul>\n<li><p>公有</p>\n<ul>\n<li>public</li>\n</ul>\n</li>\n<li><p>保护</p>\n<ul>\n<li>protected</li>\n</ul>\n</li>\n<li><p>私有</p>\n<ul>\n<li>private</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义依赖关系</p>\n<ul>\n<li><p>属于不同类的两个对象a、b的四种连接可见度</p>\n<ul>\n<li><p>全局(global)</p>\n</li>\n<li><p>参数(parameter)</p>\n</li>\n<li><p>局部(local)</p>\n</li>\n<li><p>域(field)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义关联关系</p>\n<ul>\n<li><p>进一步明确或改进细节内容</p>\n<ul>\n<li><p>聚集还是组合</p>\n</li>\n<li><p>属性还是组合</p>\n</li>\n<li><p>关联的方向</p>\n</li>\n<li><p>关联类</p>\n</li>\n<li><p>确定重数</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>定义泛化关系</p>\n</li>\n<li><p>处理非功能性需求</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"八、编码与测试\"><a href=\"#八、编码与测试\" class=\"headerlink\" title=\"八、编码与测试\"></a>八、编码与测试</h3><h4 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h4><ul>\n<li><p>概述</p>\n<ul>\n<li><p>目的</p>\n<ul>\n<li>把详细设计的结果“翻译”成选定的程序设计语言书写的源程序</li>\n</ul>\n</li>\n<li><p>编码风格</p>\n<ul>\n<li><p>使用标准的控制结构</p>\n</li>\n<li><p>实现源程序的文档化</p>\n<ul>\n<li><p>有意义的变量名称</p>\n</li>\n<li><p>适当的注释</p>\n</li>\n<li><p>标准的书写格式</p>\n</li>\n</ul>\n</li>\n<li><p>满足用户友好的输入输出风格</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>编码语言</p>\n<ul>\n<li><p>基础语言</p>\n<ul>\n<li><p>FORTRAN</p>\n</li>\n<li><p>COBOL</p>\n</li>\n<li><p>BASIC</p>\n</li>\n</ul>\n</li>\n<li><p>结构化语言</p>\n<ul>\n<li><p>C</p>\n</li>\n<li><p>Pascal</p>\n</li>\n<li><p>Ada</p>\n</li>\n</ul>\n</li>\n<li><p>面向对象语言</p>\n<ul>\n<li><p>C++</p>\n</li>\n<li><p>Java</p>\n</li>\n<li><p>C#</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h4><ul>\n<li><p>多模块程序的测试策略</p>\n<ul>\n<li><p>层次性</p>\n<ul>\n<li><p>单元测试(unit testing)</p>\n<ul>\n<li><p>编译</p>\n</li>\n<li><p>静态分析器检查</p>\n</li>\n<li><p>代码评审</p>\n<ul>\n<li><p>办公桌检查</p>\n</li>\n<li><p>小组会</p>\n<ul>\n<li><p>走查</p>\n</li>\n<li><p>代码会审</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>动态测试</p>\n<ul>\n<li><p>黑盒</p>\n</li>\n<li><p>白盒</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集成测试(integration testing)</p>\n<ul>\n<li><p>策略</p>\n<ul>\n<li><p>自顶向下</p>\n</li>\n<li><p>由底向上</p>\n</li>\n<li><p>混合方式</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高级测试</p>\n<ul>\n<li><p>确认测试(validation testing)</p>\n<ul>\n<li><p>有效性测试（黑盒测试）和配置复审</p>\n</li>\n<li><p>验收测试</p>\n</li>\n<li><p>α与β测试</p>\n</li>\n</ul>\n</li>\n<li><p>系统测试(system testing)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>终止测试的标准</p>\n<ul>\n<li><p>规定测试策略和应达目标</p>\n</li>\n<li><p>规定至少要查出的错误数量</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象系统的测试</p>\n<ul>\n<li><p>OO软件系统需要比传统软件系统更多的测试</p>\n</li>\n<li><p>OO软件的测试策略</p>\n<ul>\n<li><p>单元测试</p>\n<ul>\n<li><p>单元</p>\n<ul>\n<li>封装的类和对象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>集成测试</p>\n<ul>\n<li><p>只能进行基于黑盒方法的集成测试</p>\n</li>\n<li><p>测试策略</p>\n<ul>\n<li><p>基于线程的测试</p>\n</li>\n<li><p>基于使用的测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>高级测试</p>\n<ul>\n<li><p>确认测试</p>\n</li>\n<li><p>系统测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"软件工程（上）","date":"2024-10-12T04:00:00.000Z","_content":"\n\n\n### 一、绪论\n\n#### 软件\n\n- 定义\n\n\t- 软件\n\n\t\t- 软件 = 程序 + 数据 + 文档\n\n\t\t\t- 程序\n\n\t\t\t\t- 程序是为了解决某个特定问题的而用程序设计语言描述的适合计算机处理的语句序列\n\n\t\t\t- 数据\n\n\t\t\t\t- 是程序能正常操作信息的数据结构\n\n\t\t\t- 文档\n\n\t\t\t\t- 软件开发活动的记录\n\n\t\t- 软件是能够完成预定功能和性能的可执行的计算机程序，包括适用程序正常执行所需要的数据，以及有关描述程序操作和使用的文档\n\n- 特征\n\n\t- 不同与硬件\n\n\t\t- 设计\n\n\t\t- 制造\n\n\t\t- 维修\n\n#### 软件危机\n\n- 定义\n\n\t- 落后的\n\n\t\t- 软件生成方式\n\n\t- 无法满足\n\n\t\t- 迅速增长的计算机软件需求\n\n\t- 从而导致\n\n\t\t- 软件开发与维护过程种出现一系列严重问题的现象\n\n- 原因\n\n\t- 软件规模的扩大\n\n\t\t- 使软件复杂度的增加\n\n\t- 软件维护费用的急剧上升\n\n\t\t- 直接威胁计算机应用的扩大\n\n\t- 软件生产技术\n\n\t\t- 进步缓慢\n\n\t\t- 是加剧软件危机的重要原因\n\n#### 软件工程学的范畴\n\n- 软件开发方法学\n\n\t- 软件发展3阶段\n\n\t\t- 程序\n\n\t\t- 软件\n\n\t\t- 软件产品\n\n- 软件工具\n\n- 软件工程环境\n\n- 软件工程管理\n\n\t- 目的\n\n\t\t- 为了按照进度及预算完成软件计划\n\n\t\t- 实现预期的经济和社会效益\n\n#### 3种编程范型\n\n- 过程式编程范型\n\n\t- 着眼于程序的过程和基本控制结构\n\n\t- 粒度最小\n\n- 面向对象编程范型\n\n\t- 面向对象程序设计(object-oriented programming,OOP)\n\n\t- 着眼与程序中的对象\n\n\t\t- 粒度较大\n\n- 基于构件技术的编程范型\n\n\t- 基于构件的开发技术(component-based development,CBD)\n\n\t- 着眼与适合整个领域(domain)的类对象\n\n\t\t- 粒度最大\n\n#### 3代软件工程\n\n- 传统（经典）软件工程\n\n\t- 以结构化程序设计为基础\n\n\t- 可区分为\n\n\t\t- 瀑布模型\n\n\t\t- 原型模型等\n\n\t- 开发阶段\n\n\t\t- 结构化分析\n\n\t\t- 结构化设计\n\n\t\t- 面向过程编码\n\n\t\t- 软件测试\n\n- 面向对象软件工程\n\n\t- 以面向对象程序设计为基础\n\n\t- 开发阶段\n\n\t\t- OO分析与对象抽取\n\n\t\t- 对象详细设计\n\n\t\t- 面向对象的编码与测试\n\n- 基于构件的软件工程\n\n\t- 以软件复用为目标、领域工程为基础\n\n\t- 开发阶段\n\n\t\t- 领域分析和测试计划定制\n\n\t\t- 领域设计\n\n\t\t- 建立可复用构件库\n\n\t\t- 按“构件集成模型”查找与集成构件\n\n- 通用\n\n\t- 原理与方法\n\n\t\t- 分析先于设计\n\n\t\t- 设计先于编码\n\n\t\t- 使程序（的结构）适合于问题（的结构）\n\n\t- 开发方法\n\n\t\t- 分析与设计都应该提倡建立模型\n\n\t\t- 编码需遵循编码范型\n\n\t\t- 要加强软件工具的开发，不断改进以工具集成为特定的软件工程环境\n\n### 二、软件生存周期与软件过程\n\n#### 软件生存周期\n\n- 概念\n\n\t- 定义\n\n\t\t- 一个软件从开始立项起，到废弃不用止\n\n\t- 目的\n\n\t\t- 将生存周期划分为阶段\n\n\t\t\t- 使软件复杂性变得较易控制和管理\n\n- 主要活动\n\n\t- 1. 需求分析\n\n\t- 2. 软件分析\n\n\t\t- 从开发人员的视角对软件的需求模型进行分析\n\n\t- 3. 软件设计\n\n\t\t- 分为\n\n\t\t\t- 总体设计（概要设计）\n\n\t\t\t\t- 确定软件的总体结构和其他全局性的设计原则等\n\n\t\t\t- 详细设计\n\n\t\t\t\t- 确定软件的每一个部件的\n\n\t\t\t\t\t- 数据结构\n\n\t\t\t\t\t- 操作\n\n\t- 4. 编码（测试）\n\n\t\t- 按照选定的程序设计语言和可复用软件构件包，把设计文档翻译为源程序\n\n\t\t- 单元测试通常与编码同时进行\n\n\t- 5. 软件测试\n\n\t\t- 集成测试\n\n\t\t- 确认测试（交付测试）\n\n\t\t\t- 包括\n\n\t\t\t\t- α测试\n\n\t\t\t\t- β测试\n\n\t\t\t- 针对功能需求\n\n\t\t\t- 独立的测试工程师\n\n\t\t\t\t- 执行测试\n\n\t\t\t\t- 编写“测试报告”文档\n\n\t\t\t\t\t- 测试计划\n\n\t\t\t\t\t- 测试用例\n\n\t\t\t\t\t- 测试结果\n\n\t\t- 系统测试\n\n\t\t\t- 针对性能等非功能需求\n\n\t- 6. 运行维护\n\n#### 软件过程\n\n- 定义\n\n\t- 过程process\n\n\t\t- 人们随时间的流逝而进行的各种活动\n\n- 传统软件过程\n\n\t- 瀑布模型\n\n\t\t- 定义\n\n\t\t\t- 基于软件生存周期\n\n\t\t\t- 线性开发模型\n\n\t\t- 特点\n\n\t\t\t- 阶段间的顺序性和依赖性\n\n\t\t\t\t- 顺序性\n\n\t\t\t\t\t- 前一阶段完成后，后一阶段的工作才能开始\n\n\t\t\t\t- 依赖性\n\n\t\t\t\t\t- 前一阶段的输出文档是后一阶段的输入文档\n\n\t\t\t- 推迟实现的观点\n\n\t\t\t\t- 编码越早，开发时间越长\n\n\t\t\t- 保证质量的观点\n\n\t\t\t\t- 1. 每一阶段必须完成规定的文档\n\n\t\t\t\t- 2. 每一阶段都要对完成的文档进行复审\n\n\t\t\t- 存在的问题\n\n\t\t\t\t- 很难在开发的初始阶段彻底弄清软件需求\n\n\t- 快速原型模型\n\n\t\t- 中心思想\n\n\t\t\t- 先建立一个能够反映用户主要需求的原型\n\n\t\t\t- 让用户实际看到一个未来系统的概貌\n\n\t\t\t- 以便判断哪些功能是符合需要的，哪些方面需要改进\n\n\t\t\t- 然后将原型反复改进，直至建立完全符合用户要求的新系统\n\n\t\t- 开发方法\n\n\t\t\t- 只包括未来系统的的\n\n\t\t\t\t- 主要功能\n\n\t\t\t\t- 重要接口\n\n\t\t\t- 尽量使用能缩短开发周期的语言和工具\n\n\t\t\t- 把原型系统作为基础\n\n\t\t\t\t- 通过补充和修改获得最终的实际系统\n\n\t\t\t\t- 废弃大多数原型\n\n\t\t\t\t\t- 仅把建立原型的过程当作帮助定义软件需求的一种手段\n\n- 软件演化模型(evolutionary model)\n\n\t- 增量模型\n\n\t\t- 结合\n\n\t\t\t- 瀑布模型\n\n\t\t\t\t- 顺序特征\n\n\t\t\t- 快速原型模型\n\n\t\t\t\t- 迭代特征\n\n\t\t- 把软件看作一系列相互联系的增量(increments)\n\n\t\t\t- 每次迭代完成其中一个增量\n\n\t\t\t\t- 其中任一个增量的开发流程均可按...完成\n\n\t\t\t\t\t- 瀑布模型\n\n\t\t\t\t\t- 快速原型模型\n\n\t- 螺旋模型\n\n\t\t- 结合...基础上演变而成\n\n\t\t\t- 瀑布模型\n\n\t\t\t- 快速原型模型（增量模型）\n\n\t\t- 典型的迭代模型\n\n\t\t\t- 每轮螺旋均包含\n\n\t\t\t\t- 计划\n\n\t\t\t\t\t- 选定完成本轮螺旋所定目标的策略\n\n\t\t\t\t\t\t- 确定待开发系统的目标\n\n\t\t\t\t\t\t- 选择方案\n\n\t\t\t\t\t\t- 设定约束条件\n\n\t\t\t\t- 风险分析\n\n\t\t\t\t\t- 评估本轮螺旋可能存在的风险\n\n\t\t\t\t\t- 目的\n\n\t\t\t\t\t\t- 了解、分析并设法降低和排除\n\n\t\t\t\t\t\t\t- 因不确定因素导致的风险\n\n\t\t\t\t- 建立原型\n\n\t\t\t\t\t- 实现本轮螺旋的目标\n\n\t\t\t\t- 用户评审\n\n\t\t\t- 如果开发小组对项目的需求\n\n\t\t\t\t- 有较好的理解\n\n\t\t\t\t\t- 第一圈可直接用瀑布模型\n\n\t\t\t\t- 反之\n\n\t\t\t\t\t- 需要经过多圈螺线，开发一个或多个原型\n\n\t\t- 特点\n\n\t\t\t- 在项目的所有阶段都考虑各类风险\n\n\t\t\t- 不足\n\n\t\t\t\t- 难以使用户相信演化方法是可控的\n\n\t\t\t\t- 过多的迭代周期也会增加开发成本和时间\n\n\t\t\t- 成败很大程度上依赖于\n\n\t\t\t\t- 风险评估的准确性\n\n\t- 构件集成模型\n\n\t\t- 基本概念\n\n\t\t\t- 面向对象 = 对象 + 分类 + 继承 + 消息通信\n\n\t\t\t- 对象技术\n\n\t\t\t\t- 将事物封装成\n\n\t\t\t\t\t- 对象\n\n\t\t\t\t\t\t- 包含\n\n\t\t\t\t\t\t\t- 数据\n\n\t\t\t\t\t\t\t- 加工该数据的方法\n\n\t\t\t\t\t\t- 抽象成\n\n\t\t\t\t\t\t\t- 类\n\n\t\t\t- 构件\n\n\t\t\t\t- 经过适当设计和实现的类\n\n\t\t- 特征\n\n\t\t\t- 利用预先封装好的构件来构造应用软件系统\n\n\t\t\t- 融合了螺旋模型\n\n\t\t\t\t- 支持软件开发的迭代方法\n\n\t\t- 流程\n\n\t\t\t- 标识候选构件\n\n\t\t\t- 查找构件\n\n\t\t\t- 若存在则提取构件\n\n\t\t\t- 若不存在则构造构件\n\n\t\t\t- 将新构件存入库中\n\n\t\t\t- 进行下一次迭代\n\n- 形式化方法模型\n\n\t- 转换模型\n\n\t\t- 概念\n\n\t\t\t- 结合\n\n\t\t\t\t- 形式化软件开发\n\n\t\t\t\t- 程序自动生成技术\n\n\t\t- 软件开发过程\n\n\t\t\t- 1. 确定形式化的需求规格说明书\n\n\t\t\t- 2. 进行自动的程序变换\n\n\t\t\t- 3. 对形式化开发记录进行测试\n\n\t\t- 常用技术\n\n\t\t\t- 基于模型的需求规格说明书及其变换技术\n\n\t\t\t- 基于代数结构的需求规格说明及其变换技术\n\n\t\t\t- 基于时序逻辑的需求规格说明书和验证技术以及基于可视形式化的技术\n\n\t- 净室模型\n\n\t\t- 概念\n\n\t\t\t- 形式化的增量开发模型\n\n\t\t\t- 基本思想\n\n\t\t\t\t- 力求在分析和设计阶段就消除错误\n\n\t\t\t\t- 然后再无缺陷或“洁净”的状态下实现软件的制作\n\n\t\t\t- 盒（box）\n\n\t\t\t\t- 净室开发把软件看成一系列的增量\n\n\t\t\t\t- 每个增量是一个用形式化方式表示的“盒”\n\n- 8种软件开发模型的主要特点\n\n\t- 开发模型\n\n\t\t- 特点\n\n\t\t\t- 适用场景\n\n\t- 瀑布模型\n\n\t\t- 线性模型\n\n\t\t\t- 需求明确的中、小型软件开发\n\n\t\t- 每一阶段必须完成规定的开发文档\n\n\t- 快速原型模型\n\n\t\t- 用户介入早\n\n\t\t\t- 需求模糊的小型软件开发\n\n\t\t- 通过迭代完善用户需求，应用快速开发工具\n\n\t- 增量模型\n\n\t\t- 每次迭代完成一个增量，可用于OO开发\n\n\t\t\t- 容易分块的大型软件开发\n\n\t- 螺旋模型\n\n\t\t- 典型迭代模型，重视风险分析，可用于OO开发\n\n\t\t\t- 具有不确定性的大型软件开发\n\n\t- 构件集成模型\n\n\t\t- 软件开发与构件开发平行进行，主要用于OO开发\n\n\t\t\t- 领域工程、行业的中型软件开发\n\n\t- 转换模型\n\n\t\t- 形式化的需求规格说明书，自动的程序变换系统\n\n\t\t\t- 理想化模型，尚无成熟工具支持\n\n\t- 净室模型\n\n\t\t- 形式化的增量开发模型\n\n\t\t\t- 开发团队熟悉形式化方法，中小型软件开发\n\n\t\t- 在洁净状态下实现软件制作\n\n- 统一过程和敏捷过程\n\n\t- 统一过程(Rational Unified Process,RUP)\n\n\t\t- 概念\n\n\t\t\t- 描述了软件开发中各个环节应该做什么、怎么做、什么时候做以及为什么要做，描述了一组以某种顺序完成的活动\n\n\t\t- 4个阶段\n\n\t\t\t- 初始阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 确定所设立的项目是否可行\n\n\t\t\t- 细化阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 识别出剩余的大多数用例\n\n\t\t\t\t- 任务\n\n\t\t\t\t\t- 风险分析\n\n\t\t\t\t\t\t- 需求\n\n\t\t\t\t\t\t- 技术\n\n\t\t\t\t\t\t- 技能\n\n\t\t\t\t\t\t- 政策\n\n\t\t\t\t\t- 高层分析和设计，做出结构型决策\n\n\t\t\t\t\t- 产生简要体系结构\n\n\t\t\t\t\t- 为构造阶段指定计划\n\n\t\t\t- 构造阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 识别出剩余的用例\n\n\t\t\t- 迁移阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 完成最后的软件产品和验收测试\n\n\t\t\t\t\t- 完成用户文档编制以及用户培训等工作\n\n\t- 敏捷过程(Agile Process)\n\n\t\t- 敏捷开发的价值观\n\n\t\t\t- 个人和交互 胜过 过程和工具\n\n\t\t\t- 可以运行的软件 胜过 面面俱到的文档\n\n\t\t\t- 客户合作 胜过 合同谈判\n\n\t\t\t- 响应变化 胜过 遵循计划\n\n\t\t- 敏捷开发应遵循的12条原则\n\n\t\t- 极限编程XP(extreme programming)\n\n\t\t\t- 4个价值观（软件项目从4个方面入手改善）\n\n\t\t\t\t- 加强交流\n\n\t\t\t\t- 从简单做起\n\n\t\t\t\t- 寻求反馈\n\n\t\t\t\t- 勇于实事求是\n\n\t\t\t- 12个核心实践\n\n\t\t\t\t- 完善团队\n\n\t\t\t\t- 计划对策\n\n\t\t\t\t- 测试\n\n\t\t\t\t- 简单设计\n\n\t\t\t\t- 结对编程\n\n\t\t\t\t- 小软件版本\n\n\t\t\t\t- 设计改进\n\n\t\t\t\t- 持续集成\n\n\t\t\t\t- 代码集体共有\n\n\t\t\t\t- 编码标准\n\n\t\t\t\t- 系统比喻\n\n\t\t\t\t- 可持续的速度\n\n- 软件可行性研究\n\n\t- 研究内容\n\n\t\t- 经济\n\n\t\t- 技术\n\n\t\t- 运行\n\n\t\t- 法律\n\n\t- 研究步骤\n\n\t\t- 1. 对当前系统进行调查和研究\n\n\t\t- 2. 导出新系统的解决方案\n\n\t\t- 3. 提出推荐的方案\n\n\t\t- 4. 编写可行性论证报告\n\n\t\t\t- 系统概述\n\n\t\t\t- 可行性分析\n\n\t\t\t- 结论意见\n\n\t- 软件风险分析\n\n\t\t- 风险识别\n\n\t\t- 风险预测\n\n\t\t\t- 建立风险可能性尺度\n\n\t\t\t- 估计对产品和项目的影响\n\n\t\t- 风险的驾驭和监控\n\n\t- 项目实施计划\n\n\t\t- 项目实施计划\n\n\t\t- 质量保证计划\n\n\t\t- 软件测试计划\n\n\t\t- 文档编制计划\n\n\t\t- 用户培训计划\n\n\t\t- 综合支持计划\n\n\t\t- 软件分发计划\n\n### 三、结构化分析与设计\n\n#### 概述\n\n- 基本任务与指导思想\n\n\t- 结构化分析\n\n\t\t- 基本任务\n\n\t\t\t- 建立系统分析模型\n\n\t\t\t\t- 分层DFD图\n\n\t\t\t- 编写软件需求规格说明书(software requirements specification, SRS)\n\n\t\t\t\t- 主要内容\n\n\t\t\t\t\t- 引言\n\n\t\t\t\t\t- 信息描述\n\n\t\t\t\t\t- 功能描述\n\n\t\t\t\t\t- 行为描述\n\n\t\t\t\t\t- 接口描述\n\n\t\t\t\t\t- 质量保证\n\n\t\t\t\t\t- 其他需求\n\n\t\t\t\t- 要求\n\n\t\t\t\t\t- 准确性\n\n\t\t\t\t\t\t- 无错漏\n\n\t\t\t\t\t- 防止二义性\n\n\t\t\t\t\t\t- 客户理解\n\n\t\t\t\t\t- 直观易改\n\n\t\t\t\t\t\t- 尽可能采用图形和符号\n\n\t\t- 指导思想\n\n\t\t\t- 抽象与分解\n\n\t- 结构化设计\n\n\t\t- 基本任务\n\n\t\t\t- 转换\n\n\t\t\t\t- DFD\n\n\t\t\t\t- 最终SC图\n\n\t\t\t- 描述\n\n\t\t\t\t- 用描述工具\n\n\t\t\t\t\t- SC图\n\n\t\t\t\t- 模块的\n\n\t\t\t\t\t- 算法\n\n\t\t\t\t\t- 数据结构\n\n\t\t\t- 软件设计\n\n\t\t\t\t- 总体设计\n\n\t\t\t\t\t- 初始SC图（映射）\n\n\t\t\t\t\t- 最终SC图（优化）\n\n\t\t\t\t- 详细设计\n\n\t\t\t\t\t- 完成模块说明\n\n\t\t- 指导思想\n\n\t\t\t- 分解和细化\n\n- 结构化分析(structured analysis,SA)\n\n\t- 组成\n\n\t\t- 数据字典(data dictionary, DD)\n\n\t\t\t- 实体联系图(entity-relation diagram, E-R图)\n\n\t\t\t\t- 数据对象说明\n\n\t\t\t- 数据流图(data flow diagrm, DFD)\n\n\t\t\t\t- 加工规格说明(process specification, PSPEC)\n\n\t\t\t- 状态变换图(status transform diagram, STD)\n\n\t\t\t\t- 控制规格说明(control specification, CSPEC)\n\n\t- 描述工具\n\n\t\t- 数据流图( DFD )\n\n\t\t\t- 源点和终点\n\n\t\t\t- 数据流\n\n\t\t\t- 加工\n\n\t\t\t- 数据文件 / 数据库 / 数据存储\n\n\t\t- 数据字典( DD )\n\n\t\t\t- 数据项\n\n\t\t\t- 数据流\n\n\t\t\t- 加工处理\n\n\t\t\t- 数据文件\n\n\t\t- 加工规格说明( PSPEC )\n\n\t\t\t- 结构化语言\n\n\t\t\t- 判定表或判定树\n\n- 结构化设计(structured design,SD)\n\n\t- 组成\n\n\t\t- 过程设计\n\n\t\t- 接口设计\n\n\t\t- 体系结构设计\n\n\t\t- 数据设计\n\n\t- 描述工具\n\n\t\t- 结构图(structure chart, SC)\n\n\t\t\t- SC图的模块调用的表示方法\n\n\t\t\t\t- 简单调用\n\n\t\t\t\t- 选择调用\n\n\t\t\t\t- 循环调用\n\n#### 结构化系统分析与设计\n\n- 结构化系统分析SA\n\n\t- 基本步骤\n\n\t\t- 1. 自顶向下对系统进行功能分解\n\n\t\t\t- 画出分层DFD图\n\n\t\t- 2. 有后向前定义系统的数据和加工\n\n\t\t\t- 编制DD和PSPEC\n\n\t\t- 3. 写出SRS\n\n\t- 工具\n\n\t\t- DFD\n\n\t\t- DD\n\n\t\t- 结构化英语\n\n\t\t- 判定表和判定树\n\n- 结构化系统设计SD\n\n\t- 结构化软件的设计，通常从DFD图到SC图的映射开始\n\n\t- 步骤\n\n\t\t- 复审DFD\n\n\t\t- 鉴别DFD\n\n\t\t- 把DFD映射为初始SC图\n\n\t\t\t- 变换映射\n\n\t\t\t- 事物映射\n\n\t\t- 改进SC图获得最终SC图\n\n\t\t\t- 按照优化设计的指导原则\n\n\t\t\t\t- 对模块划分的原则\n\n\t\t\t\t\t- 总行数控制在10～100行，最好为30～60行\n\n\t\t\t\t- 高扇入／低扇出的原则\n\n\t\t\t\t\t- 扇入\n\n\t\t\t\t\t\t- 增加模块的利用率，复用率\n\n\t\t\t\t\t- 扇出\n\n\t\t\t\t\t\t- 3～4为宜\n\n\t\t\t\t\t\t- 不超过5～7\n\n\t\t\t\t\t\t\t- 过多软件结构将呈煎饼形\n\n\t\t\t\t\t- 设计良好\n\n\t\t\t\t\t\t- 翁型结构\n\n\t\t\t\t\t\t\t- 两头小\n\n\t\t\t\t\t\t\t- 中间大\n\n\t- DFD图\n\n\t\t- 变换型结构\n\n\t\t\t- 传入路径\n\n\t\t\t- 变换中心\n\n\t\t\t- 传出路径\n\n\t\t- 事务型结构\n\n\t\t\t- 接受路径\n\n\t\t\t\t- 至少一条\n\n\t\t\t- 事务中心\n\n\t\t\t- 动作路径\n\n\t\t\t\t- 若干条\n\n\t\t- 在大型系统的DFD中两者往往同时存在\n\n\t- 分层DFD图到最终SC图的一般过程\n\n\t\t- SA（工具：DFD、PSPEC）——>分析模型（分层DFD图+SRS）\n\n\t\t- SD（工具：SC图）— 映射 —＞初始设计模型（初始SC图）\n\n\t\t- 初始设计模式（初始SC图）— 优化 —>最终设计模型（最终SC图）\n\n#### 模块设计（详细设计）\n\n- 目的\n\n\t- 为SC图中的每个模块确定采用的\n\n\t\t- 算法\n\n\t\t- （块内）数据结构\n\n- 结构化的控制结构\n\n\t- 任何程序的逻辑均可用顺序、选择和循环（DO-WHILE型）3钟控制结构或它们的组合来实现\n\n\t- 每个控制结构值应有\n\n\t\t- 一个入口\n\n\t\t- 一个出口\n\n\t- 是详细设计阶段确保模块逻辑清晰的 关键技术\n\n- 表达工具\n\n\t- 流程图(flow diagram)\n\n\t\t- 最古老\n\n\t\t- 特性（缺点）\n\n\t\t\t- 随意性\n\n\t\t\t- 灵活性\n\n\t- 伪代码(program design language,PDL)\n\n\t\t- 文字形式\n\n","source":"_posts/2软件工程（上）.md","raw":"---\n\ntitle: 软件工程（上） \n\ndate: 2024-10-12 12:00:00 \n\n\ncategories: Notes \n\n---\n\n\n\n### 一、绪论\n\n#### 软件\n\n- 定义\n\n\t- 软件\n\n\t\t- 软件 = 程序 + 数据 + 文档\n\n\t\t\t- 程序\n\n\t\t\t\t- 程序是为了解决某个特定问题的而用程序设计语言描述的适合计算机处理的语句序列\n\n\t\t\t- 数据\n\n\t\t\t\t- 是程序能正常操作信息的数据结构\n\n\t\t\t- 文档\n\n\t\t\t\t- 软件开发活动的记录\n\n\t\t- 软件是能够完成预定功能和性能的可执行的计算机程序，包括适用程序正常执行所需要的数据，以及有关描述程序操作和使用的文档\n\n- 特征\n\n\t- 不同与硬件\n\n\t\t- 设计\n\n\t\t- 制造\n\n\t\t- 维修\n\n#### 软件危机\n\n- 定义\n\n\t- 落后的\n\n\t\t- 软件生成方式\n\n\t- 无法满足\n\n\t\t- 迅速增长的计算机软件需求\n\n\t- 从而导致\n\n\t\t- 软件开发与维护过程种出现一系列严重问题的现象\n\n- 原因\n\n\t- 软件规模的扩大\n\n\t\t- 使软件复杂度的增加\n\n\t- 软件维护费用的急剧上升\n\n\t\t- 直接威胁计算机应用的扩大\n\n\t- 软件生产技术\n\n\t\t- 进步缓慢\n\n\t\t- 是加剧软件危机的重要原因\n\n#### 软件工程学的范畴\n\n- 软件开发方法学\n\n\t- 软件发展3阶段\n\n\t\t- 程序\n\n\t\t- 软件\n\n\t\t- 软件产品\n\n- 软件工具\n\n- 软件工程环境\n\n- 软件工程管理\n\n\t- 目的\n\n\t\t- 为了按照进度及预算完成软件计划\n\n\t\t- 实现预期的经济和社会效益\n\n#### 3种编程范型\n\n- 过程式编程范型\n\n\t- 着眼于程序的过程和基本控制结构\n\n\t- 粒度最小\n\n- 面向对象编程范型\n\n\t- 面向对象程序设计(object-oriented programming,OOP)\n\n\t- 着眼与程序中的对象\n\n\t\t- 粒度较大\n\n- 基于构件技术的编程范型\n\n\t- 基于构件的开发技术(component-based development,CBD)\n\n\t- 着眼与适合整个领域(domain)的类对象\n\n\t\t- 粒度最大\n\n#### 3代软件工程\n\n- 传统（经典）软件工程\n\n\t- 以结构化程序设计为基础\n\n\t- 可区分为\n\n\t\t- 瀑布模型\n\n\t\t- 原型模型等\n\n\t- 开发阶段\n\n\t\t- 结构化分析\n\n\t\t- 结构化设计\n\n\t\t- 面向过程编码\n\n\t\t- 软件测试\n\n- 面向对象软件工程\n\n\t- 以面向对象程序设计为基础\n\n\t- 开发阶段\n\n\t\t- OO分析与对象抽取\n\n\t\t- 对象详细设计\n\n\t\t- 面向对象的编码与测试\n\n- 基于构件的软件工程\n\n\t- 以软件复用为目标、领域工程为基础\n\n\t- 开发阶段\n\n\t\t- 领域分析和测试计划定制\n\n\t\t- 领域设计\n\n\t\t- 建立可复用构件库\n\n\t\t- 按“构件集成模型”查找与集成构件\n\n- 通用\n\n\t- 原理与方法\n\n\t\t- 分析先于设计\n\n\t\t- 设计先于编码\n\n\t\t- 使程序（的结构）适合于问题（的结构）\n\n\t- 开发方法\n\n\t\t- 分析与设计都应该提倡建立模型\n\n\t\t- 编码需遵循编码范型\n\n\t\t- 要加强软件工具的开发，不断改进以工具集成为特定的软件工程环境\n\n### 二、软件生存周期与软件过程\n\n#### 软件生存周期\n\n- 概念\n\n\t- 定义\n\n\t\t- 一个软件从开始立项起，到废弃不用止\n\n\t- 目的\n\n\t\t- 将生存周期划分为阶段\n\n\t\t\t- 使软件复杂性变得较易控制和管理\n\n- 主要活动\n\n\t- 1. 需求分析\n\n\t- 2. 软件分析\n\n\t\t- 从开发人员的视角对软件的需求模型进行分析\n\n\t- 3. 软件设计\n\n\t\t- 分为\n\n\t\t\t- 总体设计（概要设计）\n\n\t\t\t\t- 确定软件的总体结构和其他全局性的设计原则等\n\n\t\t\t- 详细设计\n\n\t\t\t\t- 确定软件的每一个部件的\n\n\t\t\t\t\t- 数据结构\n\n\t\t\t\t\t- 操作\n\n\t- 4. 编码（测试）\n\n\t\t- 按照选定的程序设计语言和可复用软件构件包，把设计文档翻译为源程序\n\n\t\t- 单元测试通常与编码同时进行\n\n\t- 5. 软件测试\n\n\t\t- 集成测试\n\n\t\t- 确认测试（交付测试）\n\n\t\t\t- 包括\n\n\t\t\t\t- α测试\n\n\t\t\t\t- β测试\n\n\t\t\t- 针对功能需求\n\n\t\t\t- 独立的测试工程师\n\n\t\t\t\t- 执行测试\n\n\t\t\t\t- 编写“测试报告”文档\n\n\t\t\t\t\t- 测试计划\n\n\t\t\t\t\t- 测试用例\n\n\t\t\t\t\t- 测试结果\n\n\t\t- 系统测试\n\n\t\t\t- 针对性能等非功能需求\n\n\t- 6. 运行维护\n\n#### 软件过程\n\n- 定义\n\n\t- 过程process\n\n\t\t- 人们随时间的流逝而进行的各种活动\n\n- 传统软件过程\n\n\t- 瀑布模型\n\n\t\t- 定义\n\n\t\t\t- 基于软件生存周期\n\n\t\t\t- 线性开发模型\n\n\t\t- 特点\n\n\t\t\t- 阶段间的顺序性和依赖性\n\n\t\t\t\t- 顺序性\n\n\t\t\t\t\t- 前一阶段完成后，后一阶段的工作才能开始\n\n\t\t\t\t- 依赖性\n\n\t\t\t\t\t- 前一阶段的输出文档是后一阶段的输入文档\n\n\t\t\t- 推迟实现的观点\n\n\t\t\t\t- 编码越早，开发时间越长\n\n\t\t\t- 保证质量的观点\n\n\t\t\t\t- 1. 每一阶段必须完成规定的文档\n\n\t\t\t\t- 2. 每一阶段都要对完成的文档进行复审\n\n\t\t\t- 存在的问题\n\n\t\t\t\t- 很难在开发的初始阶段彻底弄清软件需求\n\n\t- 快速原型模型\n\n\t\t- 中心思想\n\n\t\t\t- 先建立一个能够反映用户主要需求的原型\n\n\t\t\t- 让用户实际看到一个未来系统的概貌\n\n\t\t\t- 以便判断哪些功能是符合需要的，哪些方面需要改进\n\n\t\t\t- 然后将原型反复改进，直至建立完全符合用户要求的新系统\n\n\t\t- 开发方法\n\n\t\t\t- 只包括未来系统的的\n\n\t\t\t\t- 主要功能\n\n\t\t\t\t- 重要接口\n\n\t\t\t- 尽量使用能缩短开发周期的语言和工具\n\n\t\t\t- 把原型系统作为基础\n\n\t\t\t\t- 通过补充和修改获得最终的实际系统\n\n\t\t\t\t- 废弃大多数原型\n\n\t\t\t\t\t- 仅把建立原型的过程当作帮助定义软件需求的一种手段\n\n- 软件演化模型(evolutionary model)\n\n\t- 增量模型\n\n\t\t- 结合\n\n\t\t\t- 瀑布模型\n\n\t\t\t\t- 顺序特征\n\n\t\t\t- 快速原型模型\n\n\t\t\t\t- 迭代特征\n\n\t\t- 把软件看作一系列相互联系的增量(increments)\n\n\t\t\t- 每次迭代完成其中一个增量\n\n\t\t\t\t- 其中任一个增量的开发流程均可按...完成\n\n\t\t\t\t\t- 瀑布模型\n\n\t\t\t\t\t- 快速原型模型\n\n\t- 螺旋模型\n\n\t\t- 结合...基础上演变而成\n\n\t\t\t- 瀑布模型\n\n\t\t\t- 快速原型模型（增量模型）\n\n\t\t- 典型的迭代模型\n\n\t\t\t- 每轮螺旋均包含\n\n\t\t\t\t- 计划\n\n\t\t\t\t\t- 选定完成本轮螺旋所定目标的策略\n\n\t\t\t\t\t\t- 确定待开发系统的目标\n\n\t\t\t\t\t\t- 选择方案\n\n\t\t\t\t\t\t- 设定约束条件\n\n\t\t\t\t- 风险分析\n\n\t\t\t\t\t- 评估本轮螺旋可能存在的风险\n\n\t\t\t\t\t- 目的\n\n\t\t\t\t\t\t- 了解、分析并设法降低和排除\n\n\t\t\t\t\t\t\t- 因不确定因素导致的风险\n\n\t\t\t\t- 建立原型\n\n\t\t\t\t\t- 实现本轮螺旋的目标\n\n\t\t\t\t- 用户评审\n\n\t\t\t- 如果开发小组对项目的需求\n\n\t\t\t\t- 有较好的理解\n\n\t\t\t\t\t- 第一圈可直接用瀑布模型\n\n\t\t\t\t- 反之\n\n\t\t\t\t\t- 需要经过多圈螺线，开发一个或多个原型\n\n\t\t- 特点\n\n\t\t\t- 在项目的所有阶段都考虑各类风险\n\n\t\t\t- 不足\n\n\t\t\t\t- 难以使用户相信演化方法是可控的\n\n\t\t\t\t- 过多的迭代周期也会增加开发成本和时间\n\n\t\t\t- 成败很大程度上依赖于\n\n\t\t\t\t- 风险评估的准确性\n\n\t- 构件集成模型\n\n\t\t- 基本概念\n\n\t\t\t- 面向对象 = 对象 + 分类 + 继承 + 消息通信\n\n\t\t\t- 对象技术\n\n\t\t\t\t- 将事物封装成\n\n\t\t\t\t\t- 对象\n\n\t\t\t\t\t\t- 包含\n\n\t\t\t\t\t\t\t- 数据\n\n\t\t\t\t\t\t\t- 加工该数据的方法\n\n\t\t\t\t\t\t- 抽象成\n\n\t\t\t\t\t\t\t- 类\n\n\t\t\t- 构件\n\n\t\t\t\t- 经过适当设计和实现的类\n\n\t\t- 特征\n\n\t\t\t- 利用预先封装好的构件来构造应用软件系统\n\n\t\t\t- 融合了螺旋模型\n\n\t\t\t\t- 支持软件开发的迭代方法\n\n\t\t- 流程\n\n\t\t\t- 标识候选构件\n\n\t\t\t- 查找构件\n\n\t\t\t- 若存在则提取构件\n\n\t\t\t- 若不存在则构造构件\n\n\t\t\t- 将新构件存入库中\n\n\t\t\t- 进行下一次迭代\n\n- 形式化方法模型\n\n\t- 转换模型\n\n\t\t- 概念\n\n\t\t\t- 结合\n\n\t\t\t\t- 形式化软件开发\n\n\t\t\t\t- 程序自动生成技术\n\n\t\t- 软件开发过程\n\n\t\t\t- 1. 确定形式化的需求规格说明书\n\n\t\t\t- 2. 进行自动的程序变换\n\n\t\t\t- 3. 对形式化开发记录进行测试\n\n\t\t- 常用技术\n\n\t\t\t- 基于模型的需求规格说明书及其变换技术\n\n\t\t\t- 基于代数结构的需求规格说明及其变换技术\n\n\t\t\t- 基于时序逻辑的需求规格说明书和验证技术以及基于可视形式化的技术\n\n\t- 净室模型\n\n\t\t- 概念\n\n\t\t\t- 形式化的增量开发模型\n\n\t\t\t- 基本思想\n\n\t\t\t\t- 力求在分析和设计阶段就消除错误\n\n\t\t\t\t- 然后再无缺陷或“洁净”的状态下实现软件的制作\n\n\t\t\t- 盒（box）\n\n\t\t\t\t- 净室开发把软件看成一系列的增量\n\n\t\t\t\t- 每个增量是一个用形式化方式表示的“盒”\n\n- 8种软件开发模型的主要特点\n\n\t- 开发模型\n\n\t\t- 特点\n\n\t\t\t- 适用场景\n\n\t- 瀑布模型\n\n\t\t- 线性模型\n\n\t\t\t- 需求明确的中、小型软件开发\n\n\t\t- 每一阶段必须完成规定的开发文档\n\n\t- 快速原型模型\n\n\t\t- 用户介入早\n\n\t\t\t- 需求模糊的小型软件开发\n\n\t\t- 通过迭代完善用户需求，应用快速开发工具\n\n\t- 增量模型\n\n\t\t- 每次迭代完成一个增量，可用于OO开发\n\n\t\t\t- 容易分块的大型软件开发\n\n\t- 螺旋模型\n\n\t\t- 典型迭代模型，重视风险分析，可用于OO开发\n\n\t\t\t- 具有不确定性的大型软件开发\n\n\t- 构件集成模型\n\n\t\t- 软件开发与构件开发平行进行，主要用于OO开发\n\n\t\t\t- 领域工程、行业的中型软件开发\n\n\t- 转换模型\n\n\t\t- 形式化的需求规格说明书，自动的程序变换系统\n\n\t\t\t- 理想化模型，尚无成熟工具支持\n\n\t- 净室模型\n\n\t\t- 形式化的增量开发模型\n\n\t\t\t- 开发团队熟悉形式化方法，中小型软件开发\n\n\t\t- 在洁净状态下实现软件制作\n\n- 统一过程和敏捷过程\n\n\t- 统一过程(Rational Unified Process,RUP)\n\n\t\t- 概念\n\n\t\t\t- 描述了软件开发中各个环节应该做什么、怎么做、什么时候做以及为什么要做，描述了一组以某种顺序完成的活动\n\n\t\t- 4个阶段\n\n\t\t\t- 初始阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 确定所设立的项目是否可行\n\n\t\t\t- 细化阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 识别出剩余的大多数用例\n\n\t\t\t\t- 任务\n\n\t\t\t\t\t- 风险分析\n\n\t\t\t\t\t\t- 需求\n\n\t\t\t\t\t\t- 技术\n\n\t\t\t\t\t\t- 技能\n\n\t\t\t\t\t\t- 政策\n\n\t\t\t\t\t- 高层分析和设计，做出结构型决策\n\n\t\t\t\t\t- 产生简要体系结构\n\n\t\t\t\t\t- 为构造阶段指定计划\n\n\t\t\t- 构造阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 识别出剩余的用例\n\n\t\t\t- 迁移阶段\n\n\t\t\t\t- 目标\n\n\t\t\t\t\t- 完成最后的软件产品和验收测试\n\n\t\t\t\t\t- 完成用户文档编制以及用户培训等工作\n\n\t- 敏捷过程(Agile Process)\n\n\t\t- 敏捷开发的价值观\n\n\t\t\t- 个人和交互 胜过 过程和工具\n\n\t\t\t- 可以运行的软件 胜过 面面俱到的文档\n\n\t\t\t- 客户合作 胜过 合同谈判\n\n\t\t\t- 响应变化 胜过 遵循计划\n\n\t\t- 敏捷开发应遵循的12条原则\n\n\t\t- 极限编程XP(extreme programming)\n\n\t\t\t- 4个价值观（软件项目从4个方面入手改善）\n\n\t\t\t\t- 加强交流\n\n\t\t\t\t- 从简单做起\n\n\t\t\t\t- 寻求反馈\n\n\t\t\t\t- 勇于实事求是\n\n\t\t\t- 12个核心实践\n\n\t\t\t\t- 完善团队\n\n\t\t\t\t- 计划对策\n\n\t\t\t\t- 测试\n\n\t\t\t\t- 简单设计\n\n\t\t\t\t- 结对编程\n\n\t\t\t\t- 小软件版本\n\n\t\t\t\t- 设计改进\n\n\t\t\t\t- 持续集成\n\n\t\t\t\t- 代码集体共有\n\n\t\t\t\t- 编码标准\n\n\t\t\t\t- 系统比喻\n\n\t\t\t\t- 可持续的速度\n\n- 软件可行性研究\n\n\t- 研究内容\n\n\t\t- 经济\n\n\t\t- 技术\n\n\t\t- 运行\n\n\t\t- 法律\n\n\t- 研究步骤\n\n\t\t- 1. 对当前系统进行调查和研究\n\n\t\t- 2. 导出新系统的解决方案\n\n\t\t- 3. 提出推荐的方案\n\n\t\t- 4. 编写可行性论证报告\n\n\t\t\t- 系统概述\n\n\t\t\t- 可行性分析\n\n\t\t\t- 结论意见\n\n\t- 软件风险分析\n\n\t\t- 风险识别\n\n\t\t- 风险预测\n\n\t\t\t- 建立风险可能性尺度\n\n\t\t\t- 估计对产品和项目的影响\n\n\t\t- 风险的驾驭和监控\n\n\t- 项目实施计划\n\n\t\t- 项目实施计划\n\n\t\t- 质量保证计划\n\n\t\t- 软件测试计划\n\n\t\t- 文档编制计划\n\n\t\t- 用户培训计划\n\n\t\t- 综合支持计划\n\n\t\t- 软件分发计划\n\n### 三、结构化分析与设计\n\n#### 概述\n\n- 基本任务与指导思想\n\n\t- 结构化分析\n\n\t\t- 基本任务\n\n\t\t\t- 建立系统分析模型\n\n\t\t\t\t- 分层DFD图\n\n\t\t\t- 编写软件需求规格说明书(software requirements specification, SRS)\n\n\t\t\t\t- 主要内容\n\n\t\t\t\t\t- 引言\n\n\t\t\t\t\t- 信息描述\n\n\t\t\t\t\t- 功能描述\n\n\t\t\t\t\t- 行为描述\n\n\t\t\t\t\t- 接口描述\n\n\t\t\t\t\t- 质量保证\n\n\t\t\t\t\t- 其他需求\n\n\t\t\t\t- 要求\n\n\t\t\t\t\t- 准确性\n\n\t\t\t\t\t\t- 无错漏\n\n\t\t\t\t\t- 防止二义性\n\n\t\t\t\t\t\t- 客户理解\n\n\t\t\t\t\t- 直观易改\n\n\t\t\t\t\t\t- 尽可能采用图形和符号\n\n\t\t- 指导思想\n\n\t\t\t- 抽象与分解\n\n\t- 结构化设计\n\n\t\t- 基本任务\n\n\t\t\t- 转换\n\n\t\t\t\t- DFD\n\n\t\t\t\t- 最终SC图\n\n\t\t\t- 描述\n\n\t\t\t\t- 用描述工具\n\n\t\t\t\t\t- SC图\n\n\t\t\t\t- 模块的\n\n\t\t\t\t\t- 算法\n\n\t\t\t\t\t- 数据结构\n\n\t\t\t- 软件设计\n\n\t\t\t\t- 总体设计\n\n\t\t\t\t\t- 初始SC图（映射）\n\n\t\t\t\t\t- 最终SC图（优化）\n\n\t\t\t\t- 详细设计\n\n\t\t\t\t\t- 完成模块说明\n\n\t\t- 指导思想\n\n\t\t\t- 分解和细化\n\n- 结构化分析(structured analysis,SA)\n\n\t- 组成\n\n\t\t- 数据字典(data dictionary, DD)\n\n\t\t\t- 实体联系图(entity-relation diagram, E-R图)\n\n\t\t\t\t- 数据对象说明\n\n\t\t\t- 数据流图(data flow diagrm, DFD)\n\n\t\t\t\t- 加工规格说明(process specification, PSPEC)\n\n\t\t\t- 状态变换图(status transform diagram, STD)\n\n\t\t\t\t- 控制规格说明(control specification, CSPEC)\n\n\t- 描述工具\n\n\t\t- 数据流图( DFD )\n\n\t\t\t- 源点和终点\n\n\t\t\t- 数据流\n\n\t\t\t- 加工\n\n\t\t\t- 数据文件 / 数据库 / 数据存储\n\n\t\t- 数据字典( DD )\n\n\t\t\t- 数据项\n\n\t\t\t- 数据流\n\n\t\t\t- 加工处理\n\n\t\t\t- 数据文件\n\n\t\t- 加工规格说明( PSPEC )\n\n\t\t\t- 结构化语言\n\n\t\t\t- 判定表或判定树\n\n- 结构化设计(structured design,SD)\n\n\t- 组成\n\n\t\t- 过程设计\n\n\t\t- 接口设计\n\n\t\t- 体系结构设计\n\n\t\t- 数据设计\n\n\t- 描述工具\n\n\t\t- 结构图(structure chart, SC)\n\n\t\t\t- SC图的模块调用的表示方法\n\n\t\t\t\t- 简单调用\n\n\t\t\t\t- 选择调用\n\n\t\t\t\t- 循环调用\n\n#### 结构化系统分析与设计\n\n- 结构化系统分析SA\n\n\t- 基本步骤\n\n\t\t- 1. 自顶向下对系统进行功能分解\n\n\t\t\t- 画出分层DFD图\n\n\t\t- 2. 有后向前定义系统的数据和加工\n\n\t\t\t- 编制DD和PSPEC\n\n\t\t- 3. 写出SRS\n\n\t- 工具\n\n\t\t- DFD\n\n\t\t- DD\n\n\t\t- 结构化英语\n\n\t\t- 判定表和判定树\n\n- 结构化系统设计SD\n\n\t- 结构化软件的设计，通常从DFD图到SC图的映射开始\n\n\t- 步骤\n\n\t\t- 复审DFD\n\n\t\t- 鉴别DFD\n\n\t\t- 把DFD映射为初始SC图\n\n\t\t\t- 变换映射\n\n\t\t\t- 事物映射\n\n\t\t- 改进SC图获得最终SC图\n\n\t\t\t- 按照优化设计的指导原则\n\n\t\t\t\t- 对模块划分的原则\n\n\t\t\t\t\t- 总行数控制在10～100行，最好为30～60行\n\n\t\t\t\t- 高扇入／低扇出的原则\n\n\t\t\t\t\t- 扇入\n\n\t\t\t\t\t\t- 增加模块的利用率，复用率\n\n\t\t\t\t\t- 扇出\n\n\t\t\t\t\t\t- 3～4为宜\n\n\t\t\t\t\t\t- 不超过5～7\n\n\t\t\t\t\t\t\t- 过多软件结构将呈煎饼形\n\n\t\t\t\t\t- 设计良好\n\n\t\t\t\t\t\t- 翁型结构\n\n\t\t\t\t\t\t\t- 两头小\n\n\t\t\t\t\t\t\t- 中间大\n\n\t- DFD图\n\n\t\t- 变换型结构\n\n\t\t\t- 传入路径\n\n\t\t\t- 变换中心\n\n\t\t\t- 传出路径\n\n\t\t- 事务型结构\n\n\t\t\t- 接受路径\n\n\t\t\t\t- 至少一条\n\n\t\t\t- 事务中心\n\n\t\t\t- 动作路径\n\n\t\t\t\t- 若干条\n\n\t\t- 在大型系统的DFD中两者往往同时存在\n\n\t- 分层DFD图到最终SC图的一般过程\n\n\t\t- SA（工具：DFD、PSPEC）——>分析模型（分层DFD图+SRS）\n\n\t\t- SD（工具：SC图）— 映射 —＞初始设计模型（初始SC图）\n\n\t\t- 初始设计模式（初始SC图）— 优化 —>最终设计模型（最终SC图）\n\n#### 模块设计（详细设计）\n\n- 目的\n\n\t- 为SC图中的每个模块确定采用的\n\n\t\t- 算法\n\n\t\t- （块内）数据结构\n\n- 结构化的控制结构\n\n\t- 任何程序的逻辑均可用顺序、选择和循环（DO-WHILE型）3钟控制结构或它们的组合来实现\n\n\t- 每个控制结构值应有\n\n\t\t- 一个入口\n\n\t\t- 一个出口\n\n\t- 是详细设计阶段确保模块逻辑清晰的 关键技术\n\n- 表达工具\n\n\t- 流程图(flow diagram)\n\n\t\t- 最古老\n\n\t\t- 特性（缺点）\n\n\t\t\t- 随意性\n\n\t\t\t- 灵活性\n\n\t- 伪代码(program design language,PDL)\n\n\t\t- 文字形式\n\n","slug":"2软件工程（上）","published":1,"updated":"2024-10-14T03:27:46.385Z","comments":1,"layout":"post","photos":[],"_id":"cm2bvklb200074cufdf0m098e","content":"<h3 id=\"一、绪论\"><a href=\"#一、绪论\" class=\"headerlink\" title=\"一、绪论\"></a>一、绪论</h3><h4 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>软件</p>\n<ul>\n<li><p>软件 &#x3D; 程序 + 数据 + 文档</p>\n<ul>\n<li><p>程序</p>\n<ul>\n<li>程序是为了解决某个特定问题的而用程序设计语言描述的适合计算机处理的语句序列</li>\n</ul>\n</li>\n<li><p>数据</p>\n<ul>\n<li>是程序能正常操作信息的数据结构</li>\n</ul>\n</li>\n<li><p>文档</p>\n<ul>\n<li>软件开发活动的记录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件是能够完成预定功能和性能的可执行的计算机程序，包括适用程序正常执行所需要的数据，以及有关描述程序操作和使用的文档</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特征</p>\n<ul>\n<li><p>不同与硬件</p>\n<ul>\n<li><p>设计</p>\n</li>\n<li><p>制造</p>\n</li>\n<li><p>维修</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>落后的</p>\n<ul>\n<li>软件生成方式</li>\n</ul>\n</li>\n<li><p>无法满足</p>\n<ul>\n<li>迅速增长的计算机软件需求</li>\n</ul>\n</li>\n<li><p>从而导致</p>\n<ul>\n<li>软件开发与维护过程种出现一系列严重问题的现象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>原因</p>\n<ul>\n<li><p>软件规模的扩大</p>\n<ul>\n<li>使软件复杂度的增加</li>\n</ul>\n</li>\n<li><p>软件维护费用的急剧上升</p>\n<ul>\n<li>直接威胁计算机应用的扩大</li>\n</ul>\n</li>\n<li><p>软件生产技术</p>\n<ul>\n<li><p>进步缓慢</p>\n</li>\n<li><p>是加剧软件危机的重要原因</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件工程学的范畴\"><a href=\"#软件工程学的范畴\" class=\"headerlink\" title=\"软件工程学的范畴\"></a>软件工程学的范畴</h4><ul>\n<li><p>软件开发方法学</p>\n<ul>\n<li><p>软件发展3阶段</p>\n<ul>\n<li><p>程序</p>\n</li>\n<li><p>软件</p>\n</li>\n<li><p>软件产品</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件工具</p>\n</li>\n<li><p>软件工程环境</p>\n</li>\n<li><p>软件工程管理</p>\n<ul>\n<li><p>目的</p>\n<ul>\n<li><p>为了按照进度及预算完成软件计划</p>\n</li>\n<li><p>实现预期的经济和社会效益</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3种编程范型\"><a href=\"#3种编程范型\" class=\"headerlink\" title=\"3种编程范型\"></a>3种编程范型</h4><ul>\n<li><p>过程式编程范型</p>\n<ul>\n<li><p>着眼于程序的过程和基本控制结构</p>\n</li>\n<li><p>粒度最小</p>\n</li>\n</ul>\n</li>\n<li><p>面向对象编程范型</p>\n<ul>\n<li><p>面向对象程序设计(object-oriented programming,OOP)</p>\n</li>\n<li><p>着眼与程序中的对象</p>\n<ul>\n<li>粒度较大</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于构件技术的编程范型</p>\n<ul>\n<li><p>基于构件的开发技术(component-based development,CBD)</p>\n</li>\n<li><p>着眼与适合整个领域(domain)的类对象</p>\n<ul>\n<li>粒度最大</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3代软件工程\"><a href=\"#3代软件工程\" class=\"headerlink\" title=\"3代软件工程\"></a>3代软件工程</h4><ul>\n<li><p>传统（经典）软件工程</p>\n<ul>\n<li><p>以结构化程序设计为基础</p>\n</li>\n<li><p>可区分为</p>\n<ul>\n<li><p>瀑布模型</p>\n</li>\n<li><p>原型模型等</p>\n</li>\n</ul>\n</li>\n<li><p>开发阶段</p>\n<ul>\n<li><p>结构化分析</p>\n</li>\n<li><p>结构化设计</p>\n</li>\n<li><p>面向过程编码</p>\n</li>\n<li><p>软件测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象软件工程</p>\n<ul>\n<li><p>以面向对象程序设计为基础</p>\n</li>\n<li><p>开发阶段</p>\n<ul>\n<li><p>OO分析与对象抽取</p>\n</li>\n<li><p>对象详细设计</p>\n</li>\n<li><p>面向对象的编码与测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于构件的软件工程</p>\n<ul>\n<li><p>以软件复用为目标、领域工程为基础</p>\n</li>\n<li><p>开发阶段</p>\n<ul>\n<li><p>领域分析和测试计划定制</p>\n</li>\n<li><p>领域设计</p>\n</li>\n<li><p>建立可复用构件库</p>\n</li>\n<li><p>按“构件集成模型”查找与集成构件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>通用</p>\n<ul>\n<li><p>原理与方法</p>\n<ul>\n<li><p>分析先于设计</p>\n</li>\n<li><p>设计先于编码</p>\n</li>\n<li><p>使程序（的结构）适合于问题（的结构）</p>\n</li>\n</ul>\n</li>\n<li><p>开发方法</p>\n<ul>\n<li><p>分析与设计都应该提倡建立模型</p>\n</li>\n<li><p>编码需遵循编码范型</p>\n</li>\n<li><p>要加强软件工具的开发，不断改进以工具集成为特定的软件工程环境</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、软件生存周期与软件过程\"><a href=\"#二、软件生存周期与软件过程\" class=\"headerlink\" title=\"二、软件生存周期与软件过程\"></a>二、软件生存周期与软件过程</h3><h4 id=\"软件生存周期\"><a href=\"#软件生存周期\" class=\"headerlink\" title=\"软件生存周期\"></a>软件生存周期</h4><ul>\n<li><p>概念</p>\n<ul>\n<li><p>定义</p>\n<ul>\n<li>一个软件从开始立项起，到废弃不用止</li>\n</ul>\n</li>\n<li><p>目的</p>\n<ul>\n<li><p>将生存周期划分为阶段</p>\n<ul>\n<li>使软件复杂性变得较易控制和管理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>主要活动</p>\n<ul>\n<li><ol>\n<li>需求分析</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>软件分析</li>\n</ol>\n<ul>\n<li>从开发人员的视角对软件的需求模型进行分析</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>软件设计</li>\n</ol>\n<ul>\n<li><p>分为</p>\n<ul>\n<li><p>总体设计（概要设计）</p>\n<ul>\n<li>确定软件的总体结构和其他全局性的设计原则等</li>\n</ul>\n</li>\n<li><p>详细设计</p>\n<ul>\n<li><p>确定软件的每一个部件的</p>\n<ul>\n<li><p>数据结构</p>\n</li>\n<li><p>操作</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"4\">\n<li>编码（测试）</li>\n</ol>\n<ul>\n<li><p>按照选定的程序设计语言和可复用软件构件包，把设计文档翻译为源程序</p>\n</li>\n<li><p>单元测试通常与编码同时进行</p>\n</li>\n</ul>\n</li>\n<li><ol start=\"5\">\n<li>软件测试</li>\n</ol>\n<ul>\n<li><p>集成测试</p>\n</li>\n<li><p>确认测试（交付测试）</p>\n<ul>\n<li><p>包括</p>\n<ul>\n<li><p>α测试</p>\n</li>\n<li><p>β测试</p>\n</li>\n</ul>\n</li>\n<li><p>针对功能需求</p>\n</li>\n<li><p>独立的测试工程师</p>\n<ul>\n<li><p>执行测试</p>\n</li>\n<li><p>编写“测试报告”文档</p>\n<ul>\n<li><p>测试计划</p>\n</li>\n<li><p>测试用例</p>\n</li>\n<li><p>测试结果</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>系统测试</p>\n<ul>\n<li>针对性能等非功能需求</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"6\">\n<li>运行维护</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件过程\"><a href=\"#软件过程\" class=\"headerlink\" title=\"软件过程\"></a>软件过程</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>过程process</p>\n<ul>\n<li>人们随时间的流逝而进行的各种活动</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>传统软件过程</p>\n<ul>\n<li><p>瀑布模型</p>\n<ul>\n<li><p>定义</p>\n<ul>\n<li><p>基于软件生存周期</p>\n</li>\n<li><p>线性开发模型</p>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>阶段间的顺序性和依赖性</p>\n<ul>\n<li><p>顺序性</p>\n<ul>\n<li>前一阶段完成后，后一阶段的工作才能开始</li>\n</ul>\n</li>\n<li><p>依赖性</p>\n<ul>\n<li>前一阶段的输出文档是后一阶段的输入文档</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>推迟实现的观点</p>\n<ul>\n<li>编码越早，开发时间越长</li>\n</ul>\n</li>\n<li><p>保证质量的观点</p>\n<ul>\n<li><ol>\n<li>每一阶段必须完成规定的文档</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>每一阶段都要对完成的文档进行复审</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>存在的问题</p>\n<ul>\n<li>很难在开发的初始阶段彻底弄清软件需求</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>快速原型模型</p>\n<ul>\n<li><p>中心思想</p>\n<ul>\n<li><p>先建立一个能够反映用户主要需求的原型</p>\n</li>\n<li><p>让用户实际看到一个未来系统的概貌</p>\n</li>\n<li><p>以便判断哪些功能是符合需要的，哪些方面需要改进</p>\n</li>\n<li><p>然后将原型反复改进，直至建立完全符合用户要求的新系统</p>\n</li>\n</ul>\n</li>\n<li><p>开发方法</p>\n<ul>\n<li><p>只包括未来系统的的</p>\n<ul>\n<li><p>主要功能</p>\n</li>\n<li><p>重要接口</p>\n</li>\n</ul>\n</li>\n<li><p>尽量使用能缩短开发周期的语言和工具</p>\n</li>\n<li><p>把原型系统作为基础</p>\n<ul>\n<li><p>通过补充和修改获得最终的实际系统</p>\n</li>\n<li><p>废弃大多数原型</p>\n<ul>\n<li>仅把建立原型的过程当作帮助定义软件需求的一种手段</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件演化模型(evolutionary model)</p>\n<ul>\n<li><p>增量模型</p>\n<ul>\n<li><p>结合</p>\n<ul>\n<li><p>瀑布模型</p>\n<ul>\n<li>顺序特征</li>\n</ul>\n</li>\n<li><p>快速原型模型</p>\n<ul>\n<li>迭代特征</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>把软件看作一系列相互联系的增量(increments)</p>\n<ul>\n<li><p>每次迭代完成其中一个增量</p>\n<ul>\n<li><p>其中任一个增量的开发流程均可按…完成</p>\n<ul>\n<li><p>瀑布模型</p>\n</li>\n<li><p>快速原型模型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>螺旋模型</p>\n<ul>\n<li><p>结合…基础上演变而成</p>\n<ul>\n<li><p>瀑布模型</p>\n</li>\n<li><p>快速原型模型（增量模型）</p>\n</li>\n</ul>\n</li>\n<li><p>典型的迭代模型</p>\n<ul>\n<li><p>每轮螺旋均包含</p>\n<ul>\n<li><p>计划</p>\n<ul>\n<li><p>选定完成本轮螺旋所定目标的策略</p>\n<ul>\n<li><p>确定待开发系统的目标</p>\n</li>\n<li><p>选择方案</p>\n</li>\n<li><p>设定约束条件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>风险分析</p>\n<ul>\n<li><p>评估本轮螺旋可能存在的风险</p>\n</li>\n<li><p>目的</p>\n<ul>\n<li><p>了解、分析并设法降低和排除</p>\n<ul>\n<li>因不确定因素导致的风险</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立原型</p>\n<ul>\n<li>实现本轮螺旋的目标</li>\n</ul>\n</li>\n<li><p>用户评审</p>\n</li>\n</ul>\n</li>\n<li><p>如果开发小组对项目的需求</p>\n<ul>\n<li><p>有较好的理解</p>\n<ul>\n<li>第一圈可直接用瀑布模型</li>\n</ul>\n</li>\n<li><p>反之</p>\n<ul>\n<li>需要经过多圈螺线，开发一个或多个原型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>在项目的所有阶段都考虑各类风险</p>\n</li>\n<li><p>不足</p>\n<ul>\n<li><p>难以使用户相信演化方法是可控的</p>\n</li>\n<li><p>过多的迭代周期也会增加开发成本和时间</p>\n</li>\n</ul>\n</li>\n<li><p>成败很大程度上依赖于</p>\n<ul>\n<li>风险评估的准确性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构件集成模型</p>\n<ul>\n<li><p>基本概念</p>\n<ul>\n<li><p>面向对象 &#x3D; 对象 + 分类 + 继承 + 消息通信</p>\n</li>\n<li><p>对象技术</p>\n<ul>\n<li><p>将事物封装成</p>\n<ul>\n<li><p>对象</p>\n<ul>\n<li><p>包含</p>\n<ul>\n<li><p>数据</p>\n</li>\n<li><p>加工该数据的方法</p>\n</li>\n</ul>\n</li>\n<li><p>抽象成</p>\n<ul>\n<li>类</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构件</p>\n<ul>\n<li>经过适当设计和实现的类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特征</p>\n<ul>\n<li><p>利用预先封装好的构件来构造应用软件系统</p>\n</li>\n<li><p>融合了螺旋模型</p>\n<ul>\n<li>支持软件开发的迭代方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>流程</p>\n<ul>\n<li><p>标识候选构件</p>\n</li>\n<li><p>查找构件</p>\n</li>\n<li><p>若存在则提取构件</p>\n</li>\n<li><p>若不存在则构造构件</p>\n</li>\n<li><p>将新构件存入库中</p>\n</li>\n<li><p>进行下一次迭代</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>形式化方法模型</p>\n<ul>\n<li><p>转换模型</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li><p>结合</p>\n<ul>\n<li><p>形式化软件开发</p>\n</li>\n<li><p>程序自动生成技术</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件开发过程</p>\n<ul>\n<li><ol>\n<li>确定形式化的需求规格说明书</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>进行自动的程序变换</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>对形式化开发记录进行测试</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>常用技术</p>\n<ul>\n<li><p>基于模型的需求规格说明书及其变换技术</p>\n</li>\n<li><p>基于代数结构的需求规格说明及其变换技术</p>\n</li>\n<li><p>基于时序逻辑的需求规格说明书和验证技术以及基于可视形式化的技术</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>净室模型</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li><p>形式化的增量开发模型</p>\n</li>\n<li><p>基本思想</p>\n<ul>\n<li><p>力求在分析和设计阶段就消除错误</p>\n</li>\n<li><p>然后再无缺陷或“洁净”的状态下实现软件的制作</p>\n</li>\n</ul>\n</li>\n<li><p>盒（box）</p>\n<ul>\n<li><p>净室开发把软件看成一系列的增量</p>\n</li>\n<li><p>每个增量是一个用形式化方式表示的“盒”</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>8种软件开发模型的主要特点</p>\n<ul>\n<li><p>开发模型</p>\n<ul>\n<li><p>特点</p>\n<ul>\n<li>适用场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>瀑布模型</p>\n<ul>\n<li><p>线性模型</p>\n<ul>\n<li>需求明确的中、小型软件开发</li>\n</ul>\n</li>\n<li><p>每一阶段必须完成规定的开发文档</p>\n</li>\n</ul>\n</li>\n<li><p>快速原型模型</p>\n<ul>\n<li><p>用户介入早</p>\n<ul>\n<li>需求模糊的小型软件开发</li>\n</ul>\n</li>\n<li><p>通过迭代完善用户需求，应用快速开发工具</p>\n</li>\n</ul>\n</li>\n<li><p>增量模型</p>\n<ul>\n<li><p>每次迭代完成一个增量，可用于OO开发</p>\n<ul>\n<li>容易分块的大型软件开发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>螺旋模型</p>\n<ul>\n<li><p>典型迭代模型，重视风险分析，可用于OO开发</p>\n<ul>\n<li>具有不确定性的大型软件开发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构件集成模型</p>\n<ul>\n<li><p>软件开发与构件开发平行进行，主要用于OO开发</p>\n<ul>\n<li>领域工程、行业的中型软件开发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>转换模型</p>\n<ul>\n<li><p>形式化的需求规格说明书，自动的程序变换系统</p>\n<ul>\n<li>理想化模型，尚无成熟工具支持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>净室模型</p>\n<ul>\n<li><p>形式化的增量开发模型</p>\n<ul>\n<li>开发团队熟悉形式化方法，中小型软件开发</li>\n</ul>\n</li>\n<li><p>在洁净状态下实现软件制作</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>统一过程和敏捷过程</p>\n<ul>\n<li><p>统一过程(Rational Unified Process,RUP)</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li>描述了软件开发中各个环节应该做什么、怎么做、什么时候做以及为什么要做，描述了一组以某种顺序完成的活动</li>\n</ul>\n</li>\n<li><p>4个阶段</p>\n<ul>\n<li><p>初始阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li>确定所设立的项目是否可行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>细化阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li>识别出剩余的大多数用例</li>\n</ul>\n</li>\n<li><p>任务</p>\n<ul>\n<li><p>风险分析</p>\n<ul>\n<li><p>需求</p>\n</li>\n<li><p>技术</p>\n</li>\n<li><p>技能</p>\n</li>\n<li><p>政策</p>\n</li>\n</ul>\n</li>\n<li><p>高层分析和设计，做出结构型决策</p>\n</li>\n<li><p>产生简要体系结构</p>\n</li>\n<li><p>为构造阶段指定计划</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构造阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li>识别出剩余的用例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>迁移阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li><p>完成最后的软件产品和验收测试</p>\n</li>\n<li><p>完成用户文档编制以及用户培训等工作</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>敏捷过程(Agile Process)</p>\n<ul>\n<li><p>敏捷开发的价值观</p>\n<ul>\n<li><p>个人和交互 胜过 过程和工具</p>\n</li>\n<li><p>可以运行的软件 胜过 面面俱到的文档</p>\n</li>\n<li><p>客户合作 胜过 合同谈判</p>\n</li>\n<li><p>响应变化 胜过 遵循计划</p>\n</li>\n</ul>\n</li>\n<li><p>敏捷开发应遵循的12条原则</p>\n</li>\n<li><p>极限编程XP(extreme programming)</p>\n<ul>\n<li><p>4个价值观（软件项目从4个方面入手改善）</p>\n<ul>\n<li><p>加强交流</p>\n</li>\n<li><p>从简单做起</p>\n</li>\n<li><p>寻求反馈</p>\n</li>\n<li><p>勇于实事求是</p>\n</li>\n</ul>\n</li>\n<li><p>12个核心实践</p>\n<ul>\n<li><p>完善团队</p>\n</li>\n<li><p>计划对策</p>\n</li>\n<li><p>测试</p>\n</li>\n<li><p>简单设计</p>\n</li>\n<li><p>结对编程</p>\n</li>\n<li><p>小软件版本</p>\n</li>\n<li><p>设计改进</p>\n</li>\n<li><p>持续集成</p>\n</li>\n<li><p>代码集体共有</p>\n</li>\n<li><p>编码标准</p>\n</li>\n<li><p>系统比喻</p>\n</li>\n<li><p>可持续的速度</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件可行性研究</p>\n<ul>\n<li><p>研究内容</p>\n<ul>\n<li><p>经济</p>\n</li>\n<li><p>技术</p>\n</li>\n<li><p>运行</p>\n</li>\n<li><p>法律</p>\n</li>\n</ul>\n</li>\n<li><p>研究步骤</p>\n<ul>\n<li><ol>\n<li>对当前系统进行调查和研究</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>导出新系统的解决方案</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>提出推荐的方案</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>编写可行性论证报告</li>\n</ol>\n<ul>\n<li><p>系统概述</p>\n</li>\n<li><p>可行性分析</p>\n</li>\n<li><p>结论意见</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件风险分析</p>\n<ul>\n<li><p>风险识别</p>\n</li>\n<li><p>风险预测</p>\n<ul>\n<li><p>建立风险可能性尺度</p>\n</li>\n<li><p>估计对产品和项目的影响</p>\n</li>\n</ul>\n</li>\n<li><p>风险的驾驭和监控</p>\n</li>\n</ul>\n</li>\n<li><p>项目实施计划</p>\n<ul>\n<li><p>项目实施计划</p>\n</li>\n<li><p>质量保证计划</p>\n</li>\n<li><p>软件测试计划</p>\n</li>\n<li><p>文档编制计划</p>\n</li>\n<li><p>用户培训计划</p>\n</li>\n<li><p>综合支持计划</p>\n</li>\n<li><p>软件分发计划</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、结构化分析与设计\"><a href=\"#三、结构化分析与设计\" class=\"headerlink\" title=\"三、结构化分析与设计\"></a>三、结构化分析与设计</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li><p>基本任务与指导思想</p>\n<ul>\n<li><p>结构化分析</p>\n<ul>\n<li><p>基本任务</p>\n<ul>\n<li><p>建立系统分析模型</p>\n<ul>\n<li>分层DFD图</li>\n</ul>\n</li>\n<li><p>编写软件需求规格说明书(software requirements specification, SRS)</p>\n<ul>\n<li><p>主要内容</p>\n<ul>\n<li><p>引言</p>\n</li>\n<li><p>信息描述</p>\n</li>\n<li><p>功能描述</p>\n</li>\n<li><p>行为描述</p>\n</li>\n<li><p>接口描述</p>\n</li>\n<li><p>质量保证</p>\n</li>\n<li><p>其他需求</p>\n</li>\n</ul>\n</li>\n<li><p>要求</p>\n<ul>\n<li><p>准确性</p>\n<ul>\n<li>无错漏</li>\n</ul>\n</li>\n<li><p>防止二义性</p>\n<ul>\n<li>客户理解</li>\n</ul>\n</li>\n<li><p>直观易改</p>\n<ul>\n<li>尽可能采用图形和符号</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>指导思想</p>\n<ul>\n<li>抽象与分解</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化设计</p>\n<ul>\n<li><p>基本任务</p>\n<ul>\n<li><p>转换</p>\n<ul>\n<li><p>DFD</p>\n</li>\n<li><p>最终SC图</p>\n</li>\n</ul>\n</li>\n<li><p>描述</p>\n<ul>\n<li><p>用描述工具</p>\n<ul>\n<li>SC图</li>\n</ul>\n</li>\n<li><p>模块的</p>\n<ul>\n<li><p>算法</p>\n</li>\n<li><p>数据结构</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件设计</p>\n<ul>\n<li><p>总体设计</p>\n<ul>\n<li><p>初始SC图（映射）</p>\n</li>\n<li><p>最终SC图（优化）</p>\n</li>\n</ul>\n</li>\n<li><p>详细设计</p>\n<ul>\n<li>完成模块说明</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>指导思想</p>\n<ul>\n<li>分解和细化</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化分析(structured analysis,SA)</p>\n<ul>\n<li><p>组成</p>\n<ul>\n<li><p>数据字典(data dictionary, DD)</p>\n<ul>\n<li><p>实体联系图(entity-relation diagram, E-R图)</p>\n<ul>\n<li>数据对象说明</li>\n</ul>\n</li>\n<li><p>数据流图(data flow diagrm, DFD)</p>\n<ul>\n<li>加工规格说明(process specification, PSPEC)</li>\n</ul>\n</li>\n<li><p>状态变换图(status transform diagram, STD)</p>\n<ul>\n<li>控制规格说明(control specification, CSPEC)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>描述工具</p>\n<ul>\n<li><p>数据流图( DFD )</p>\n<ul>\n<li><p>源点和终点</p>\n</li>\n<li><p>数据流</p>\n</li>\n<li><p>加工</p>\n</li>\n<li><p>数据文件 &#x2F; 数据库 &#x2F; 数据存储</p>\n</li>\n</ul>\n</li>\n<li><p>数据字典( DD )</p>\n<ul>\n<li><p>数据项</p>\n</li>\n<li><p>数据流</p>\n</li>\n<li><p>加工处理</p>\n</li>\n<li><p>数据文件</p>\n</li>\n</ul>\n</li>\n<li><p>加工规格说明( PSPEC )</p>\n<ul>\n<li><p>结构化语言</p>\n</li>\n<li><p>判定表或判定树</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化设计(structured design,SD)</p>\n<ul>\n<li><p>组成</p>\n<ul>\n<li><p>过程设计</p>\n</li>\n<li><p>接口设计</p>\n</li>\n<li><p>体系结构设计</p>\n</li>\n<li><p>数据设计</p>\n</li>\n</ul>\n</li>\n<li><p>描述工具</p>\n<ul>\n<li><p>结构图(structure chart, SC)</p>\n<ul>\n<li><p>SC图的模块调用的表示方法</p>\n<ul>\n<li><p>简单调用</p>\n</li>\n<li><p>选择调用</p>\n</li>\n<li><p>循环调用</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"结构化系统分析与设计\"><a href=\"#结构化系统分析与设计\" class=\"headerlink\" title=\"结构化系统分析与设计\"></a>结构化系统分析与设计</h4><ul>\n<li><p>结构化系统分析SA</p>\n<ul>\n<li><p>基本步骤</p>\n<ul>\n<li><ol>\n<li>自顶向下对系统进行功能分解</li>\n</ol>\n<ul>\n<li>画出分层DFD图</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>有后向前定义系统的数据和加工</li>\n</ol>\n<ul>\n<li>编制DD和PSPEC</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>写出SRS</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>工具</p>\n<ul>\n<li><p>DFD</p>\n</li>\n<li><p>DD</p>\n</li>\n<li><p>结构化英语</p>\n</li>\n<li><p>判定表和判定树</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化系统设计SD</p>\n<ul>\n<li><p>结构化软件的设计，通常从DFD图到SC图的映射开始</p>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><p>复审DFD</p>\n</li>\n<li><p>鉴别DFD</p>\n</li>\n<li><p>把DFD映射为初始SC图</p>\n<ul>\n<li><p>变换映射</p>\n</li>\n<li><p>事物映射</p>\n</li>\n</ul>\n</li>\n<li><p>改进SC图获得最终SC图</p>\n<ul>\n<li><p>按照优化设计的指导原则</p>\n<ul>\n<li><p>对模块划分的原则</p>\n<ul>\n<li>总行数控制在10～100行，最好为30～60行</li>\n</ul>\n</li>\n<li><p>高扇入／低扇出的原则</p>\n<ul>\n<li><p>扇入</p>\n<ul>\n<li>增加模块的利用率，复用率</li>\n</ul>\n</li>\n<li><p>扇出</p>\n<ul>\n<li><p>3～4为宜</p>\n</li>\n<li><p>不超过5～7</p>\n<ul>\n<li>过多软件结构将呈煎饼形</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设计良好</p>\n<ul>\n<li><p>翁型结构</p>\n<ul>\n<li><p>两头小</p>\n</li>\n<li><p>中间大</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>DFD图</p>\n<ul>\n<li><p>变换型结构</p>\n<ul>\n<li><p>传入路径</p>\n</li>\n<li><p>变换中心</p>\n</li>\n<li><p>传出路径</p>\n</li>\n</ul>\n</li>\n<li><p>事务型结构</p>\n<ul>\n<li><p>接受路径</p>\n<ul>\n<li>至少一条</li>\n</ul>\n</li>\n<li><p>事务中心</p>\n</li>\n<li><p>动作路径</p>\n<ul>\n<li>若干条</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在大型系统的DFD中两者往往同时存在</p>\n</li>\n</ul>\n</li>\n<li><p>分层DFD图到最终SC图的一般过程</p>\n<ul>\n<li><p>SA（工具：DFD、PSPEC）——&gt;分析模型（分层DFD图+SRS）</p>\n</li>\n<li><p>SD（工具：SC图）— 映射 —＞初始设计模型（初始SC图）</p>\n</li>\n<li><p>初始设计模式（初始SC图）— 优化 —&gt;最终设计模型（最终SC图）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模块设计（详细设计）\"><a href=\"#模块设计（详细设计）\" class=\"headerlink\" title=\"模块设计（详细设计）\"></a>模块设计（详细设计）</h4><ul>\n<li><p>目的</p>\n<ul>\n<li><p>为SC图中的每个模块确定采用的</p>\n<ul>\n<li><p>算法</p>\n</li>\n<li><p>（块内）数据结构</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化的控制结构</p>\n<ul>\n<li><p>任何程序的逻辑均可用顺序、选择和循环（DO-WHILE型）3钟控制结构或它们的组合来实现</p>\n</li>\n<li><p>每个控制结构值应有</p>\n<ul>\n<li><p>一个入口</p>\n</li>\n<li><p>一个出口</p>\n</li>\n</ul>\n</li>\n<li><p>是详细设计阶段确保模块逻辑清晰的 关键技术</p>\n</li>\n</ul>\n</li>\n<li><p>表达工具</p>\n<ul>\n<li><p>流程图(flow diagram)</p>\n<ul>\n<li><p>最古老</p>\n</li>\n<li><p>特性（缺点）</p>\n<ul>\n<li><p>随意性</p>\n</li>\n<li><p>灵活性</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>伪代码(program design language,PDL)</p>\n<ul>\n<li>文字形式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"一、绪论\"><a href=\"#一、绪论\" class=\"headerlink\" title=\"一、绪论\"></a>一、绪论</h3><h4 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>软件</p>\n<ul>\n<li><p>软件 &#x3D; 程序 + 数据 + 文档</p>\n<ul>\n<li><p>程序</p>\n<ul>\n<li>程序是为了解决某个特定问题的而用程序设计语言描述的适合计算机处理的语句序列</li>\n</ul>\n</li>\n<li><p>数据</p>\n<ul>\n<li>是程序能正常操作信息的数据结构</li>\n</ul>\n</li>\n<li><p>文档</p>\n<ul>\n<li>软件开发活动的记录</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件是能够完成预定功能和性能的可执行的计算机程序，包括适用程序正常执行所需要的数据，以及有关描述程序操作和使用的文档</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特征</p>\n<ul>\n<li><p>不同与硬件</p>\n<ul>\n<li><p>设计</p>\n</li>\n<li><p>制造</p>\n</li>\n<li><p>维修</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件危机\"><a href=\"#软件危机\" class=\"headerlink\" title=\"软件危机\"></a>软件危机</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>落后的</p>\n<ul>\n<li>软件生成方式</li>\n</ul>\n</li>\n<li><p>无法满足</p>\n<ul>\n<li>迅速增长的计算机软件需求</li>\n</ul>\n</li>\n<li><p>从而导致</p>\n<ul>\n<li>软件开发与维护过程种出现一系列严重问题的现象</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>原因</p>\n<ul>\n<li><p>软件规模的扩大</p>\n<ul>\n<li>使软件复杂度的增加</li>\n</ul>\n</li>\n<li><p>软件维护费用的急剧上升</p>\n<ul>\n<li>直接威胁计算机应用的扩大</li>\n</ul>\n</li>\n<li><p>软件生产技术</p>\n<ul>\n<li><p>进步缓慢</p>\n</li>\n<li><p>是加剧软件危机的重要原因</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件工程学的范畴\"><a href=\"#软件工程学的范畴\" class=\"headerlink\" title=\"软件工程学的范畴\"></a>软件工程学的范畴</h4><ul>\n<li><p>软件开发方法学</p>\n<ul>\n<li><p>软件发展3阶段</p>\n<ul>\n<li><p>程序</p>\n</li>\n<li><p>软件</p>\n</li>\n<li><p>软件产品</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件工具</p>\n</li>\n<li><p>软件工程环境</p>\n</li>\n<li><p>软件工程管理</p>\n<ul>\n<li><p>目的</p>\n<ul>\n<li><p>为了按照进度及预算完成软件计划</p>\n</li>\n<li><p>实现预期的经济和社会效益</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3种编程范型\"><a href=\"#3种编程范型\" class=\"headerlink\" title=\"3种编程范型\"></a>3种编程范型</h4><ul>\n<li><p>过程式编程范型</p>\n<ul>\n<li><p>着眼于程序的过程和基本控制结构</p>\n</li>\n<li><p>粒度最小</p>\n</li>\n</ul>\n</li>\n<li><p>面向对象编程范型</p>\n<ul>\n<li><p>面向对象程序设计(object-oriented programming,OOP)</p>\n</li>\n<li><p>着眼与程序中的对象</p>\n<ul>\n<li>粒度较大</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于构件技术的编程范型</p>\n<ul>\n<li><p>基于构件的开发技术(component-based development,CBD)</p>\n</li>\n<li><p>着眼与适合整个领域(domain)的类对象</p>\n<ul>\n<li>粒度最大</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3代软件工程\"><a href=\"#3代软件工程\" class=\"headerlink\" title=\"3代软件工程\"></a>3代软件工程</h4><ul>\n<li><p>传统（经典）软件工程</p>\n<ul>\n<li><p>以结构化程序设计为基础</p>\n</li>\n<li><p>可区分为</p>\n<ul>\n<li><p>瀑布模型</p>\n</li>\n<li><p>原型模型等</p>\n</li>\n</ul>\n</li>\n<li><p>开发阶段</p>\n<ul>\n<li><p>结构化分析</p>\n</li>\n<li><p>结构化设计</p>\n</li>\n<li><p>面向过程编码</p>\n</li>\n<li><p>软件测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向对象软件工程</p>\n<ul>\n<li><p>以面向对象程序设计为基础</p>\n</li>\n<li><p>开发阶段</p>\n<ul>\n<li><p>OO分析与对象抽取</p>\n</li>\n<li><p>对象详细设计</p>\n</li>\n<li><p>面向对象的编码与测试</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>基于构件的软件工程</p>\n<ul>\n<li><p>以软件复用为目标、领域工程为基础</p>\n</li>\n<li><p>开发阶段</p>\n<ul>\n<li><p>领域分析和测试计划定制</p>\n</li>\n<li><p>领域设计</p>\n</li>\n<li><p>建立可复用构件库</p>\n</li>\n<li><p>按“构件集成模型”查找与集成构件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>通用</p>\n<ul>\n<li><p>原理与方法</p>\n<ul>\n<li><p>分析先于设计</p>\n</li>\n<li><p>设计先于编码</p>\n</li>\n<li><p>使程序（的结构）适合于问题（的结构）</p>\n</li>\n</ul>\n</li>\n<li><p>开发方法</p>\n<ul>\n<li><p>分析与设计都应该提倡建立模型</p>\n</li>\n<li><p>编码需遵循编码范型</p>\n</li>\n<li><p>要加强软件工具的开发，不断改进以工具集成为特定的软件工程环境</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"二、软件生存周期与软件过程\"><a href=\"#二、软件生存周期与软件过程\" class=\"headerlink\" title=\"二、软件生存周期与软件过程\"></a>二、软件生存周期与软件过程</h3><h4 id=\"软件生存周期\"><a href=\"#软件生存周期\" class=\"headerlink\" title=\"软件生存周期\"></a>软件生存周期</h4><ul>\n<li><p>概念</p>\n<ul>\n<li><p>定义</p>\n<ul>\n<li>一个软件从开始立项起，到废弃不用止</li>\n</ul>\n</li>\n<li><p>目的</p>\n<ul>\n<li><p>将生存周期划分为阶段</p>\n<ul>\n<li>使软件复杂性变得较易控制和管理</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>主要活动</p>\n<ul>\n<li><ol>\n<li>需求分析</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>软件分析</li>\n</ol>\n<ul>\n<li>从开发人员的视角对软件的需求模型进行分析</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>软件设计</li>\n</ol>\n<ul>\n<li><p>分为</p>\n<ul>\n<li><p>总体设计（概要设计）</p>\n<ul>\n<li>确定软件的总体结构和其他全局性的设计原则等</li>\n</ul>\n</li>\n<li><p>详细设计</p>\n<ul>\n<li><p>确定软件的每一个部件的</p>\n<ul>\n<li><p>数据结构</p>\n</li>\n<li><p>操作</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"4\">\n<li>编码（测试）</li>\n</ol>\n<ul>\n<li><p>按照选定的程序设计语言和可复用软件构件包，把设计文档翻译为源程序</p>\n</li>\n<li><p>单元测试通常与编码同时进行</p>\n</li>\n</ul>\n</li>\n<li><ol start=\"5\">\n<li>软件测试</li>\n</ol>\n<ul>\n<li><p>集成测试</p>\n</li>\n<li><p>确认测试（交付测试）</p>\n<ul>\n<li><p>包括</p>\n<ul>\n<li><p>α测试</p>\n</li>\n<li><p>β测试</p>\n</li>\n</ul>\n</li>\n<li><p>针对功能需求</p>\n</li>\n<li><p>独立的测试工程师</p>\n<ul>\n<li><p>执行测试</p>\n</li>\n<li><p>编写“测试报告”文档</p>\n<ul>\n<li><p>测试计划</p>\n</li>\n<li><p>测试用例</p>\n</li>\n<li><p>测试结果</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>系统测试</p>\n<ul>\n<li>针对性能等非功能需求</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><ol start=\"6\">\n<li>运行维护</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件过程\"><a href=\"#软件过程\" class=\"headerlink\" title=\"软件过程\"></a>软件过程</h4><ul>\n<li><p>定义</p>\n<ul>\n<li><p>过程process</p>\n<ul>\n<li>人们随时间的流逝而进行的各种活动</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>传统软件过程</p>\n<ul>\n<li><p>瀑布模型</p>\n<ul>\n<li><p>定义</p>\n<ul>\n<li><p>基于软件生存周期</p>\n</li>\n<li><p>线性开发模型</p>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>阶段间的顺序性和依赖性</p>\n<ul>\n<li><p>顺序性</p>\n<ul>\n<li>前一阶段完成后，后一阶段的工作才能开始</li>\n</ul>\n</li>\n<li><p>依赖性</p>\n<ul>\n<li>前一阶段的输出文档是后一阶段的输入文档</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>推迟实现的观点</p>\n<ul>\n<li>编码越早，开发时间越长</li>\n</ul>\n</li>\n<li><p>保证质量的观点</p>\n<ul>\n<li><ol>\n<li>每一阶段必须完成规定的文档</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>每一阶段都要对完成的文档进行复审</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>存在的问题</p>\n<ul>\n<li>很难在开发的初始阶段彻底弄清软件需求</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>快速原型模型</p>\n<ul>\n<li><p>中心思想</p>\n<ul>\n<li><p>先建立一个能够反映用户主要需求的原型</p>\n</li>\n<li><p>让用户实际看到一个未来系统的概貌</p>\n</li>\n<li><p>以便判断哪些功能是符合需要的，哪些方面需要改进</p>\n</li>\n<li><p>然后将原型反复改进，直至建立完全符合用户要求的新系统</p>\n</li>\n</ul>\n</li>\n<li><p>开发方法</p>\n<ul>\n<li><p>只包括未来系统的的</p>\n<ul>\n<li><p>主要功能</p>\n</li>\n<li><p>重要接口</p>\n</li>\n</ul>\n</li>\n<li><p>尽量使用能缩短开发周期的语言和工具</p>\n</li>\n<li><p>把原型系统作为基础</p>\n<ul>\n<li><p>通过补充和修改获得最终的实际系统</p>\n</li>\n<li><p>废弃大多数原型</p>\n<ul>\n<li>仅把建立原型的过程当作帮助定义软件需求的一种手段</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件演化模型(evolutionary model)</p>\n<ul>\n<li><p>增量模型</p>\n<ul>\n<li><p>结合</p>\n<ul>\n<li><p>瀑布模型</p>\n<ul>\n<li>顺序特征</li>\n</ul>\n</li>\n<li><p>快速原型模型</p>\n<ul>\n<li>迭代特征</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>把软件看作一系列相互联系的增量(increments)</p>\n<ul>\n<li><p>每次迭代完成其中一个增量</p>\n<ul>\n<li><p>其中任一个增量的开发流程均可按…完成</p>\n<ul>\n<li><p>瀑布模型</p>\n</li>\n<li><p>快速原型模型</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>螺旋模型</p>\n<ul>\n<li><p>结合…基础上演变而成</p>\n<ul>\n<li><p>瀑布模型</p>\n</li>\n<li><p>快速原型模型（增量模型）</p>\n</li>\n</ul>\n</li>\n<li><p>典型的迭代模型</p>\n<ul>\n<li><p>每轮螺旋均包含</p>\n<ul>\n<li><p>计划</p>\n<ul>\n<li><p>选定完成本轮螺旋所定目标的策略</p>\n<ul>\n<li><p>确定待开发系统的目标</p>\n</li>\n<li><p>选择方案</p>\n</li>\n<li><p>设定约束条件</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>风险分析</p>\n<ul>\n<li><p>评估本轮螺旋可能存在的风险</p>\n</li>\n<li><p>目的</p>\n<ul>\n<li><p>了解、分析并设法降低和排除</p>\n<ul>\n<li>因不确定因素导致的风险</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立原型</p>\n<ul>\n<li>实现本轮螺旋的目标</li>\n</ul>\n</li>\n<li><p>用户评审</p>\n</li>\n</ul>\n</li>\n<li><p>如果开发小组对项目的需求</p>\n<ul>\n<li><p>有较好的理解</p>\n<ul>\n<li>第一圈可直接用瀑布模型</li>\n</ul>\n</li>\n<li><p>反之</p>\n<ul>\n<li>需要经过多圈螺线，开发一个或多个原型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>在项目的所有阶段都考虑各类风险</p>\n</li>\n<li><p>不足</p>\n<ul>\n<li><p>难以使用户相信演化方法是可控的</p>\n</li>\n<li><p>过多的迭代周期也会增加开发成本和时间</p>\n</li>\n</ul>\n</li>\n<li><p>成败很大程度上依赖于</p>\n<ul>\n<li>风险评估的准确性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构件集成模型</p>\n<ul>\n<li><p>基本概念</p>\n<ul>\n<li><p>面向对象 &#x3D; 对象 + 分类 + 继承 + 消息通信</p>\n</li>\n<li><p>对象技术</p>\n<ul>\n<li><p>将事物封装成</p>\n<ul>\n<li><p>对象</p>\n<ul>\n<li><p>包含</p>\n<ul>\n<li><p>数据</p>\n</li>\n<li><p>加工该数据的方法</p>\n</li>\n</ul>\n</li>\n<li><p>抽象成</p>\n<ul>\n<li>类</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构件</p>\n<ul>\n<li>经过适当设计和实现的类</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特征</p>\n<ul>\n<li><p>利用预先封装好的构件来构造应用软件系统</p>\n</li>\n<li><p>融合了螺旋模型</p>\n<ul>\n<li>支持软件开发的迭代方法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>流程</p>\n<ul>\n<li><p>标识候选构件</p>\n</li>\n<li><p>查找构件</p>\n</li>\n<li><p>若存在则提取构件</p>\n</li>\n<li><p>若不存在则构造构件</p>\n</li>\n<li><p>将新构件存入库中</p>\n</li>\n<li><p>进行下一次迭代</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>形式化方法模型</p>\n<ul>\n<li><p>转换模型</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li><p>结合</p>\n<ul>\n<li><p>形式化软件开发</p>\n</li>\n<li><p>程序自动生成技术</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件开发过程</p>\n<ul>\n<li><ol>\n<li>确定形式化的需求规格说明书</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>进行自动的程序变换</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>对形式化开发记录进行测试</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>常用技术</p>\n<ul>\n<li><p>基于模型的需求规格说明书及其变换技术</p>\n</li>\n<li><p>基于代数结构的需求规格说明及其变换技术</p>\n</li>\n<li><p>基于时序逻辑的需求规格说明书和验证技术以及基于可视形式化的技术</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>净室模型</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li><p>形式化的增量开发模型</p>\n</li>\n<li><p>基本思想</p>\n<ul>\n<li><p>力求在分析和设计阶段就消除错误</p>\n</li>\n<li><p>然后再无缺陷或“洁净”的状态下实现软件的制作</p>\n</li>\n</ul>\n</li>\n<li><p>盒（box）</p>\n<ul>\n<li><p>净室开发把软件看成一系列的增量</p>\n</li>\n<li><p>每个增量是一个用形式化方式表示的“盒”</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>8种软件开发模型的主要特点</p>\n<ul>\n<li><p>开发模型</p>\n<ul>\n<li><p>特点</p>\n<ul>\n<li>适用场景</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>瀑布模型</p>\n<ul>\n<li><p>线性模型</p>\n<ul>\n<li>需求明确的中、小型软件开发</li>\n</ul>\n</li>\n<li><p>每一阶段必须完成规定的开发文档</p>\n</li>\n</ul>\n</li>\n<li><p>快速原型模型</p>\n<ul>\n<li><p>用户介入早</p>\n<ul>\n<li>需求模糊的小型软件开发</li>\n</ul>\n</li>\n<li><p>通过迭代完善用户需求，应用快速开发工具</p>\n</li>\n</ul>\n</li>\n<li><p>增量模型</p>\n<ul>\n<li><p>每次迭代完成一个增量，可用于OO开发</p>\n<ul>\n<li>容易分块的大型软件开发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>螺旋模型</p>\n<ul>\n<li><p>典型迭代模型，重视风险分析，可用于OO开发</p>\n<ul>\n<li>具有不确定性的大型软件开发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构件集成模型</p>\n<ul>\n<li><p>软件开发与构件开发平行进行，主要用于OO开发</p>\n<ul>\n<li>领域工程、行业的中型软件开发</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>转换模型</p>\n<ul>\n<li><p>形式化的需求规格说明书，自动的程序变换系统</p>\n<ul>\n<li>理想化模型，尚无成熟工具支持</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>净室模型</p>\n<ul>\n<li><p>形式化的增量开发模型</p>\n<ul>\n<li>开发团队熟悉形式化方法，中小型软件开发</li>\n</ul>\n</li>\n<li><p>在洁净状态下实现软件制作</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>统一过程和敏捷过程</p>\n<ul>\n<li><p>统一过程(Rational Unified Process,RUP)</p>\n<ul>\n<li><p>概念</p>\n<ul>\n<li>描述了软件开发中各个环节应该做什么、怎么做、什么时候做以及为什么要做，描述了一组以某种顺序完成的活动</li>\n</ul>\n</li>\n<li><p>4个阶段</p>\n<ul>\n<li><p>初始阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li>确定所设立的项目是否可行</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>细化阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li>识别出剩余的大多数用例</li>\n</ul>\n</li>\n<li><p>任务</p>\n<ul>\n<li><p>风险分析</p>\n<ul>\n<li><p>需求</p>\n</li>\n<li><p>技术</p>\n</li>\n<li><p>技能</p>\n</li>\n<li><p>政策</p>\n</li>\n</ul>\n</li>\n<li><p>高层分析和设计，做出结构型决策</p>\n</li>\n<li><p>产生简要体系结构</p>\n</li>\n<li><p>为构造阶段指定计划</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>构造阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li>识别出剩余的用例</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>迁移阶段</p>\n<ul>\n<li><p>目标</p>\n<ul>\n<li><p>完成最后的软件产品和验收测试</p>\n</li>\n<li><p>完成用户文档编制以及用户培训等工作</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>敏捷过程(Agile Process)</p>\n<ul>\n<li><p>敏捷开发的价值观</p>\n<ul>\n<li><p>个人和交互 胜过 过程和工具</p>\n</li>\n<li><p>可以运行的软件 胜过 面面俱到的文档</p>\n</li>\n<li><p>客户合作 胜过 合同谈判</p>\n</li>\n<li><p>响应变化 胜过 遵循计划</p>\n</li>\n</ul>\n</li>\n<li><p>敏捷开发应遵循的12条原则</p>\n</li>\n<li><p>极限编程XP(extreme programming)</p>\n<ul>\n<li><p>4个价值观（软件项目从4个方面入手改善）</p>\n<ul>\n<li><p>加强交流</p>\n</li>\n<li><p>从简单做起</p>\n</li>\n<li><p>寻求反馈</p>\n</li>\n<li><p>勇于实事求是</p>\n</li>\n</ul>\n</li>\n<li><p>12个核心实践</p>\n<ul>\n<li><p>完善团队</p>\n</li>\n<li><p>计划对策</p>\n</li>\n<li><p>测试</p>\n</li>\n<li><p>简单设计</p>\n</li>\n<li><p>结对编程</p>\n</li>\n<li><p>小软件版本</p>\n</li>\n<li><p>设计改进</p>\n</li>\n<li><p>持续集成</p>\n</li>\n<li><p>代码集体共有</p>\n</li>\n<li><p>编码标准</p>\n</li>\n<li><p>系统比喻</p>\n</li>\n<li><p>可持续的速度</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件可行性研究</p>\n<ul>\n<li><p>研究内容</p>\n<ul>\n<li><p>经济</p>\n</li>\n<li><p>技术</p>\n</li>\n<li><p>运行</p>\n</li>\n<li><p>法律</p>\n</li>\n</ul>\n</li>\n<li><p>研究步骤</p>\n<ul>\n<li><ol>\n<li>对当前系统进行调查和研究</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>导出新系统的解决方案</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>提出推荐的方案</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>编写可行性论证报告</li>\n</ol>\n<ul>\n<li><p>系统概述</p>\n</li>\n<li><p>可行性分析</p>\n</li>\n<li><p>结论意见</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件风险分析</p>\n<ul>\n<li><p>风险识别</p>\n</li>\n<li><p>风险预测</p>\n<ul>\n<li><p>建立风险可能性尺度</p>\n</li>\n<li><p>估计对产品和项目的影响</p>\n</li>\n</ul>\n</li>\n<li><p>风险的驾驭和监控</p>\n</li>\n</ul>\n</li>\n<li><p>项目实施计划</p>\n<ul>\n<li><p>项目实施计划</p>\n</li>\n<li><p>质量保证计划</p>\n</li>\n<li><p>软件测试计划</p>\n</li>\n<li><p>文档编制计划</p>\n</li>\n<li><p>用户培训计划</p>\n</li>\n<li><p>综合支持计划</p>\n</li>\n<li><p>软件分发计划</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"三、结构化分析与设计\"><a href=\"#三、结构化分析与设计\" class=\"headerlink\" title=\"三、结构化分析与设计\"></a>三、结构化分析与设计</h3><h4 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h4><ul>\n<li><p>基本任务与指导思想</p>\n<ul>\n<li><p>结构化分析</p>\n<ul>\n<li><p>基本任务</p>\n<ul>\n<li><p>建立系统分析模型</p>\n<ul>\n<li>分层DFD图</li>\n</ul>\n</li>\n<li><p>编写软件需求规格说明书(software requirements specification, SRS)</p>\n<ul>\n<li><p>主要内容</p>\n<ul>\n<li><p>引言</p>\n</li>\n<li><p>信息描述</p>\n</li>\n<li><p>功能描述</p>\n</li>\n<li><p>行为描述</p>\n</li>\n<li><p>接口描述</p>\n</li>\n<li><p>质量保证</p>\n</li>\n<li><p>其他需求</p>\n</li>\n</ul>\n</li>\n<li><p>要求</p>\n<ul>\n<li><p>准确性</p>\n<ul>\n<li>无错漏</li>\n</ul>\n</li>\n<li><p>防止二义性</p>\n<ul>\n<li>客户理解</li>\n</ul>\n</li>\n<li><p>直观易改</p>\n<ul>\n<li>尽可能采用图形和符号</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>指导思想</p>\n<ul>\n<li>抽象与分解</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化设计</p>\n<ul>\n<li><p>基本任务</p>\n<ul>\n<li><p>转换</p>\n<ul>\n<li><p>DFD</p>\n</li>\n<li><p>最终SC图</p>\n</li>\n</ul>\n</li>\n<li><p>描述</p>\n<ul>\n<li><p>用描述工具</p>\n<ul>\n<li>SC图</li>\n</ul>\n</li>\n<li><p>模块的</p>\n<ul>\n<li><p>算法</p>\n</li>\n<li><p>数据结构</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件设计</p>\n<ul>\n<li><p>总体设计</p>\n<ul>\n<li><p>初始SC图（映射）</p>\n</li>\n<li><p>最终SC图（优化）</p>\n</li>\n</ul>\n</li>\n<li><p>详细设计</p>\n<ul>\n<li>完成模块说明</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>指导思想</p>\n<ul>\n<li>分解和细化</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化分析(structured analysis,SA)</p>\n<ul>\n<li><p>组成</p>\n<ul>\n<li><p>数据字典(data dictionary, DD)</p>\n<ul>\n<li><p>实体联系图(entity-relation diagram, E-R图)</p>\n<ul>\n<li>数据对象说明</li>\n</ul>\n</li>\n<li><p>数据流图(data flow diagrm, DFD)</p>\n<ul>\n<li>加工规格说明(process specification, PSPEC)</li>\n</ul>\n</li>\n<li><p>状态变换图(status transform diagram, STD)</p>\n<ul>\n<li>控制规格说明(control specification, CSPEC)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>描述工具</p>\n<ul>\n<li><p>数据流图( DFD )</p>\n<ul>\n<li><p>源点和终点</p>\n</li>\n<li><p>数据流</p>\n</li>\n<li><p>加工</p>\n</li>\n<li><p>数据文件 &#x2F; 数据库 &#x2F; 数据存储</p>\n</li>\n</ul>\n</li>\n<li><p>数据字典( DD )</p>\n<ul>\n<li><p>数据项</p>\n</li>\n<li><p>数据流</p>\n</li>\n<li><p>加工处理</p>\n</li>\n<li><p>数据文件</p>\n</li>\n</ul>\n</li>\n<li><p>加工规格说明( PSPEC )</p>\n<ul>\n<li><p>结构化语言</p>\n</li>\n<li><p>判定表或判定树</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化设计(structured design,SD)</p>\n<ul>\n<li><p>组成</p>\n<ul>\n<li><p>过程设计</p>\n</li>\n<li><p>接口设计</p>\n</li>\n<li><p>体系结构设计</p>\n</li>\n<li><p>数据设计</p>\n</li>\n</ul>\n</li>\n<li><p>描述工具</p>\n<ul>\n<li><p>结构图(structure chart, SC)</p>\n<ul>\n<li><p>SC图的模块调用的表示方法</p>\n<ul>\n<li><p>简单调用</p>\n</li>\n<li><p>选择调用</p>\n</li>\n<li><p>循环调用</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"结构化系统分析与设计\"><a href=\"#结构化系统分析与设计\" class=\"headerlink\" title=\"结构化系统分析与设计\"></a>结构化系统分析与设计</h4><ul>\n<li><p>结构化系统分析SA</p>\n<ul>\n<li><p>基本步骤</p>\n<ul>\n<li><ol>\n<li>自顶向下对系统进行功能分解</li>\n</ol>\n<ul>\n<li>画出分层DFD图</li>\n</ul>\n</li>\n<li><ol start=\"2\">\n<li>有后向前定义系统的数据和加工</li>\n</ol>\n<ul>\n<li>编制DD和PSPEC</li>\n</ul>\n</li>\n<li><ol start=\"3\">\n<li>写出SRS</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>工具</p>\n<ul>\n<li><p>DFD</p>\n</li>\n<li><p>DD</p>\n</li>\n<li><p>结构化英语</p>\n</li>\n<li><p>判定表和判定树</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化系统设计SD</p>\n<ul>\n<li><p>结构化软件的设计，通常从DFD图到SC图的映射开始</p>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><p>复审DFD</p>\n</li>\n<li><p>鉴别DFD</p>\n</li>\n<li><p>把DFD映射为初始SC图</p>\n<ul>\n<li><p>变换映射</p>\n</li>\n<li><p>事物映射</p>\n</li>\n</ul>\n</li>\n<li><p>改进SC图获得最终SC图</p>\n<ul>\n<li><p>按照优化设计的指导原则</p>\n<ul>\n<li><p>对模块划分的原则</p>\n<ul>\n<li>总行数控制在10～100行，最好为30～60行</li>\n</ul>\n</li>\n<li><p>高扇入／低扇出的原则</p>\n<ul>\n<li><p>扇入</p>\n<ul>\n<li>增加模块的利用率，复用率</li>\n</ul>\n</li>\n<li><p>扇出</p>\n<ul>\n<li><p>3～4为宜</p>\n</li>\n<li><p>不超过5～7</p>\n<ul>\n<li>过多软件结构将呈煎饼形</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设计良好</p>\n<ul>\n<li><p>翁型结构</p>\n<ul>\n<li><p>两头小</p>\n</li>\n<li><p>中间大</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>DFD图</p>\n<ul>\n<li><p>变换型结构</p>\n<ul>\n<li><p>传入路径</p>\n</li>\n<li><p>变换中心</p>\n</li>\n<li><p>传出路径</p>\n</li>\n</ul>\n</li>\n<li><p>事务型结构</p>\n<ul>\n<li><p>接受路径</p>\n<ul>\n<li>至少一条</li>\n</ul>\n</li>\n<li><p>事务中心</p>\n</li>\n<li><p>动作路径</p>\n<ul>\n<li>若干条</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>在大型系统的DFD中两者往往同时存在</p>\n</li>\n</ul>\n</li>\n<li><p>分层DFD图到最终SC图的一般过程</p>\n<ul>\n<li><p>SA（工具：DFD、PSPEC）——&gt;分析模型（分层DFD图+SRS）</p>\n</li>\n<li><p>SD（工具：SC图）— 映射 —＞初始设计模型（初始SC图）</p>\n</li>\n<li><p>初始设计模式（初始SC图）— 优化 —&gt;最终设计模型（最终SC图）</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"模块设计（详细设计）\"><a href=\"#模块设计（详细设计）\" class=\"headerlink\" title=\"模块设计（详细设计）\"></a>模块设计（详细设计）</h4><ul>\n<li><p>目的</p>\n<ul>\n<li><p>为SC图中的每个模块确定采用的</p>\n<ul>\n<li><p>算法</p>\n</li>\n<li><p>（块内）数据结构</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结构化的控制结构</p>\n<ul>\n<li><p>任何程序的逻辑均可用顺序、选择和循环（DO-WHILE型）3钟控制结构或它们的组合来实现</p>\n</li>\n<li><p>每个控制结构值应有</p>\n<ul>\n<li><p>一个入口</p>\n</li>\n<li><p>一个出口</p>\n</li>\n</ul>\n</li>\n<li><p>是详细设计阶段确保模块逻辑清晰的 关键技术</p>\n</li>\n</ul>\n</li>\n<li><p>表达工具</p>\n<ul>\n<li><p>流程图(flow diagram)</p>\n<ul>\n<li><p>最古老</p>\n</li>\n<li><p>特性（缺点）</p>\n<ul>\n<li><p>随意性</p>\n</li>\n<li><p>灵活性</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>伪代码(program design language,PDL)</p>\n<ul>\n<li>文字形式</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"软件工程（下）","date":"2024-10-12T02:00:00.000Z","_content":"\n\n\n### 九、软件维护\n\n#### 种类\n\n- 完善性维护50%\n\n- 适应性维护25%\n\n- 纠错性维护21%\n\n- 预防性维护4%\n\n#### 软件可维护性\n\n- 含义\n\n\t- 可理解性\n\n\t- 可修改性\n\n\t- 可测试性\n\n- 提高软件可维护性的途径\n\n\t- 提供完整和一致的文档\n\n\t\t- 帮助维护人员读懂程序\n\n\t\t- 方便被维护软件的测试\n\n\t- 采用现代化的开发方法\n\n#### 实施\n\n#### 管理\n\n#### 软件配置管理\n\n#### 软件再工程\n\n- 将新技术和新工具应用于老的软件的一种较“彻底”的预防性维护\n\n- 逆向工程\n\n- 重构\n\n### 十、软件复用\n\n#### 基本概念\n\n- 定义\n\n\t- 对构造新的软件系统的过程中，对已存在的软件人工制品的使用技术\n\n- 措施\n\n\t- 基础设施\n\n\t- 培训计划\n\n\t- 软件开发方法\n\n\t- 激励措施\n\n- 粒度\n\n\t- 源代码复用\n\n\t- 软件体系结构复用\n\n\t- 应用程序生成器\n\n\t- 领域特定的软件体系结构的复用\n\n#### 领域工程\n\n- 横向与纵向\n\n\t- 横向复用\n\n\t\t- 复用不同应用领域中的软件元素\n\n\t- 纵向复用\n\n\t\t- 在一类具有较多公共性的应用领域之间，对软件构件进行复用\n\n\t\t- 主要活动\n\n\t\t\t- 实施领域分析\n\n\t\t\t\t- 主要目标\n\n\t\t\t\t\t- 获得领域模型\n\n\t\t\t\t- 步骤\n\n\t\t\t\t\t- 1. 选择特定的领域\n\n\t\t\t\t\t- 2. 抽取具有最优复用的功能\n\n\t\t\t\t\t- 3. 标识该功能\n\n\t\t\t\t\t- 4. 建立领域分析模型\n\n\t\t\t\t\t- 5. 定义需求规约，得出需求规约构件和若干个连接子配置构成的领域模型\n\n\t\t\t- 开发软件构件\n\n\t\t\t\t- 单个构件的特征\n\n\t\t\t\t\t- 通用性\n\n\t\t\t\t\t- 可变性\n\n\t\t\t\t\t- 易组装性\n\n\t\t\t\t- 领域构件的特征\n\n\t\t\t\t\t- 包含单个构建的特征\n\n\t\t\t\t\t- 标准数据\n\n\t\t\t\t\t- 标准接口协议\n\n\t\t\t\t\t- 程序模板\n\n\t\t\t\t- 构件技术\n\n\t\t\t\t\t- COM/OLE\n\n\t\t\t\t\t- CORBA\n\n\t\t\t\t\t- OpenDoc\n\n\t\t\t- 建立软件构件库\n\n\t\t\t\t- 3种分类模式\n\n\t\t\t\t\t- 枚举分类\n\n\t\t\t\t\t- 刻面分类\n\n\t\t\t\t\t- 属性-值分类\n\n#### 基于构件的软件开发(component based software development,CBSD)\n\n- 构件集成模型\n\n- 应用系统工程(application system engineering,ASE)\n\n\t- 基本步骤\n\n\t\t- ASE1: 获取需求\n\n\t\t- ASE2: 分析\n\n\t\t- ASE3: 设计应用系统\n\n\t\t- ASE4: 实现应用系统\n\n\t\t- ASE5: 测试应用系统\n\n\t\t- ASE6: 应用系统打包\n\n#### 面向对象与软件复用\n\n- OO方法对软件复用的支持\n\n\t- OOA模型\n\n\t- OOA与OOD的分工\n\n\t- 对象的表示\n\n\t- 一般－特殊结构\n\n\t- 整体－部分结构\n\n\t- 示例连接\n\n\t- 类描述模板\n\n\t- 用例\n\n- 复用技术对OO方法的支持\n\n\t- 类库\n\n\t- 构件库\n\n\t- 构架库\n\n\t- OOA过程\n\n### 十一、软件工程管理\n\n#### 管理的目的与内容\n\n- 目的\n\n\t- 为了按照预定的\n\n\t\t- 时间\n\n\t\t- 费用\n\n\t- 成功地完成软件的\n\n\t\t- 计划\n\n\t\t- 开发\n\n\t\t- 维护\n\n- 内容\n\n\t- 费用\n\n\t\t- 成本核算\n\n\t- 质量\n\n\t\t- 保证软件产品的（包括最终程序和文档）的质量\n\n\t- 人员\n\n\t- 进度\n\n\t\t- 网络图（PERT图）\n\n\t\t\t- 描述各部分工作进度的相互关系\n\n#### 软件估算模型\n\n- 资源估算模型\n\n\t- 静态单变量资源模型\n\n\t- Putnam模型\n\n\t\t- 多变量资源模型\n\n\t\t- 概念\n\n\t\t\t- L\n\n\t\t\t\t- 源程序长度（单位：行）\n\n\t\t\t- T\n\n\t\t\t\t- 开发时间（单位：年）\n\n\t\t\t- K\n\n\t\t\t\t- 全生存周期（含维护）所需要的工作量（单位：人-年）\n\n\t\t- 特点\n\n\t\t\t- 在同一个模型中给出了K（或E）、L和T三者之间的关系\n\n- COCOMO模型\n\n\t- 构造性成本模型(constructive cost model)\n\n\t- 从2个方面改进了静态单变量模型\n\n\t\t- 按照软件的应用领域和复杂程度，将它们分为\n\n\t\t\t- 组织(organic)\n\n\t\t\t- 半独立(semidetached)\n\n\t\t\t- 嵌入(embeded)\n\n\t\t- 在模型中增加了一个 工作量调节因子(effort adjustment factor,EAF)，反映各种有关因素对软件开发的影响\n\n#### 软件成本估计\n\n- 地位\n\n\t- 软件费用管理的核心\n\n\t- 软件工程管理中最困难最易出错的问题之一\n\n- 方法\n\n\t- 自顶向下估计\n\n\t\t- 着眼于软件的整体\n\n\t- 由底向上估计\n\n\t\t- 从一个个任务单元开始\n\n\t- 算法模型(algorithmic model)\n\n\t\t- 就是资源模型\n\n#### 人员的分配与组织\n\n- 指导原则\n\n\t- Rayleigh-Norden曲线\n\n\t\t- 说明科研及开发项目在实施期间所需要的人力\n\n\t\t- 软件生存周期内各个阶段需要的人力分配，与该曲线形状十分相似\n\n\t- 两条重要定律\n\n\t\t- 人员-时间权衡定律\n\n\t\t\t- 开发工作量与开发时间的4次方成反比\n\n\t\t- Brooks定律\n\n\t\t\t- 向一个已经延迟的项目追加开发人员，可能使它完成得更晚\n\n#### 项目进度安排\n\n- 计划评审技术(Program Evaluation and Review Technique,PERT)\n\n\t- 1. 建立PERT图\n\n\t- 2. 找出关键路径(critical path)\n\n\t- 3. 标出最迟开始时间\n\n\t- 4. PERT图的使用\n\n- Gantt图\n\n\t- 缺点\n\n\t\t- 不能显示各项活动之间的依赖关系\n\n\t- 适用于简单的软件项目\n\n### 十二、软件质量管理\n\n#### 从质量保证到质量认证\n\n- 质量保证\n\n\t- 单个软件\n\n- 质量认证\n\n\t- 软件企业的整体资质\n\n- 质量管理三阶段\n\n\t- 1. 质量检验阶段\n\n\t- 2. 全面质量管理阶段\n\n\t- 3. 质量认证阶段\n\n#### 质量保证\n\n- 软件的质量属性\n\n\t- 功能性\n\n\t- 可靠性\n\n\t- 易用性\n\n\t- 效率\n\n\t- 可维护性\n\n\t- 可移植性\n\n- 质量保证的活动内容\n\n\t- 复审\n\n\t- 开发方法\n\n\t- 配置控制\n\n\t- 软件测试\n\n#### 软件可靠性\n\n- 定义\n\n\t- 在给定的时间内，程序按照规定的条件成功地运行的概率\n\n- 分级\n\n\t- 甚低\n\n\t- 低\n\n\t- 正常\n\n\t- 高\n\n\t- 甚高\n\n- 可靠性模型\n\n\t- 正比于遗留故障数的宏观模型\n\n\t- 平均无故障时间模型\n\n\t- 错误植入模型\n\n- 软件容错技术\n\n\t- 容错软件\n\n\t\t- 屏蔽错误\n\n\t\t- 修复错误\n\n\t\t- 减少影响\n\n\t- 冗余技术\n\n\t\t- 结构冗余\n\n\t\t\t- 静态冗余\n\n\t\t\t- 动态冗余\n\n\t\t\t- 混合冗余\n\n\t\t- 时间冗余\n\n\t\t- 信息冗余\n\n\t- 容错软件的设计\n\n\t\t- 1. 设计非容错结构\n\n\t\t- 2. 分析可能的软、硬件错误，确定容错范围\n\n\t\t- 3. 确定冗余技术，并评估其容错效果\n\n\t\t- 4. 修改设计，直至获得满意结果\n\n#### 程序正确性证明\n\n- 通过数学的方法，证明程序具有某些需要的性质\n\n- 输入-输出断言法\n\n#### CMM软件能力成熟度模型\n\n- 基本概念\n\n\t- 软件过程\n\n\t- 关键过程域\n\n\t\t- 相互关联的若干软件实践活动和有关基础设施的一个集合\n\n- 软件能力成熟度等级\n\n\t- 1级：初始级\n\n\t- 2级：可重复级\n\n\t- 3级：已定义级\n\n\t- 4级：已管理级\n\n\t- 5级：优化级\n\n- CMM应用\n\n\t- 能力评估\n\n\t\t- 软件过程评估\n\n\t\t- 软件能力评价\n\n\t- 过程改善\n\n- CMM评估的实施\n\n\t- CBA-SCE\n\n\t\t- 对机构的软件能力进行评估\n\n\t- CBA-IPI\n\n\t\t- 对内部的过程改进实施评估\n\n- 软件过程评估的SPICE国际标准\n\n\t- software process improvement and capability determination\n\n#### ISO 9000国际标准\n\n#### 软件度量\n\n- 项目度量\n\n\t- 个人开发工作的测度\n\n- 过程度量\n\n\t- 整个企业中全体项目组开发能力的衡量\n\n### 十三、软件工程环境\n\n#### 概念\n\n- 定义\n\n\t- 支持软件产品开发、维护和管理的软件系统\n\n- 特点\n\n\t- 友好和统一的用户界面\n\n\t\t- 具有弹出功能的多级菜单\n\n\t\t- 屏幕提示和在线帮助技术\n\n\t\t- 多窗口技术\n\n\t\t- 向导技术\n\n\t- 集成化的软件工具\n\n\t\t- 数据集成\n\n\t\t- 界面集成\n\n\t\t- 控制集成\n\n\t\t- 过程集成\n\n\t\t- 平台集成\n\n- 理想环境的模型\n\n- CASE环境\n\n\t- 计算机辅助软件工程，CASE，computer-aided software engineering\n\n\t- 组成构件\n\n\t\t- CASE工具\n\n\t\t\t- 支持软件开发的工具\n\n\t\t\t- 支持软件维护的工具\n\n\t\t\t- 支持软件管理过程和支持过程的工具\n\n\t\t- 集成化框架\n\n\t\t\t- 建立环境信息仓库\n\n\t\t\t\t- 数据完整性\n\n\t\t\t\t- 信息共享\n\n\t\t\t\t- 数据-工具 集成\n\n\t\t\t\t- 数据-数据 集成\n\n\t\t\t\t- 文档标准化\n\n\t\t- 为可移植性服务的机构\n\n\t\t- 操作系统\n\n\t\t- 硬件平台\n\n\t\t- 环境体系结构\n\n\t- 一般结构\n\n\t\t- CASE集成框架的典型结构\n\n\t\t\t- 用户界面层\n\n\t\t\t- 工具层\n\n\t\t\t- 对象管理层\n\n\t\t\t- 共享中心库层\n\n\t- 实例\n\n\t\t- Rational SUITE Enterprise Studio\n\n\t\t- 青鸟系统\n\n### 十四、软件工程高级课题\n\n#### Web工程\n\n- Web开发\n\n\t- 开发团队\n\n\t\t- Web决策人员\n\n\t\t- 内容提供人员\n\n\t\t- Web开发人员\n\n\t\t- Web发布人员\n\n\t\t- Web支持人员\n\n\t\t- Web管理员（站长）\n\n\t- 特点\n\n\t\t- WebApp常常以增量的方式开发\n\n\t\t- 需求经常发生变化\n\n\t\t- 开发期限较短\n\n\t- 分析\n\n\t\t- 内容\n\n\t\t- 交互\n\n\t\t- 功能\n\n\t\t- 配置\n\n\t\t- 导航关系\n\n\t\t- 安全\n\n\t\t\t- Web站点安全\n\n\t\t\t- Web站点风险\n\n\t\t\t\t- 机密信息窃取\n\n\t\t\t\t- 数据和软、硬件系统被破坏\n\n\t- 设计\n\n\t\t- 设计原则和目标\n\n\t\t\t- 简单\n\n\t\t\t- 美观\n\n\t\t\t- 整体保持一致\n\n\t\t- 界面设计\n\n\t\t- 设计方法\n\n\t\t\t- 无定式\n\n\t\t- 设计中的问题\n\n\t- 测试\n\n#### 基于体系结构的软件开发\n\n- 应用软件的体系结构\n\n\t- 程序\n\n\t- 业务\n\n\t- 技术\n\n\t- 信息\n\n#### 面向方面的软件开发\n\n- 面向方面编程(aspect-oriented programming,AOP)\n\n\t- 基本概念\n\n\t\t- 关注点\n\n\t\t- 方面\n\n\t\t- 连接点\n\n\t\t- 织入\n\n\t- AOP设计的步骤\n\n\t\t- 1. 对需求规约经行方面分解\n\n\t\t- 2. 对标识出的方面分别通过程序机制实现\n\n\t\t- 3. 用方面编织器将所有的单元编排重组在一起，形成可运行系统\n\n- 面向方面软件开发(aspect-oriented software development,AOSD)\n\n\t- 开发步骤\n\n\t\t- 1. 方面分解\n\n\t\t- 2. 关注点实现\n\n\t\t- 3. 方面的重新组合\n\n#### 形式化的软件开发\n\n- 模型化\n\n\t- 现实世界\n\n\t- 模型表示\n\n\t- 计算机系统\n\n- 模型变换\n\n\t- 形式化规格\n\n\t- 形式化验证\n\n\t- 程序求精\n\n","source":"_posts/4软件工程（下）.md","raw":"---\n\ntitle: 软件工程（下） \n\ndate: 2024-10-12 10:00:00 \n\n\ncategories: Notes \n\n---\n\n\n\n### 九、软件维护\n\n#### 种类\n\n- 完善性维护50%\n\n- 适应性维护25%\n\n- 纠错性维护21%\n\n- 预防性维护4%\n\n#### 软件可维护性\n\n- 含义\n\n\t- 可理解性\n\n\t- 可修改性\n\n\t- 可测试性\n\n- 提高软件可维护性的途径\n\n\t- 提供完整和一致的文档\n\n\t\t- 帮助维护人员读懂程序\n\n\t\t- 方便被维护软件的测试\n\n\t- 采用现代化的开发方法\n\n#### 实施\n\n#### 管理\n\n#### 软件配置管理\n\n#### 软件再工程\n\n- 将新技术和新工具应用于老的软件的一种较“彻底”的预防性维护\n\n- 逆向工程\n\n- 重构\n\n### 十、软件复用\n\n#### 基本概念\n\n- 定义\n\n\t- 对构造新的软件系统的过程中，对已存在的软件人工制品的使用技术\n\n- 措施\n\n\t- 基础设施\n\n\t- 培训计划\n\n\t- 软件开发方法\n\n\t- 激励措施\n\n- 粒度\n\n\t- 源代码复用\n\n\t- 软件体系结构复用\n\n\t- 应用程序生成器\n\n\t- 领域特定的软件体系结构的复用\n\n#### 领域工程\n\n- 横向与纵向\n\n\t- 横向复用\n\n\t\t- 复用不同应用领域中的软件元素\n\n\t- 纵向复用\n\n\t\t- 在一类具有较多公共性的应用领域之间，对软件构件进行复用\n\n\t\t- 主要活动\n\n\t\t\t- 实施领域分析\n\n\t\t\t\t- 主要目标\n\n\t\t\t\t\t- 获得领域模型\n\n\t\t\t\t- 步骤\n\n\t\t\t\t\t- 1. 选择特定的领域\n\n\t\t\t\t\t- 2. 抽取具有最优复用的功能\n\n\t\t\t\t\t- 3. 标识该功能\n\n\t\t\t\t\t- 4. 建立领域分析模型\n\n\t\t\t\t\t- 5. 定义需求规约，得出需求规约构件和若干个连接子配置构成的领域模型\n\n\t\t\t- 开发软件构件\n\n\t\t\t\t- 单个构件的特征\n\n\t\t\t\t\t- 通用性\n\n\t\t\t\t\t- 可变性\n\n\t\t\t\t\t- 易组装性\n\n\t\t\t\t- 领域构件的特征\n\n\t\t\t\t\t- 包含单个构建的特征\n\n\t\t\t\t\t- 标准数据\n\n\t\t\t\t\t- 标准接口协议\n\n\t\t\t\t\t- 程序模板\n\n\t\t\t\t- 构件技术\n\n\t\t\t\t\t- COM/OLE\n\n\t\t\t\t\t- CORBA\n\n\t\t\t\t\t- OpenDoc\n\n\t\t\t- 建立软件构件库\n\n\t\t\t\t- 3种分类模式\n\n\t\t\t\t\t- 枚举分类\n\n\t\t\t\t\t- 刻面分类\n\n\t\t\t\t\t- 属性-值分类\n\n#### 基于构件的软件开发(component based software development,CBSD)\n\n- 构件集成模型\n\n- 应用系统工程(application system engineering,ASE)\n\n\t- 基本步骤\n\n\t\t- ASE1: 获取需求\n\n\t\t- ASE2: 分析\n\n\t\t- ASE3: 设计应用系统\n\n\t\t- ASE4: 实现应用系统\n\n\t\t- ASE5: 测试应用系统\n\n\t\t- ASE6: 应用系统打包\n\n#### 面向对象与软件复用\n\n- OO方法对软件复用的支持\n\n\t- OOA模型\n\n\t- OOA与OOD的分工\n\n\t- 对象的表示\n\n\t- 一般－特殊结构\n\n\t- 整体－部分结构\n\n\t- 示例连接\n\n\t- 类描述模板\n\n\t- 用例\n\n- 复用技术对OO方法的支持\n\n\t- 类库\n\n\t- 构件库\n\n\t- 构架库\n\n\t- OOA过程\n\n### 十一、软件工程管理\n\n#### 管理的目的与内容\n\n- 目的\n\n\t- 为了按照预定的\n\n\t\t- 时间\n\n\t\t- 费用\n\n\t- 成功地完成软件的\n\n\t\t- 计划\n\n\t\t- 开发\n\n\t\t- 维护\n\n- 内容\n\n\t- 费用\n\n\t\t- 成本核算\n\n\t- 质量\n\n\t\t- 保证软件产品的（包括最终程序和文档）的质量\n\n\t- 人员\n\n\t- 进度\n\n\t\t- 网络图（PERT图）\n\n\t\t\t- 描述各部分工作进度的相互关系\n\n#### 软件估算模型\n\n- 资源估算模型\n\n\t- 静态单变量资源模型\n\n\t- Putnam模型\n\n\t\t- 多变量资源模型\n\n\t\t- 概念\n\n\t\t\t- L\n\n\t\t\t\t- 源程序长度（单位：行）\n\n\t\t\t- T\n\n\t\t\t\t- 开发时间（单位：年）\n\n\t\t\t- K\n\n\t\t\t\t- 全生存周期（含维护）所需要的工作量（单位：人-年）\n\n\t\t- 特点\n\n\t\t\t- 在同一个模型中给出了K（或E）、L和T三者之间的关系\n\n- COCOMO模型\n\n\t- 构造性成本模型(constructive cost model)\n\n\t- 从2个方面改进了静态单变量模型\n\n\t\t- 按照软件的应用领域和复杂程度，将它们分为\n\n\t\t\t- 组织(organic)\n\n\t\t\t- 半独立(semidetached)\n\n\t\t\t- 嵌入(embeded)\n\n\t\t- 在模型中增加了一个 工作量调节因子(effort adjustment factor,EAF)，反映各种有关因素对软件开发的影响\n\n#### 软件成本估计\n\n- 地位\n\n\t- 软件费用管理的核心\n\n\t- 软件工程管理中最困难最易出错的问题之一\n\n- 方法\n\n\t- 自顶向下估计\n\n\t\t- 着眼于软件的整体\n\n\t- 由底向上估计\n\n\t\t- 从一个个任务单元开始\n\n\t- 算法模型(algorithmic model)\n\n\t\t- 就是资源模型\n\n#### 人员的分配与组织\n\n- 指导原则\n\n\t- Rayleigh-Norden曲线\n\n\t\t- 说明科研及开发项目在实施期间所需要的人力\n\n\t\t- 软件生存周期内各个阶段需要的人力分配，与该曲线形状十分相似\n\n\t- 两条重要定律\n\n\t\t- 人员-时间权衡定律\n\n\t\t\t- 开发工作量与开发时间的4次方成反比\n\n\t\t- Brooks定律\n\n\t\t\t- 向一个已经延迟的项目追加开发人员，可能使它完成得更晚\n\n#### 项目进度安排\n\n- 计划评审技术(Program Evaluation and Review Technique,PERT)\n\n\t- 1. 建立PERT图\n\n\t- 2. 找出关键路径(critical path)\n\n\t- 3. 标出最迟开始时间\n\n\t- 4. PERT图的使用\n\n- Gantt图\n\n\t- 缺点\n\n\t\t- 不能显示各项活动之间的依赖关系\n\n\t- 适用于简单的软件项目\n\n### 十二、软件质量管理\n\n#### 从质量保证到质量认证\n\n- 质量保证\n\n\t- 单个软件\n\n- 质量认证\n\n\t- 软件企业的整体资质\n\n- 质量管理三阶段\n\n\t- 1. 质量检验阶段\n\n\t- 2. 全面质量管理阶段\n\n\t- 3. 质量认证阶段\n\n#### 质量保证\n\n- 软件的质量属性\n\n\t- 功能性\n\n\t- 可靠性\n\n\t- 易用性\n\n\t- 效率\n\n\t- 可维护性\n\n\t- 可移植性\n\n- 质量保证的活动内容\n\n\t- 复审\n\n\t- 开发方法\n\n\t- 配置控制\n\n\t- 软件测试\n\n#### 软件可靠性\n\n- 定义\n\n\t- 在给定的时间内，程序按照规定的条件成功地运行的概率\n\n- 分级\n\n\t- 甚低\n\n\t- 低\n\n\t- 正常\n\n\t- 高\n\n\t- 甚高\n\n- 可靠性模型\n\n\t- 正比于遗留故障数的宏观模型\n\n\t- 平均无故障时间模型\n\n\t- 错误植入模型\n\n- 软件容错技术\n\n\t- 容错软件\n\n\t\t- 屏蔽错误\n\n\t\t- 修复错误\n\n\t\t- 减少影响\n\n\t- 冗余技术\n\n\t\t- 结构冗余\n\n\t\t\t- 静态冗余\n\n\t\t\t- 动态冗余\n\n\t\t\t- 混合冗余\n\n\t\t- 时间冗余\n\n\t\t- 信息冗余\n\n\t- 容错软件的设计\n\n\t\t- 1. 设计非容错结构\n\n\t\t- 2. 分析可能的软、硬件错误，确定容错范围\n\n\t\t- 3. 确定冗余技术，并评估其容错效果\n\n\t\t- 4. 修改设计，直至获得满意结果\n\n#### 程序正确性证明\n\n- 通过数学的方法，证明程序具有某些需要的性质\n\n- 输入-输出断言法\n\n#### CMM软件能力成熟度模型\n\n- 基本概念\n\n\t- 软件过程\n\n\t- 关键过程域\n\n\t\t- 相互关联的若干软件实践活动和有关基础设施的一个集合\n\n- 软件能力成熟度等级\n\n\t- 1级：初始级\n\n\t- 2级：可重复级\n\n\t- 3级：已定义级\n\n\t- 4级：已管理级\n\n\t- 5级：优化级\n\n- CMM应用\n\n\t- 能力评估\n\n\t\t- 软件过程评估\n\n\t\t- 软件能力评价\n\n\t- 过程改善\n\n- CMM评估的实施\n\n\t- CBA-SCE\n\n\t\t- 对机构的软件能力进行评估\n\n\t- CBA-IPI\n\n\t\t- 对内部的过程改进实施评估\n\n- 软件过程评估的SPICE国际标准\n\n\t- software process improvement and capability determination\n\n#### ISO 9000国际标准\n\n#### 软件度量\n\n- 项目度量\n\n\t- 个人开发工作的测度\n\n- 过程度量\n\n\t- 整个企业中全体项目组开发能力的衡量\n\n### 十三、软件工程环境\n\n#### 概念\n\n- 定义\n\n\t- 支持软件产品开发、维护和管理的软件系统\n\n- 特点\n\n\t- 友好和统一的用户界面\n\n\t\t- 具有弹出功能的多级菜单\n\n\t\t- 屏幕提示和在线帮助技术\n\n\t\t- 多窗口技术\n\n\t\t- 向导技术\n\n\t- 集成化的软件工具\n\n\t\t- 数据集成\n\n\t\t- 界面集成\n\n\t\t- 控制集成\n\n\t\t- 过程集成\n\n\t\t- 平台集成\n\n- 理想环境的模型\n\n- CASE环境\n\n\t- 计算机辅助软件工程，CASE，computer-aided software engineering\n\n\t- 组成构件\n\n\t\t- CASE工具\n\n\t\t\t- 支持软件开发的工具\n\n\t\t\t- 支持软件维护的工具\n\n\t\t\t- 支持软件管理过程和支持过程的工具\n\n\t\t- 集成化框架\n\n\t\t\t- 建立环境信息仓库\n\n\t\t\t\t- 数据完整性\n\n\t\t\t\t- 信息共享\n\n\t\t\t\t- 数据-工具 集成\n\n\t\t\t\t- 数据-数据 集成\n\n\t\t\t\t- 文档标准化\n\n\t\t- 为可移植性服务的机构\n\n\t\t- 操作系统\n\n\t\t- 硬件平台\n\n\t\t- 环境体系结构\n\n\t- 一般结构\n\n\t\t- CASE集成框架的典型结构\n\n\t\t\t- 用户界面层\n\n\t\t\t- 工具层\n\n\t\t\t- 对象管理层\n\n\t\t\t- 共享中心库层\n\n\t- 实例\n\n\t\t- Rational SUITE Enterprise Studio\n\n\t\t- 青鸟系统\n\n### 十四、软件工程高级课题\n\n#### Web工程\n\n- Web开发\n\n\t- 开发团队\n\n\t\t- Web决策人员\n\n\t\t- 内容提供人员\n\n\t\t- Web开发人员\n\n\t\t- Web发布人员\n\n\t\t- Web支持人员\n\n\t\t- Web管理员（站长）\n\n\t- 特点\n\n\t\t- WebApp常常以增量的方式开发\n\n\t\t- 需求经常发生变化\n\n\t\t- 开发期限较短\n\n\t- 分析\n\n\t\t- 内容\n\n\t\t- 交互\n\n\t\t- 功能\n\n\t\t- 配置\n\n\t\t- 导航关系\n\n\t\t- 安全\n\n\t\t\t- Web站点安全\n\n\t\t\t- Web站点风险\n\n\t\t\t\t- 机密信息窃取\n\n\t\t\t\t- 数据和软、硬件系统被破坏\n\n\t- 设计\n\n\t\t- 设计原则和目标\n\n\t\t\t- 简单\n\n\t\t\t- 美观\n\n\t\t\t- 整体保持一致\n\n\t\t- 界面设计\n\n\t\t- 设计方法\n\n\t\t\t- 无定式\n\n\t\t- 设计中的问题\n\n\t- 测试\n\n#### 基于体系结构的软件开发\n\n- 应用软件的体系结构\n\n\t- 程序\n\n\t- 业务\n\n\t- 技术\n\n\t- 信息\n\n#### 面向方面的软件开发\n\n- 面向方面编程(aspect-oriented programming,AOP)\n\n\t- 基本概念\n\n\t\t- 关注点\n\n\t\t- 方面\n\n\t\t- 连接点\n\n\t\t- 织入\n\n\t- AOP设计的步骤\n\n\t\t- 1. 对需求规约经行方面分解\n\n\t\t- 2. 对标识出的方面分别通过程序机制实现\n\n\t\t- 3. 用方面编织器将所有的单元编排重组在一起，形成可运行系统\n\n- 面向方面软件开发(aspect-oriented software development,AOSD)\n\n\t- 开发步骤\n\n\t\t- 1. 方面分解\n\n\t\t- 2. 关注点实现\n\n\t\t- 3. 方面的重新组合\n\n#### 形式化的软件开发\n\n- 模型化\n\n\t- 现实世界\n\n\t- 模型表示\n\n\t- 计算机系统\n\n- 模型变换\n\n\t- 形式化规格\n\n\t- 形式化验证\n\n\t- 程序求精\n\n","slug":"4软件工程（下）","published":1,"updated":"2024-10-14T03:27:53.124Z","comments":1,"layout":"post","photos":[],"_id":"cm2bvklb300084cuf4bjed77q","content":"<h3 id=\"九、软件维护\"><a href=\"#九、软件维护\" class=\"headerlink\" title=\"九、软件维护\"></a>九、软件维护</h3><h4 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h4><ul>\n<li><p>完善性维护50%</p>\n</li>\n<li><p>适应性维护25%</p>\n</li>\n<li><p>纠错性维护21%</p>\n</li>\n<li><p>预防性维护4%</p>\n</li>\n</ul>\n<h4 id=\"软件可维护性\"><a href=\"#软件可维护性\" class=\"headerlink\" title=\"软件可维护性\"></a>软件可维护性</h4><ul>\n<li><p>含义</p>\n<ul>\n<li><p>可理解性</p>\n</li>\n<li><p>可修改性</p>\n</li>\n<li><p>可测试性</p>\n</li>\n</ul>\n</li>\n<li><p>提高软件可维护性的途径</p>\n<ul>\n<li><p>提供完整和一致的文档</p>\n<ul>\n<li><p>帮助维护人员读懂程序</p>\n</li>\n<li><p>方便被维护软件的测试</p>\n</li>\n</ul>\n</li>\n<li><p>采用现代化的开发方法</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实施\"><a href=\"#实施\" class=\"headerlink\" title=\"实施\"></a>实施</h4><h4 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h4><h4 id=\"软件配置管理\"><a href=\"#软件配置管理\" class=\"headerlink\" title=\"软件配置管理\"></a>软件配置管理</h4><h4 id=\"软件再工程\"><a href=\"#软件再工程\" class=\"headerlink\" title=\"软件再工程\"></a>软件再工程</h4><ul>\n<li><p>将新技术和新工具应用于老的软件的一种较“彻底”的预防性维护</p>\n</li>\n<li><p>逆向工程</p>\n</li>\n<li><p>重构</p>\n</li>\n</ul>\n<h3 id=\"十、软件复用\"><a href=\"#十、软件复用\" class=\"headerlink\" title=\"十、软件复用\"></a>十、软件复用</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>定义</p>\n<ul>\n<li>对构造新的软件系统的过程中，对已存在的软件人工制品的使用技术</li>\n</ul>\n</li>\n<li><p>措施</p>\n<ul>\n<li><p>基础设施</p>\n</li>\n<li><p>培训计划</p>\n</li>\n<li><p>软件开发方法</p>\n</li>\n<li><p>激励措施</p>\n</li>\n</ul>\n</li>\n<li><p>粒度</p>\n<ul>\n<li><p>源代码复用</p>\n</li>\n<li><p>软件体系结构复用</p>\n</li>\n<li><p>应用程序生成器</p>\n</li>\n<li><p>领域特定的软件体系结构的复用</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"领域工程\"><a href=\"#领域工程\" class=\"headerlink\" title=\"领域工程\"></a>领域工程</h4><ul>\n<li><p>横向与纵向</p>\n<ul>\n<li><p>横向复用</p>\n<ul>\n<li>复用不同应用领域中的软件元素</li>\n</ul>\n</li>\n<li><p>纵向复用</p>\n<ul>\n<li><p>在一类具有较多公共性的应用领域之间，对软件构件进行复用</p>\n</li>\n<li><p>主要活动</p>\n<ul>\n<li><p>实施领域分析</p>\n<ul>\n<li><p>主要目标</p>\n<ul>\n<li>获得领域模型</li>\n</ul>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><ol>\n<li>选择特定的领域</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>抽取具有最优复用的功能</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>标识该功能</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>建立领域分析模型</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>定义需求规约，得出需求规约构件和若干个连接子配置构成的领域模型</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>开发软件构件</p>\n<ul>\n<li><p>单个构件的特征</p>\n<ul>\n<li><p>通用性</p>\n</li>\n<li><p>可变性</p>\n</li>\n<li><p>易组装性</p>\n</li>\n</ul>\n</li>\n<li><p>领域构件的特征</p>\n<ul>\n<li><p>包含单个构建的特征</p>\n</li>\n<li><p>标准数据</p>\n</li>\n<li><p>标准接口协议</p>\n</li>\n<li><p>程序模板</p>\n</li>\n</ul>\n</li>\n<li><p>构件技术</p>\n<ul>\n<li><p>COM&#x2F;OLE</p>\n</li>\n<li><p>CORBA</p>\n</li>\n<li><p>OpenDoc</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立软件构件库</p>\n<ul>\n<li><p>3种分类模式</p>\n<ul>\n<li><p>枚举分类</p>\n</li>\n<li><p>刻面分类</p>\n</li>\n<li><p>属性-值分类</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基于构件的软件开发-component-based-software-development-CBSD\"><a href=\"#基于构件的软件开发-component-based-software-development-CBSD\" class=\"headerlink\" title=\"基于构件的软件开发(component based software development,CBSD)\"></a>基于构件的软件开发(component based software development,CBSD)</h4><ul>\n<li><p>构件集成模型</p>\n</li>\n<li><p>应用系统工程(application system engineering,ASE)</p>\n<ul>\n<li><p>基本步骤</p>\n<ul>\n<li><p>ASE1: 获取需求</p>\n</li>\n<li><p>ASE2: 分析</p>\n</li>\n<li><p>ASE3: 设计应用系统</p>\n</li>\n<li><p>ASE4: 实现应用系统</p>\n</li>\n<li><p>ASE5: 测试应用系统</p>\n</li>\n<li><p>ASE6: 应用系统打包</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象与软件复用\"><a href=\"#面向对象与软件复用\" class=\"headerlink\" title=\"面向对象与软件复用\"></a>面向对象与软件复用</h4><ul>\n<li><p>OO方法对软件复用的支持</p>\n<ul>\n<li><p>OOA模型</p>\n</li>\n<li><p>OOA与OOD的分工</p>\n</li>\n<li><p>对象的表示</p>\n</li>\n<li><p>一般－特殊结构</p>\n</li>\n<li><p>整体－部分结构</p>\n</li>\n<li><p>示例连接</p>\n</li>\n<li><p>类描述模板</p>\n</li>\n<li><p>用例</p>\n</li>\n</ul>\n</li>\n<li><p>复用技术对OO方法的支持</p>\n<ul>\n<li><p>类库</p>\n</li>\n<li><p>构件库</p>\n</li>\n<li><p>构架库</p>\n</li>\n<li><p>OOA过程</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十一、软件工程管理\"><a href=\"#十一、软件工程管理\" class=\"headerlink\" title=\"十一、软件工程管理\"></a>十一、软件工程管理</h3><h4 id=\"管理的目的与内容\"><a href=\"#管理的目的与内容\" class=\"headerlink\" title=\"管理的目的与内容\"></a>管理的目的与内容</h4><ul>\n<li><p>目的</p>\n<ul>\n<li><p>为了按照预定的</p>\n<ul>\n<li><p>时间</p>\n</li>\n<li><p>费用</p>\n</li>\n</ul>\n</li>\n<li><p>成功地完成软件的</p>\n<ul>\n<li><p>计划</p>\n</li>\n<li><p>开发</p>\n</li>\n<li><p>维护</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>费用</p>\n<ul>\n<li>成本核算</li>\n</ul>\n</li>\n<li><p>质量</p>\n<ul>\n<li>保证软件产品的（包括最终程序和文档）的质量</li>\n</ul>\n</li>\n<li><p>人员</p>\n</li>\n<li><p>进度</p>\n<ul>\n<li><p>网络图（PERT图）</p>\n<ul>\n<li>描述各部分工作进度的相互关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件估算模型\"><a href=\"#软件估算模型\" class=\"headerlink\" title=\"软件估算模型\"></a>软件估算模型</h4><ul>\n<li><p>资源估算模型</p>\n<ul>\n<li><p>静态单变量资源模型</p>\n</li>\n<li><p>Putnam模型</p>\n<ul>\n<li><p>多变量资源模型</p>\n</li>\n<li><p>概念</p>\n<ul>\n<li><p>L</p>\n<ul>\n<li>源程序长度（单位：行）</li>\n</ul>\n</li>\n<li><p>T</p>\n<ul>\n<li>开发时间（单位：年）</li>\n</ul>\n</li>\n<li><p>K</p>\n<ul>\n<li>全生存周期（含维护）所需要的工作量（单位：人-年）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li>在同一个模型中给出了K（或E）、L和T三者之间的关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>COCOMO模型</p>\n<ul>\n<li><p>构造性成本模型(constructive cost model)</p>\n</li>\n<li><p>从2个方面改进了静态单变量模型</p>\n<ul>\n<li><p>按照软件的应用领域和复杂程度，将它们分为</p>\n<ul>\n<li><p>组织(organic)</p>\n</li>\n<li><p>半独立(semidetached)</p>\n</li>\n<li><p>嵌入(embeded)</p>\n</li>\n</ul>\n</li>\n<li><p>在模型中增加了一个 工作量调节因子(effort adjustment factor,EAF)，反映各种有关因素对软件开发的影响</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件成本估计\"><a href=\"#软件成本估计\" class=\"headerlink\" title=\"软件成本估计\"></a>软件成本估计</h4><ul>\n<li><p>地位</p>\n<ul>\n<li><p>软件费用管理的核心</p>\n</li>\n<li><p>软件工程管理中最困难最易出错的问题之一</p>\n</li>\n</ul>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p>自顶向下估计</p>\n<ul>\n<li>着眼于软件的整体</li>\n</ul>\n</li>\n<li><p>由底向上估计</p>\n<ul>\n<li>从一个个任务单元开始</li>\n</ul>\n</li>\n<li><p>算法模型(algorithmic model)</p>\n<ul>\n<li>就是资源模型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"人员的分配与组织\"><a href=\"#人员的分配与组织\" class=\"headerlink\" title=\"人员的分配与组织\"></a>人员的分配与组织</h4><ul>\n<li><p>指导原则</p>\n<ul>\n<li><p>Rayleigh-Norden曲线</p>\n<ul>\n<li><p>说明科研及开发项目在实施期间所需要的人力</p>\n</li>\n<li><p>软件生存周期内各个阶段需要的人力分配，与该曲线形状十分相似</p>\n</li>\n</ul>\n</li>\n<li><p>两条重要定律</p>\n<ul>\n<li><p>人员-时间权衡定律</p>\n<ul>\n<li>开发工作量与开发时间的4次方成反比</li>\n</ul>\n</li>\n<li><p>Brooks定律</p>\n<ul>\n<li>向一个已经延迟的项目追加开发人员，可能使它完成得更晚</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"项目进度安排\"><a href=\"#项目进度安排\" class=\"headerlink\" title=\"项目进度安排\"></a>项目进度安排</h4><ul>\n<li><p>计划评审技术(Program Evaluation and Review Technique,PERT)</p>\n<ul>\n<li><ol>\n<li>建立PERT图</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>找出关键路径(critical path)</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>标出最迟开始时间</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>PERT图的使用</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Gantt图</p>\n<ul>\n<li><p>缺点</p>\n<ul>\n<li>不能显示各项活动之间的依赖关系</li>\n</ul>\n</li>\n<li><p>适用于简单的软件项目</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十二、软件质量管理\"><a href=\"#十二、软件质量管理\" class=\"headerlink\" title=\"十二、软件质量管理\"></a>十二、软件质量管理</h3><h4 id=\"从质量保证到质量认证\"><a href=\"#从质量保证到质量认证\" class=\"headerlink\" title=\"从质量保证到质量认证\"></a>从质量保证到质量认证</h4><ul>\n<li><p>质量保证</p>\n<ul>\n<li>单个软件</li>\n</ul>\n</li>\n<li><p>质量认证</p>\n<ul>\n<li>软件企业的整体资质</li>\n</ul>\n</li>\n<li><p>质量管理三阶段</p>\n<ul>\n<li><ol>\n<li>质量检验阶段</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>全面质量管理阶段</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>质量认证阶段</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h4><ul>\n<li><p>软件的质量属性</p>\n<ul>\n<li><p>功能性</p>\n</li>\n<li><p>可靠性</p>\n</li>\n<li><p>易用性</p>\n</li>\n<li><p>效率</p>\n</li>\n<li><p>可维护性</p>\n</li>\n<li><p>可移植性</p>\n</li>\n</ul>\n</li>\n<li><p>质量保证的活动内容</p>\n<ul>\n<li><p>复审</p>\n</li>\n<li><p>开发方法</p>\n</li>\n<li><p>配置控制</p>\n</li>\n<li><p>软件测试</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件可靠性\"><a href=\"#软件可靠性\" class=\"headerlink\" title=\"软件可靠性\"></a>软件可靠性</h4><ul>\n<li><p>定义</p>\n<ul>\n<li>在给定的时间内，程序按照规定的条件成功地运行的概率</li>\n</ul>\n</li>\n<li><p>分级</p>\n<ul>\n<li><p>甚低</p>\n</li>\n<li><p>低</p>\n</li>\n<li><p>正常</p>\n</li>\n<li><p>高</p>\n</li>\n<li><p>甚高</p>\n</li>\n</ul>\n</li>\n<li><p>可靠性模型</p>\n<ul>\n<li><p>正比于遗留故障数的宏观模型</p>\n</li>\n<li><p>平均无故障时间模型</p>\n</li>\n<li><p>错误植入模型</p>\n</li>\n</ul>\n</li>\n<li><p>软件容错技术</p>\n<ul>\n<li><p>容错软件</p>\n<ul>\n<li><p>屏蔽错误</p>\n</li>\n<li><p>修复错误</p>\n</li>\n<li><p>减少影响</p>\n</li>\n</ul>\n</li>\n<li><p>冗余技术</p>\n<ul>\n<li><p>结构冗余</p>\n<ul>\n<li><p>静态冗余</p>\n</li>\n<li><p>动态冗余</p>\n</li>\n<li><p>混合冗余</p>\n</li>\n</ul>\n</li>\n<li><p>时间冗余</p>\n</li>\n<li><p>信息冗余</p>\n</li>\n</ul>\n</li>\n<li><p>容错软件的设计</p>\n<ul>\n<li><ol>\n<li>设计非容错结构</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>分析可能的软、硬件错误，确定容错范围</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>确定冗余技术，并评估其容错效果</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>修改设计，直至获得满意结果</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"程序正确性证明\"><a href=\"#程序正确性证明\" class=\"headerlink\" title=\"程序正确性证明\"></a>程序正确性证明</h4><ul>\n<li><p>通过数学的方法，证明程序具有某些需要的性质</p>\n</li>\n<li><p>输入-输出断言法</p>\n</li>\n</ul>\n<h4 id=\"CMM软件能力成熟度模型\"><a href=\"#CMM软件能力成熟度模型\" class=\"headerlink\" title=\"CMM软件能力成熟度模型\"></a>CMM软件能力成熟度模型</h4><ul>\n<li><p>基本概念</p>\n<ul>\n<li><p>软件过程</p>\n</li>\n<li><p>关键过程域</p>\n<ul>\n<li>相互关联的若干软件实践活动和有关基础设施的一个集合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件能力成熟度等级</p>\n<ul>\n<li><p>1级：初始级</p>\n</li>\n<li><p>2级：可重复级</p>\n</li>\n<li><p>3级：已定义级</p>\n</li>\n<li><p>4级：已管理级</p>\n</li>\n<li><p>5级：优化级</p>\n</li>\n</ul>\n</li>\n<li><p>CMM应用</p>\n<ul>\n<li><p>能力评估</p>\n<ul>\n<li><p>软件过程评估</p>\n</li>\n<li><p>软件能力评价</p>\n</li>\n</ul>\n</li>\n<li><p>过程改善</p>\n</li>\n</ul>\n</li>\n<li><p>CMM评估的实施</p>\n<ul>\n<li><p>CBA-SCE</p>\n<ul>\n<li>对机构的软件能力进行评估</li>\n</ul>\n</li>\n<li><p>CBA-IPI</p>\n<ul>\n<li>对内部的过程改进实施评估</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件过程评估的SPICE国际标准</p>\n<ul>\n<li>software process improvement and capability determination</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ISO-9000国际标准\"><a href=\"#ISO-9000国际标准\" class=\"headerlink\" title=\"ISO 9000国际标准\"></a>ISO 9000国际标准</h4><h4 id=\"软件度量\"><a href=\"#软件度量\" class=\"headerlink\" title=\"软件度量\"></a>软件度量</h4><ul>\n<li><p>项目度量</p>\n<ul>\n<li>个人开发工作的测度</li>\n</ul>\n</li>\n<li><p>过程度量</p>\n<ul>\n<li>整个企业中全体项目组开发能力的衡量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十三、软件工程环境\"><a href=\"#十三、软件工程环境\" class=\"headerlink\" title=\"十三、软件工程环境\"></a>十三、软件工程环境</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ul>\n<li><p>定义</p>\n<ul>\n<li>支持软件产品开发、维护和管理的软件系统</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>友好和统一的用户界面</p>\n<ul>\n<li><p>具有弹出功能的多级菜单</p>\n</li>\n<li><p>屏幕提示和在线帮助技术</p>\n</li>\n<li><p>多窗口技术</p>\n</li>\n<li><p>向导技术</p>\n</li>\n</ul>\n</li>\n<li><p>集成化的软件工具</p>\n<ul>\n<li><p>数据集成</p>\n</li>\n<li><p>界面集成</p>\n</li>\n<li><p>控制集成</p>\n</li>\n<li><p>过程集成</p>\n</li>\n<li><p>平台集成</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>理想环境的模型</p>\n</li>\n<li><p>CASE环境</p>\n<ul>\n<li><p>计算机辅助软件工程，CASE，computer-aided software engineering</p>\n</li>\n<li><p>组成构件</p>\n<ul>\n<li><p>CASE工具</p>\n<ul>\n<li><p>支持软件开发的工具</p>\n</li>\n<li><p>支持软件维护的工具</p>\n</li>\n<li><p>支持软件管理过程和支持过程的工具</p>\n</li>\n</ul>\n</li>\n<li><p>集成化框架</p>\n<ul>\n<li><p>建立环境信息仓库</p>\n<ul>\n<li><p>数据完整性</p>\n</li>\n<li><p>信息共享</p>\n</li>\n<li><p>数据-工具 集成</p>\n</li>\n<li><p>数据-数据 集成</p>\n</li>\n<li><p>文档标准化</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>为可移植性服务的机构</p>\n</li>\n<li><p>操作系统</p>\n</li>\n<li><p>硬件平台</p>\n</li>\n<li><p>环境体系结构</p>\n</li>\n</ul>\n</li>\n<li><p>一般结构</p>\n<ul>\n<li><p>CASE集成框架的典型结构</p>\n<ul>\n<li><p>用户界面层</p>\n</li>\n<li><p>工具层</p>\n</li>\n<li><p>对象管理层</p>\n</li>\n<li><p>共享中心库层</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>实例</p>\n<ul>\n<li><p>Rational SUITE Enterprise Studio</p>\n</li>\n<li><p>青鸟系统</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十四、软件工程高级课题\"><a href=\"#十四、软件工程高级课题\" class=\"headerlink\" title=\"十四、软件工程高级课题\"></a>十四、软件工程高级课题</h3><h4 id=\"Web工程\"><a href=\"#Web工程\" class=\"headerlink\" title=\"Web工程\"></a>Web工程</h4><ul>\n<li><p>Web开发</p>\n<ul>\n<li><p>开发团队</p>\n<ul>\n<li><p>Web决策人员</p>\n</li>\n<li><p>内容提供人员</p>\n</li>\n<li><p>Web开发人员</p>\n</li>\n<li><p>Web发布人员</p>\n</li>\n<li><p>Web支持人员</p>\n</li>\n<li><p>Web管理员（站长）</p>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>WebApp常常以增量的方式开发</p>\n</li>\n<li><p>需求经常发生变化</p>\n</li>\n<li><p>开发期限较短</p>\n</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li><p>内容</p>\n</li>\n<li><p>交互</p>\n</li>\n<li><p>功能</p>\n</li>\n<li><p>配置</p>\n</li>\n<li><p>导航关系</p>\n</li>\n<li><p>安全</p>\n<ul>\n<li><p>Web站点安全</p>\n</li>\n<li><p>Web站点风险</p>\n<ul>\n<li><p>机密信息窃取</p>\n</li>\n<li><p>数据和软、硬件系统被破坏</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设计</p>\n<ul>\n<li><p>设计原则和目标</p>\n<ul>\n<li><p>简单</p>\n</li>\n<li><p>美观</p>\n</li>\n<li><p>整体保持一致</p>\n</li>\n</ul>\n</li>\n<li><p>界面设计</p>\n</li>\n<li><p>设计方法</p>\n<ul>\n<li>无定式</li>\n</ul>\n</li>\n<li><p>设计中的问题</p>\n</li>\n</ul>\n</li>\n<li><p>测试</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基于体系结构的软件开发\"><a href=\"#基于体系结构的软件开发\" class=\"headerlink\" title=\"基于体系结构的软件开发\"></a>基于体系结构的软件开发</h4><ul>\n<li><p>应用软件的体系结构</p>\n<ul>\n<li><p>程序</p>\n</li>\n<li><p>业务</p>\n</li>\n<li><p>技术</p>\n</li>\n<li><p>信息</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向方面的软件开发\"><a href=\"#面向方面的软件开发\" class=\"headerlink\" title=\"面向方面的软件开发\"></a>面向方面的软件开发</h4><ul>\n<li><p>面向方面编程(aspect-oriented programming,AOP)</p>\n<ul>\n<li><p>基本概念</p>\n<ul>\n<li><p>关注点</p>\n</li>\n<li><p>方面</p>\n</li>\n<li><p>连接点</p>\n</li>\n<li><p>织入</p>\n</li>\n</ul>\n</li>\n<li><p>AOP设计的步骤</p>\n<ul>\n<li><ol>\n<li>对需求规约经行方面分解</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>对标识出的方面分别通过程序机制实现</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>用方面编织器将所有的单元编排重组在一起，形成可运行系统</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向方面软件开发(aspect-oriented software development,AOSD)</p>\n<ul>\n<li><p>开发步骤</p>\n<ul>\n<li><ol>\n<li>方面分解</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>关注点实现</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>方面的重新组合</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"形式化的软件开发\"><a href=\"#形式化的软件开发\" class=\"headerlink\" title=\"形式化的软件开发\"></a>形式化的软件开发</h4><ul>\n<li><p>模型化</p>\n<ul>\n<li><p>现实世界</p>\n</li>\n<li><p>模型表示</p>\n</li>\n<li><p>计算机系统</p>\n</li>\n</ul>\n</li>\n<li><p>模型变换</p>\n<ul>\n<li><p>形式化规格</p>\n</li>\n<li><p>形式化验证</p>\n</li>\n<li><p>程序求精</p>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"九、软件维护\"><a href=\"#九、软件维护\" class=\"headerlink\" title=\"九、软件维护\"></a>九、软件维护</h3><h4 id=\"种类\"><a href=\"#种类\" class=\"headerlink\" title=\"种类\"></a>种类</h4><ul>\n<li><p>完善性维护50%</p>\n</li>\n<li><p>适应性维护25%</p>\n</li>\n<li><p>纠错性维护21%</p>\n</li>\n<li><p>预防性维护4%</p>\n</li>\n</ul>\n<h4 id=\"软件可维护性\"><a href=\"#软件可维护性\" class=\"headerlink\" title=\"软件可维护性\"></a>软件可维护性</h4><ul>\n<li><p>含义</p>\n<ul>\n<li><p>可理解性</p>\n</li>\n<li><p>可修改性</p>\n</li>\n<li><p>可测试性</p>\n</li>\n</ul>\n</li>\n<li><p>提高软件可维护性的途径</p>\n<ul>\n<li><p>提供完整和一致的文档</p>\n<ul>\n<li><p>帮助维护人员读懂程序</p>\n</li>\n<li><p>方便被维护软件的测试</p>\n</li>\n</ul>\n</li>\n<li><p>采用现代化的开发方法</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实施\"><a href=\"#实施\" class=\"headerlink\" title=\"实施\"></a>实施</h4><h4 id=\"管理\"><a href=\"#管理\" class=\"headerlink\" title=\"管理\"></a>管理</h4><h4 id=\"软件配置管理\"><a href=\"#软件配置管理\" class=\"headerlink\" title=\"软件配置管理\"></a>软件配置管理</h4><h4 id=\"软件再工程\"><a href=\"#软件再工程\" class=\"headerlink\" title=\"软件再工程\"></a>软件再工程</h4><ul>\n<li><p>将新技术和新工具应用于老的软件的一种较“彻底”的预防性维护</p>\n</li>\n<li><p>逆向工程</p>\n</li>\n<li><p>重构</p>\n</li>\n</ul>\n<h3 id=\"十、软件复用\"><a href=\"#十、软件复用\" class=\"headerlink\" title=\"十、软件复用\"></a>十、软件复用</h3><h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ul>\n<li><p>定义</p>\n<ul>\n<li>对构造新的软件系统的过程中，对已存在的软件人工制品的使用技术</li>\n</ul>\n</li>\n<li><p>措施</p>\n<ul>\n<li><p>基础设施</p>\n</li>\n<li><p>培训计划</p>\n</li>\n<li><p>软件开发方法</p>\n</li>\n<li><p>激励措施</p>\n</li>\n</ul>\n</li>\n<li><p>粒度</p>\n<ul>\n<li><p>源代码复用</p>\n</li>\n<li><p>软件体系结构复用</p>\n</li>\n<li><p>应用程序生成器</p>\n</li>\n<li><p>领域特定的软件体系结构的复用</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"领域工程\"><a href=\"#领域工程\" class=\"headerlink\" title=\"领域工程\"></a>领域工程</h4><ul>\n<li><p>横向与纵向</p>\n<ul>\n<li><p>横向复用</p>\n<ul>\n<li>复用不同应用领域中的软件元素</li>\n</ul>\n</li>\n<li><p>纵向复用</p>\n<ul>\n<li><p>在一类具有较多公共性的应用领域之间，对软件构件进行复用</p>\n</li>\n<li><p>主要活动</p>\n<ul>\n<li><p>实施领域分析</p>\n<ul>\n<li><p>主要目标</p>\n<ul>\n<li>获得领域模型</li>\n</ul>\n</li>\n<li><p>步骤</p>\n<ul>\n<li><ol>\n<li>选择特定的领域</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>抽取具有最优复用的功能</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>标识该功能</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>建立领域分析模型</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>定义需求规约，得出需求规约构件和若干个连接子配置构成的领域模型</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>开发软件构件</p>\n<ul>\n<li><p>单个构件的特征</p>\n<ul>\n<li><p>通用性</p>\n</li>\n<li><p>可变性</p>\n</li>\n<li><p>易组装性</p>\n</li>\n</ul>\n</li>\n<li><p>领域构件的特征</p>\n<ul>\n<li><p>包含单个构建的特征</p>\n</li>\n<li><p>标准数据</p>\n</li>\n<li><p>标准接口协议</p>\n</li>\n<li><p>程序模板</p>\n</li>\n</ul>\n</li>\n<li><p>构件技术</p>\n<ul>\n<li><p>COM&#x2F;OLE</p>\n</li>\n<li><p>CORBA</p>\n</li>\n<li><p>OpenDoc</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>建立软件构件库</p>\n<ul>\n<li><p>3种分类模式</p>\n<ul>\n<li><p>枚举分类</p>\n</li>\n<li><p>刻面分类</p>\n</li>\n<li><p>属性-值分类</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基于构件的软件开发-component-based-software-development-CBSD\"><a href=\"#基于构件的软件开发-component-based-software-development-CBSD\" class=\"headerlink\" title=\"基于构件的软件开发(component based software development,CBSD)\"></a>基于构件的软件开发(component based software development,CBSD)</h4><ul>\n<li><p>构件集成模型</p>\n</li>\n<li><p>应用系统工程(application system engineering,ASE)</p>\n<ul>\n<li><p>基本步骤</p>\n<ul>\n<li><p>ASE1: 获取需求</p>\n</li>\n<li><p>ASE2: 分析</p>\n</li>\n<li><p>ASE3: 设计应用系统</p>\n</li>\n<li><p>ASE4: 实现应用系统</p>\n</li>\n<li><p>ASE5: 测试应用系统</p>\n</li>\n<li><p>ASE6: 应用系统打包</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向对象与软件复用\"><a href=\"#面向对象与软件复用\" class=\"headerlink\" title=\"面向对象与软件复用\"></a>面向对象与软件复用</h4><ul>\n<li><p>OO方法对软件复用的支持</p>\n<ul>\n<li><p>OOA模型</p>\n</li>\n<li><p>OOA与OOD的分工</p>\n</li>\n<li><p>对象的表示</p>\n</li>\n<li><p>一般－特殊结构</p>\n</li>\n<li><p>整体－部分结构</p>\n</li>\n<li><p>示例连接</p>\n</li>\n<li><p>类描述模板</p>\n</li>\n<li><p>用例</p>\n</li>\n</ul>\n</li>\n<li><p>复用技术对OO方法的支持</p>\n<ul>\n<li><p>类库</p>\n</li>\n<li><p>构件库</p>\n</li>\n<li><p>构架库</p>\n</li>\n<li><p>OOA过程</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十一、软件工程管理\"><a href=\"#十一、软件工程管理\" class=\"headerlink\" title=\"十一、软件工程管理\"></a>十一、软件工程管理</h3><h4 id=\"管理的目的与内容\"><a href=\"#管理的目的与内容\" class=\"headerlink\" title=\"管理的目的与内容\"></a>管理的目的与内容</h4><ul>\n<li><p>目的</p>\n<ul>\n<li><p>为了按照预定的</p>\n<ul>\n<li><p>时间</p>\n</li>\n<li><p>费用</p>\n</li>\n</ul>\n</li>\n<li><p>成功地完成软件的</p>\n<ul>\n<li><p>计划</p>\n</li>\n<li><p>开发</p>\n</li>\n<li><p>维护</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>内容</p>\n<ul>\n<li><p>费用</p>\n<ul>\n<li>成本核算</li>\n</ul>\n</li>\n<li><p>质量</p>\n<ul>\n<li>保证软件产品的（包括最终程序和文档）的质量</li>\n</ul>\n</li>\n<li><p>人员</p>\n</li>\n<li><p>进度</p>\n<ul>\n<li><p>网络图（PERT图）</p>\n<ul>\n<li>描述各部分工作进度的相互关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件估算模型\"><a href=\"#软件估算模型\" class=\"headerlink\" title=\"软件估算模型\"></a>软件估算模型</h4><ul>\n<li><p>资源估算模型</p>\n<ul>\n<li><p>静态单变量资源模型</p>\n</li>\n<li><p>Putnam模型</p>\n<ul>\n<li><p>多变量资源模型</p>\n</li>\n<li><p>概念</p>\n<ul>\n<li><p>L</p>\n<ul>\n<li>源程序长度（单位：行）</li>\n</ul>\n</li>\n<li><p>T</p>\n<ul>\n<li>开发时间（单位：年）</li>\n</ul>\n</li>\n<li><p>K</p>\n<ul>\n<li>全生存周期（含维护）所需要的工作量（单位：人-年）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li>在同一个模型中给出了K（或E）、L和T三者之间的关系</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>COCOMO模型</p>\n<ul>\n<li><p>构造性成本模型(constructive cost model)</p>\n</li>\n<li><p>从2个方面改进了静态单变量模型</p>\n<ul>\n<li><p>按照软件的应用领域和复杂程度，将它们分为</p>\n<ul>\n<li><p>组织(organic)</p>\n</li>\n<li><p>半独立(semidetached)</p>\n</li>\n<li><p>嵌入(embeded)</p>\n</li>\n</ul>\n</li>\n<li><p>在模型中增加了一个 工作量调节因子(effort adjustment factor,EAF)，反映各种有关因素对软件开发的影响</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件成本估计\"><a href=\"#软件成本估计\" class=\"headerlink\" title=\"软件成本估计\"></a>软件成本估计</h4><ul>\n<li><p>地位</p>\n<ul>\n<li><p>软件费用管理的核心</p>\n</li>\n<li><p>软件工程管理中最困难最易出错的问题之一</p>\n</li>\n</ul>\n</li>\n<li><p>方法</p>\n<ul>\n<li><p>自顶向下估计</p>\n<ul>\n<li>着眼于软件的整体</li>\n</ul>\n</li>\n<li><p>由底向上估计</p>\n<ul>\n<li>从一个个任务单元开始</li>\n</ul>\n</li>\n<li><p>算法模型(algorithmic model)</p>\n<ul>\n<li>就是资源模型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"人员的分配与组织\"><a href=\"#人员的分配与组织\" class=\"headerlink\" title=\"人员的分配与组织\"></a>人员的分配与组织</h4><ul>\n<li><p>指导原则</p>\n<ul>\n<li><p>Rayleigh-Norden曲线</p>\n<ul>\n<li><p>说明科研及开发项目在实施期间所需要的人力</p>\n</li>\n<li><p>软件生存周期内各个阶段需要的人力分配，与该曲线形状十分相似</p>\n</li>\n</ul>\n</li>\n<li><p>两条重要定律</p>\n<ul>\n<li><p>人员-时间权衡定律</p>\n<ul>\n<li>开发工作量与开发时间的4次方成反比</li>\n</ul>\n</li>\n<li><p>Brooks定律</p>\n<ul>\n<li>向一个已经延迟的项目追加开发人员，可能使它完成得更晚</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"项目进度安排\"><a href=\"#项目进度安排\" class=\"headerlink\" title=\"项目进度安排\"></a>项目进度安排</h4><ul>\n<li><p>计划评审技术(Program Evaluation and Review Technique,PERT)</p>\n<ul>\n<li><ol>\n<li>建立PERT图</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>找出关键路径(critical path)</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>标出最迟开始时间</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>PERT图的使用</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>Gantt图</p>\n<ul>\n<li><p>缺点</p>\n<ul>\n<li>不能显示各项活动之间的依赖关系</li>\n</ul>\n</li>\n<li><p>适用于简单的软件项目</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十二、软件质量管理\"><a href=\"#十二、软件质量管理\" class=\"headerlink\" title=\"十二、软件质量管理\"></a>十二、软件质量管理</h3><h4 id=\"从质量保证到质量认证\"><a href=\"#从质量保证到质量认证\" class=\"headerlink\" title=\"从质量保证到质量认证\"></a>从质量保证到质量认证</h4><ul>\n<li><p>质量保证</p>\n<ul>\n<li>单个软件</li>\n</ul>\n</li>\n<li><p>质量认证</p>\n<ul>\n<li>软件企业的整体资质</li>\n</ul>\n</li>\n<li><p>质量管理三阶段</p>\n<ul>\n<li><ol>\n<li>质量检验阶段</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>全面质量管理阶段</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>质量认证阶段</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"质量保证\"><a href=\"#质量保证\" class=\"headerlink\" title=\"质量保证\"></a>质量保证</h4><ul>\n<li><p>软件的质量属性</p>\n<ul>\n<li><p>功能性</p>\n</li>\n<li><p>可靠性</p>\n</li>\n<li><p>易用性</p>\n</li>\n<li><p>效率</p>\n</li>\n<li><p>可维护性</p>\n</li>\n<li><p>可移植性</p>\n</li>\n</ul>\n</li>\n<li><p>质量保证的活动内容</p>\n<ul>\n<li><p>复审</p>\n</li>\n<li><p>开发方法</p>\n</li>\n<li><p>配置控制</p>\n</li>\n<li><p>软件测试</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"软件可靠性\"><a href=\"#软件可靠性\" class=\"headerlink\" title=\"软件可靠性\"></a>软件可靠性</h4><ul>\n<li><p>定义</p>\n<ul>\n<li>在给定的时间内，程序按照规定的条件成功地运行的概率</li>\n</ul>\n</li>\n<li><p>分级</p>\n<ul>\n<li><p>甚低</p>\n</li>\n<li><p>低</p>\n</li>\n<li><p>正常</p>\n</li>\n<li><p>高</p>\n</li>\n<li><p>甚高</p>\n</li>\n</ul>\n</li>\n<li><p>可靠性模型</p>\n<ul>\n<li><p>正比于遗留故障数的宏观模型</p>\n</li>\n<li><p>平均无故障时间模型</p>\n</li>\n<li><p>错误植入模型</p>\n</li>\n</ul>\n</li>\n<li><p>软件容错技术</p>\n<ul>\n<li><p>容错软件</p>\n<ul>\n<li><p>屏蔽错误</p>\n</li>\n<li><p>修复错误</p>\n</li>\n<li><p>减少影响</p>\n</li>\n</ul>\n</li>\n<li><p>冗余技术</p>\n<ul>\n<li><p>结构冗余</p>\n<ul>\n<li><p>静态冗余</p>\n</li>\n<li><p>动态冗余</p>\n</li>\n<li><p>混合冗余</p>\n</li>\n</ul>\n</li>\n<li><p>时间冗余</p>\n</li>\n<li><p>信息冗余</p>\n</li>\n</ul>\n</li>\n<li><p>容错软件的设计</p>\n<ul>\n<li><ol>\n<li>设计非容错结构</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>分析可能的软、硬件错误，确定容错范围</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>确定冗余技术，并评估其容错效果</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>修改设计，直至获得满意结果</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"程序正确性证明\"><a href=\"#程序正确性证明\" class=\"headerlink\" title=\"程序正确性证明\"></a>程序正确性证明</h4><ul>\n<li><p>通过数学的方法，证明程序具有某些需要的性质</p>\n</li>\n<li><p>输入-输出断言法</p>\n</li>\n</ul>\n<h4 id=\"CMM软件能力成熟度模型\"><a href=\"#CMM软件能力成熟度模型\" class=\"headerlink\" title=\"CMM软件能力成熟度模型\"></a>CMM软件能力成熟度模型</h4><ul>\n<li><p>基本概念</p>\n<ul>\n<li><p>软件过程</p>\n</li>\n<li><p>关键过程域</p>\n<ul>\n<li>相互关联的若干软件实践活动和有关基础设施的一个集合</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件能力成熟度等级</p>\n<ul>\n<li><p>1级：初始级</p>\n</li>\n<li><p>2级：可重复级</p>\n</li>\n<li><p>3级：已定义级</p>\n</li>\n<li><p>4级：已管理级</p>\n</li>\n<li><p>5级：优化级</p>\n</li>\n</ul>\n</li>\n<li><p>CMM应用</p>\n<ul>\n<li><p>能力评估</p>\n<ul>\n<li><p>软件过程评估</p>\n</li>\n<li><p>软件能力评价</p>\n</li>\n</ul>\n</li>\n<li><p>过程改善</p>\n</li>\n</ul>\n</li>\n<li><p>CMM评估的实施</p>\n<ul>\n<li><p>CBA-SCE</p>\n<ul>\n<li>对机构的软件能力进行评估</li>\n</ul>\n</li>\n<li><p>CBA-IPI</p>\n<ul>\n<li>对内部的过程改进实施评估</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>软件过程评估的SPICE国际标准</p>\n<ul>\n<li>software process improvement and capability determination</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"ISO-9000国际标准\"><a href=\"#ISO-9000国际标准\" class=\"headerlink\" title=\"ISO 9000国际标准\"></a>ISO 9000国际标准</h4><h4 id=\"软件度量\"><a href=\"#软件度量\" class=\"headerlink\" title=\"软件度量\"></a>软件度量</h4><ul>\n<li><p>项目度量</p>\n<ul>\n<li>个人开发工作的测度</li>\n</ul>\n</li>\n<li><p>过程度量</p>\n<ul>\n<li>整个企业中全体项目组开发能力的衡量</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十三、软件工程环境\"><a href=\"#十三、软件工程环境\" class=\"headerlink\" title=\"十三、软件工程环境\"></a>十三、软件工程环境</h3><h4 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h4><ul>\n<li><p>定义</p>\n<ul>\n<li>支持软件产品开发、维护和管理的软件系统</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>友好和统一的用户界面</p>\n<ul>\n<li><p>具有弹出功能的多级菜单</p>\n</li>\n<li><p>屏幕提示和在线帮助技术</p>\n</li>\n<li><p>多窗口技术</p>\n</li>\n<li><p>向导技术</p>\n</li>\n</ul>\n</li>\n<li><p>集成化的软件工具</p>\n<ul>\n<li><p>数据集成</p>\n</li>\n<li><p>界面集成</p>\n</li>\n<li><p>控制集成</p>\n</li>\n<li><p>过程集成</p>\n</li>\n<li><p>平台集成</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>理想环境的模型</p>\n</li>\n<li><p>CASE环境</p>\n<ul>\n<li><p>计算机辅助软件工程，CASE，computer-aided software engineering</p>\n</li>\n<li><p>组成构件</p>\n<ul>\n<li><p>CASE工具</p>\n<ul>\n<li><p>支持软件开发的工具</p>\n</li>\n<li><p>支持软件维护的工具</p>\n</li>\n<li><p>支持软件管理过程和支持过程的工具</p>\n</li>\n</ul>\n</li>\n<li><p>集成化框架</p>\n<ul>\n<li><p>建立环境信息仓库</p>\n<ul>\n<li><p>数据完整性</p>\n</li>\n<li><p>信息共享</p>\n</li>\n<li><p>数据-工具 集成</p>\n</li>\n<li><p>数据-数据 集成</p>\n</li>\n<li><p>文档标准化</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>为可移植性服务的机构</p>\n</li>\n<li><p>操作系统</p>\n</li>\n<li><p>硬件平台</p>\n</li>\n<li><p>环境体系结构</p>\n</li>\n</ul>\n</li>\n<li><p>一般结构</p>\n<ul>\n<li><p>CASE集成框架的典型结构</p>\n<ul>\n<li><p>用户界面层</p>\n</li>\n<li><p>工具层</p>\n</li>\n<li><p>对象管理层</p>\n</li>\n<li><p>共享中心库层</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>实例</p>\n<ul>\n<li><p>Rational SUITE Enterprise Studio</p>\n</li>\n<li><p>青鸟系统</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"十四、软件工程高级课题\"><a href=\"#十四、软件工程高级课题\" class=\"headerlink\" title=\"十四、软件工程高级课题\"></a>十四、软件工程高级课题</h3><h4 id=\"Web工程\"><a href=\"#Web工程\" class=\"headerlink\" title=\"Web工程\"></a>Web工程</h4><ul>\n<li><p>Web开发</p>\n<ul>\n<li><p>开发团队</p>\n<ul>\n<li><p>Web决策人员</p>\n</li>\n<li><p>内容提供人员</p>\n</li>\n<li><p>Web开发人员</p>\n</li>\n<li><p>Web发布人员</p>\n</li>\n<li><p>Web支持人员</p>\n</li>\n<li><p>Web管理员（站长）</p>\n</li>\n</ul>\n</li>\n<li><p>特点</p>\n<ul>\n<li><p>WebApp常常以增量的方式开发</p>\n</li>\n<li><p>需求经常发生变化</p>\n</li>\n<li><p>开发期限较短</p>\n</li>\n</ul>\n</li>\n<li><p>分析</p>\n<ul>\n<li><p>内容</p>\n</li>\n<li><p>交互</p>\n</li>\n<li><p>功能</p>\n</li>\n<li><p>配置</p>\n</li>\n<li><p>导航关系</p>\n</li>\n<li><p>安全</p>\n<ul>\n<li><p>Web站点安全</p>\n</li>\n<li><p>Web站点风险</p>\n<ul>\n<li><p>机密信息窃取</p>\n</li>\n<li><p>数据和软、硬件系统被破坏</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>设计</p>\n<ul>\n<li><p>设计原则和目标</p>\n<ul>\n<li><p>简单</p>\n</li>\n<li><p>美观</p>\n</li>\n<li><p>整体保持一致</p>\n</li>\n</ul>\n</li>\n<li><p>界面设计</p>\n</li>\n<li><p>设计方法</p>\n<ul>\n<li>无定式</li>\n</ul>\n</li>\n<li><p>设计中的问题</p>\n</li>\n</ul>\n</li>\n<li><p>测试</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"基于体系结构的软件开发\"><a href=\"#基于体系结构的软件开发\" class=\"headerlink\" title=\"基于体系结构的软件开发\"></a>基于体系结构的软件开发</h4><ul>\n<li><p>应用软件的体系结构</p>\n<ul>\n<li><p>程序</p>\n</li>\n<li><p>业务</p>\n</li>\n<li><p>技术</p>\n</li>\n<li><p>信息</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"面向方面的软件开发\"><a href=\"#面向方面的软件开发\" class=\"headerlink\" title=\"面向方面的软件开发\"></a>面向方面的软件开发</h4><ul>\n<li><p>面向方面编程(aspect-oriented programming,AOP)</p>\n<ul>\n<li><p>基本概念</p>\n<ul>\n<li><p>关注点</p>\n</li>\n<li><p>方面</p>\n</li>\n<li><p>连接点</p>\n</li>\n<li><p>织入</p>\n</li>\n</ul>\n</li>\n<li><p>AOP设计的步骤</p>\n<ul>\n<li><ol>\n<li>对需求规约经行方面分解</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>对标识出的方面分别通过程序机制实现</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>用方面编织器将所有的单元编排重组在一起，形成可运行系统</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>面向方面软件开发(aspect-oriented software development,AOSD)</p>\n<ul>\n<li><p>开发步骤</p>\n<ul>\n<li><ol>\n<li>方面分解</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>关注点实现</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>方面的重新组合</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"形式化的软件开发\"><a href=\"#形式化的软件开发\" class=\"headerlink\" title=\"形式化的软件开发\"></a>形式化的软件开发</h4><ul>\n<li><p>模型化</p>\n<ul>\n<li><p>现实世界</p>\n</li>\n<li><p>模型表示</p>\n</li>\n<li><p>计算机系统</p>\n</li>\n</ul>\n</li>\n<li><p>模型变换</p>\n<ul>\n<li><p>形式化规格</p>\n</li>\n<li><p>形式化验证</p>\n</li>\n<li><p>程序求精</p>\n</li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm2bvklav00004cufc91p2h7u","category_id":"cm2bvklb000024cuf2fl6dz85","_id":"cm2bvklb100044cufgca5hmtt"},{"post_id":"cm2bvklay00014cufh2aheysy","category_id":"cm2bvklb100034cufgn53be5h","_id":"cm2bvklb100054cuf29yo93zt"},{"post_id":"cm2bvklb100064cuf25ke3zwr","category_id":"cm2bvklb100034cufgn53be5h","_id":"cm2bvklb300094cuf9iq81p81"},{"post_id":"cm2bvklb200074cufdf0m098e","category_id":"cm2bvklb100034cufgn53be5h","_id":"cm2bvklb3000a4cufg5k00sxd"},{"post_id":"cm2bvklb300084cuf4bjed77q","category_id":"cm2bvklb100034cufgn53be5h","_id":"cm2bvklb3000b4cufelbxeywz"}],"PostTag":[],"Tag":[]}}